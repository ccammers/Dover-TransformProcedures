Let vAREndDate = Date(Floor(Num(Today())));
If Day(Date(Num('$(vAREndDate)'))) > 5 then
   Let vARMonths = 1;
Else
   Let vARMonths = 2;
end if

Sub SecurityAccessProcess
SecurityAccess:
Crosstable("%SITE","HasAccess",4)
LOAD
	UPPER(userDirectory) & '\' & UPPER(userID) as USERID,
    //UPPER(userDirectory) as userDirectory,
    //UPPER("userID") as userID,
    UPPER(Name) as NAME,
    Upper(Access) as ACCESS,
    Upper("Application") as APPLICATION,
    CHN,
    Cook_Corp as COOK_CORP,
    Houston as COOK_DPOPEARLAND,
    Jeffersonville as COOK_JEFFERSONVILLE,
    [Services US] as COOK_SERVICES,
    Cook_UAE as COOK_UAE,
    [Ellesmere Port] as COOK_UK,
    INPROUK,
    INPROUS,
    Master as MASTER,
    MFS,
    Guaymas as MX,
    BPI as TX,
    [UK Fluid Film] as UK,
    UKMAG,
    [US Fluid Film] as US,
    WBCorp as WBCORP,
    RI
FROM [lib://QV-ProductionData/Data/External Data/Security/SectionAccessSiteAccessbyApp.xlsx]
(ooxml, embedded labels, table is Sheet1);



SysUsers:
Load * Inline [
dir, nombre, permiso
WBC,QVCONSULT,ADMIN
INTERNAL,SA_REPOSITORY,ADMIN
INTERNAL,SA_PROXY,ADMIN
INTERNAL,SA_SCHEDULER,ADMIN
INTERNAL,SA_ENGINE,ADMIN
INTERNAL,SA_PRINTING,ADMIN
INTERNAL,SA_HUB,ADMIN
INTERNAL,SA_REPORTING,ADMIN
INTERNAL,SA_QLIKVIEW,ADMIN
INTERNAL,SA_API,ADMIN
INTERNAL,SA_CONVERTER,ADMIN
DOVER-GLOBAL,10076560,ADMIN
DOVER-GLOBAL,10076561,ADMIN
];

Left Join (SysUsers)
Load APPLICATION as app;
Load
   APPLICATION,
   Sum("HasAccess") as NumSites
Resident SecurityAccess
Group by APPLICATION;

Left Join (SysUsers)
Load %SITE as site;
Load
   %SITE,
   Sum("HasAccess") as NumSites
Resident SecurityAccess
Group by %SITE;



Concatenate(SecurityAccess)
Load
   upper(dir) & '\' & upper(nombre) as USERID,
   nombre as NAME,
   app as APPLICATION,
   upper(permiso) as ACCESS,
   site as %SITE,
   1 as HasAccess
Resident SysUsers;



Drop table SysUsers;

Inner Join(SecurityAccess)
Load
	USERID,
    NAME,
    APPLICATION,
    %SITE
Resident SecurityAccess
Where HasAccess <> 0;



Store * From SecurityAccess into [lib://QV-ProductionData/Data/Final Stage/SecurityAccess.qvd] (qvd);

DROP Table SecurityAccess;

End Sub;



Sub BuildMappingTable(subTName,subMapExists)
    Let subMapExists = not isNull(ApplyMap('$(subTName)','XXXXXXXXX','XXXXXXXX'));
	If subMapExists = true() then
	   Let subMapExists = Null();
       exit sub;
	End if
    Let subMapExists = Null();
/*no longer needed 2016-5-17 Chris Cammers(Solve)
SPECIAL_HANDLING_MAP:
mapping
LOAD TableName & '-' & FieldName as [SPECIAL_HANDLING_MAP_ARG], 
     If(Len(Trim([Column Expression]))=0,[Standard Expression],[Column Expression]) as SPECIAL_HANDLING_MAP_DESC
FROM
[$(ENV_QV_EXTERNAL_DATA)ColumnHandling.xlsx]
(ooxml, embedded labels, table is ColumnExpressions);
//Where Len(Trim([Column Expression]))>0;
*/
	Switch subTName
		Case 'PURCHASE_ORDER_STAT'
			
			PURCHASE_ORDER_STAT:
			Mapping
			Load * inline [
			PURCHASE_ORDER_STAT_ARG, PURCHASE_ORDER_STAT_DESC
			C, Complete
			F, Filled
			O, Ordered
			P, Planned
			];
		
	    Case 'TOP_VENDOR_MAP' 
			
			TOP_VENDOR_MAP:
			Mapping
			LOAD
				Site & '-' & [Vendor Number] as TOP_VENDOR_MAP_ARG,
				Dual('Yes',1) as TOP_VENDOR_MAP_DESC
			FROM
			[$(ENV_SHAREPOINT_PROCUREMENT)Top Suppliers Antigo 2013.xlsx]
			(ooxml, embedded labels, header is 1 lines, table is Sheet1);
	    
	    Case 'SHIP_CODE_MAP' 		
			
			SHIP_CODE_MAP:
			Mapping
			LOAD SiteCd & '-' & ship_code as SHIP_CODE_MAP_ARG, 
			     description as SHIP_CODE_MAP_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)shipcode.qvd]
			(qvd);
		case 'SHIP_CODE_TRANSPORT_MAP'
           
           SHIP_CODE_TRANSPORT_MAP:
			Mapping
			LOAD SiteCd & '-' & ship_code as SHIP_CODE_TRANSPORT_MAP_ARG, 
			     transport as SHIP_CODE_TRANSPORT_MAP_DESC
                 
			FROM
			[$(ENV_QV_RAW_STAGE)shipcode.qvd]
			(qvd);
        
        
        
        
	    Case 'TERMS_CODE_MAP' 
			
			TERMS_CODE_MAP:
			Mapping
			LOAD SiteCd & '-' & terms_code as TERMS_CODE_MAP_ARG, 
			     description as TERMS_CODE_MAP_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)terms.qvd]
			(qvd);
	
	    Case 'WonLostMap' 		
			
			WonLostMapTemp:
			LOAD SiteCd & '-' & Value as WonLostMapA, 
			     Value & '-' & Description as WonLostMapD
			FROM
			[$(ENV_QV_RAW_STAGE)UserDefinedTypeValues.qvd]
			(qvd)
			Where TypeName = 'WonLost';
			
			Concatenate(WonLostMapTemp)
			Load * Inline [
			WonLostMapA, WonLostMapD
			UDF,Undefined
			];
			
			WonLostMap:
			Mapping
			Load WonLostMapA as WonLostMapArg, WonLostMapD as WonLostMapDesc
			Resident WonLostMapTemp; 
	
			Drop Table WonLostMapTemp;
			
	    Case 'HoldCodeMap' 
			
			HoldCodeMapTemp:
			LOAD SiteCd & '-' & Value as HoldCodeMapA, 
			     Description as HoldCodeMapD
			FROM
			[$(ENV_QV_RAW_STAGE)UserDefinedTypeValues.qvd]
			(qvd)
			Where TypeName = 'HoldCode';
			
			Concatenate(HoldCodeMapTemp)
			Load * Inline [
			HoldCodeMapA, HoldCodeMapD
			UDF,Undefined
			];
			
			HoldCodeMap:
			Mapping
			Load HoldCodeMapA as HoldCodeMapArg, HoldCodeMapD as HoldCodeMapDesc
			Resident HoldCodeMapTemp; 
			
			drop table HoldCodeMapTemp;
	
	    Case 'FOCUS_PRODUCT_MAP' 
			
			FOCUS_PRODUCT_MAP:
			Mapping
			LOAD 
				Site & '-' & Item as FOCUS_PRODUCT_MAP_ARG,
				[New Product Name] as FOCUS_PRODUCT_MAP_DESC
			FROM
			[$(ENV_SHAREPOINT_SALES)New Product Items.xlsx]
			
			//[\\sharepoint\DavWWWRoot\Qlikview\Sales\New Product Items.xlsx]
			(ooxml, embedded labels, table is Sheet1);
	
		 Case 'PRODUCT_CODE_MAP' 
			
			PRODUCT_CODE_MAP:
			Mapping
			LOAD SiteCd & '-' & [prodcode product_code] as PRODUCT_CODE_MAP_ARG,
			     [prodcode description] & '|Placeholder prod code cat|Placeholder prod code sub cat' as PRODUCT_CODE_MAP_DESC
                 //[prodcode description] & '|' & If(isnull([prodcode Uf_Prod_Cat]),'Undefined On Prod code',[prodcode Uf_Prod_Cat]) & '|' & If(isnull([prodcode Uf_Prod_SubCat]),'Undefined On Prod code',[prodcode Uf_Prod_SubCat]) as PRODUCT_CODE_MAP_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)prodcode.qvd]
			(qvd)
			Where 1=1;
		 
		 Case 'FAMILY_CODE_MAP'
			
			FAMILY_CODE_MAP:
			Mapping
			Load
				[%Item Family Id] as [FAMILY_CODE_MAP_ARG], 
				[Item Family description] as [FAMILY_CODE_MAP_DESC]
			FROM
			[$(ENV_QV_RAW_STAGE)famcode.qvd]
			(qvd);
		case 'DEFECT_PO_LINE_MAP'
			
			DEFECT_PO_LINE_MAP:
			Mapping
			Load Distinct
				[Defect Purchase Order Line Id],
				Dual('Yes',1)
			From $(ENV_QV_RAW_STAGE)RS_QCCar.qvd(qvd)
			Where
			     [Defect Dept] = '104' and  
				 Len(Trim([Defect Purchase Order Line Id])) > 0;
				 
		case 'PO_ORDER_DATE_MAP'
		
			PO_ORDER_DATE_MAP:
			Mapping
			Load
			[%Purchase Order Id] as PO_ORDER_DATE_MAP_ARG,
			[Purchase Order Date] as [PO_ORDER_DATE_MAP_DESC]
			from [$(ENV_QV_RAW_STAGE)po.qvd](qvd);
        case 'WLPrefixMap'
        
        	WLPrefixMap:
			Mapping
			Load WLPrefix, Dual(PrefixDesc,Order) as PrefixDesc inline [
			WLPrefix,PrefixDesc,Order
			W,Won,1
			L,Loss,2
			A,Abandoned,3
			P,Pending,4
			U,Undefined,5
			];
		
		Case 'EmployeeNameMap'
			EmployeeNameMap:
			Mapping
			LOAD SiteCd & '-' & emp_num as EmployeeNameMap_arg, 
			     name as EmployeeNameMap_desc
			FROM
			[$(ENV_QV_RAW_STAGE)employee.qvd]
			(qvd);
		case 'SiteMap'
			SiteMap:
			Mapping
			LOAD 
				SiteCd as SiteMap_Arg, 
			    Site as SiteMap_Desc
			FROM
			[$(ENV_QV_RAW_STAGE)Site.qvd]
			(qvd);
		case 'INVOICE_DUE_DATE_MAP'
			INVOICE_DUE_DATE_MAP:
			Mapping
			Load
				[ARTransaction Apply To Invoice ID] as INVOICE_DUE_DATE_MAP_ARG,
			    [ARTransaction Due Date] as INVOICE_DUE_DATE_MAP_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)artran.qvd]
			(qvd)
			Where [ARTransaction type] = 'I';//[ARTransaction inv_seq] = 0;
		case 'INVOICE_DATE_MAP'
			INVOICE_DATE_MAP:
			Mapping
			Load
			[Invoice Header Site-Invoice Number] as [INVOICE_DATE_MAP_ARG],
			[Invoice Header Invoice Date] as [INVOICE_DATE_MAP_DESC]
			FROM
			[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
			(qvd);
		case 'INVOICE_EXCHANGE_RATE'
			INVOICE_EXCHANGE_RATE:
			Mapping
			Load
				[Invoice Header Site-Invoice Number] as [INVOICE_EXCH_RATE_ARG],
				[Invoice Header exch_rate] as [INVOICE_EXCH_RATE_DESC]
			From
			[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
			(qvd);
		case 'INVOICE_LAST_PAYMENT_MAP'
			INVOICE_LAST_PAYMENT_MAP:
			Mapping
			Load
			[ARTransaction Apply To Invoice ID] as INVOICE_LAST_PAYMENT_MAP_ARG,
			Date(Max([ARTransaction Due Date])) as INVOICE_LAST_PAYMENT_MAP_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)artran.qvd]
			(qvd)
			//Where Match([ARTransaction type],'I','D')=0 and [ARTransaction Apply to Invoice Number] <> '0'
			group by
			[ARTransaction Apply To Invoice ID];
		case 'ORDER_CUST_SEQ_ID'
			ORDER_CUST_SEQ_ID:
			Mapping
			LOAD 'Order-' & SiteCd & '-' & co_num as ORDER_CUST_SEQ_ID_ARG, 
				 SiteCd & '-' & cust_num & '-' & cust_seq as ORDER_CUST_SEQ_ID_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)co.qvd]
			(qvd);
		case 'EndTypeMap'
			EndTypeMap:
			Mapping
			LOAD [SiteCd] & '-' & [endtype end_user_type] as EndTypeMap_Arg, 
			     [endtype description] as EndTypeMap_Desc
			FROM
			[$(ENV_QV_RAW_STAGE)endtype.qvd]
			(qvd);
		case 'CustomerTypeMap'	
			CustomerTypeMap:
			Mapping
			LOAD SiteCd & '-' & "cust_type" as "CustomerTypeMapArg",
			    cust_type & '|' & description as CustomerTypeMapDesc;
			//SQL SELECT *
			//FROM $(vDb).dbo.custtype;
			Load * From
			[$(ENV_QV_RAW_STAGE)custtype.qvd](qvd);
		case 'TerritoryMap'	
			TerritoryMap:
			Mapping
			LOAD [SiteCd] & '-' & [territory territory_code] as TerritoryMap_Arg,
			     [territory territory] as TerritoryMap_Desc
			FROM
			[$(ENV_QV_RAW_STAGE)territory.qvd]
			(qvd);
		case 'CORPORATE_CUSTOMER_MAP'
			CORPORATE_CUSTOMER_MAP:
			Mapping
// 			LOAD Site & '-' & [Subordinate Customer Number] as CORPORATE_CUSTOMER_MAP_ARG, 
// 			     [Corporate Customer Number] & '|' & [Corporate Customer Name] & '|' & [Subordinate Customer Shortname] as CORPORATE_CUSTOMER_MAP_DESC
// 			FROM
// 			[$(ENV_SHAREPOINT_SALES)Corporate Customers.xlsx]
// 			(ooxml, embedded labels, table is [Corporate Customers]);
            LOAD
    			"Customer ID" as CORPORATE_CUSTOMER_MAP_ARG,
                cust_num & '|' & name & '|' & name as CORPORATE_CUSTOMER_MAP_DESC
			FROM [$(ENV_QV_RAW_STAGE)custaddr.qvd]
			(qvd) Where cust_seq = 0;
		case 'INVOICE_CUSTOMER_MAP'
			INVOICE_CUSTOMER_MAP:
			Mapping
			LOAD 
			      [Invoice Header Site-Invoice Number] as INVOICE_CUSTOMER_MAP_ARG,
			     [Invoice Customer ID] as INVOICE_CUSTOMER_MAP_DESC
			FROM
			[$(ENV_QV_FINAL_STAGE)Invoice Header.qvd]
			(qvd);
		Case 'INVOICE_DISC_MAP'
		   INVOICE_DISC_MAP:
		   Mapping
		   LOAD [Invoice Header Site-Invoice Number], 
		        [Invoice Header disc]
		   FROM
		   [$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
		   (qvd);

        Case 'SYSTEM_SITE_TERRITORY_MAP'
           SYSTEM_SITE_TERRITORY_MAP:
           Mapping
           LOAD SystemSiteKey as SYSTEM_SITE_TERRITORY_MAP_ARG, 
                [Territory Code] as SYSTEM_SITE_TERRITORY_MAP_DESC
           FROM
           [$(ENV_QV_EXTERNAL_DATA)SiteTableInfo.xlsx]
           (ooxml, embedded labels, table is SystemSites);
        Case 'SystemSiteNameMap'
           SystemSiteNameMap:
           Mapping
           LOAD SiteCd & '-' & [site site] as SystemSiteNameMap_ARG, 
                [site site_name] as SystemSiteNameMap_DESC 
           FROM
           [$(ENV_QV_RAW_STAGE)system_site.qvd]
           (qvd);
        CASE 'WarehouseNameMap'
           WarehouseNameMap:
           Mapping
			LOAD SiteCd & '-' & [whse whse] as WarehouseNameMap_ARG, 
			     [whse name] as WarehouseNameMap_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)whse.qvd]
			(qvd);
        Case 'SystemSiteKAMMap'
           SystemSiteKAMMap:
           Mapping
           LOAD SystemSiteKey as SystemSiteKAMMap_ARG, 
                KAM as SystemSiteKAMMap_DESC
           FROM
           [$(ENV_QV_EXTERNAL_DATA)SiteTableInfo.xlsx]
           (ooxml, embedded labels, table is SystemSites);
       case 'WarehouseCountryMap'
         WarehouseCountryMap:
         Mapping
         LOAD SiteCd & '-' & [whse whse] as WarehouseCountryMap_ARG, 
            [whse city] & '|' & 
            [whse state]  & '|' & 
            [whse zip]  & '|' & 
            SiteCd & '-' & [whse country] as  WarehouseCountryMap_DESC
         FROM
         [$(ENV_QV_RAW_STAGE)whse.qvd]
         (qvd);
      Case 'SiteCurrencyCodeMap'
           SiteCurrencyCodeMap:
           Mapping
			LOAD SystemSiteKey as SiteCurrencyCodeMap_ARG, 
			     Currency as SiteCurrencyCodeMap_DESC
			FROM
			[$(ENV_QV_EXTERNAL_DATA)SiteTableInfo.xlsx]
			(ooxml, embedded labels, table is SystemSites)
			Where Len(Trim(Currency))>0;
      case 'TransferHeaderExchangeRateMap'
			TransferHeaderExchangeRateMap:
			Mapping
			Load
			SiteCd & '-' & [transfer trn_num] as TransferHeaderExchangeRateMap_ARG,
			[transfer exch_rate] as TransferHeaderExchangeRateMap_DESC
			FROM
			[$(ENV_QV_RAW_STAGE)transfer.qvd]
			(qvd);
       case 'IndMap'
			IndMap:
			Mapping
			LOAD Site & '-' & If(IsNum(Code),Num(Floor(Code),'000'),Code) as IndCode, 
			     Exclude as indExclude
			FROM
			[$(ENV_SHAREPOINT_OPERATIONS)Indirect_Codes.xlsx]
			(ooxml, embedded labels, table is ExludeFromUtilization)
			Where Exclude = 0;
       case 'MapYesNo'
	       MapYesNo:
		   Mapping
		   Load
		   	Num(Arg) as Arg,
		   	MapYesNo;
		   Load * Inline [
				Arg, MapYesNo
				1, Yes
				0, No
				];
		case 'MapJobType'
		       MapJobType:
			   Mapping
			   Load
				   JobType,
				   MapNewRepeat;
			   Load * Inline [
				   JobType,MapNewRepeat
				   'FIRST RUN','NEW'
				   'FR R&D','NEW'
				   'R&D', 'NEW'
				   'REPEAT','REPEAT'
				   'REWORK','REPEAT'
				   'RUSH','REPEAT'
				   'SAMPLES','REPEAT'
				   'SERVICE','REPEAT'
				   'SPARES','REPEAT'
				   'WARRANTY','REPEAT'
			   ];
         case 'OperationCompleteDate'
             OperationCompleteDateTemp:
             //Mapping
             LOAD 
                SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) & '-' & If(Isnull("oper_num") = -1,-1,oper_num) as OperationCompleteDate_ARG,
                Date(Num(/*Max(*/trans_date))/*)*/ as trans_date
             FROM
                [$(ENV_QV_RAW_STAGE)jobtran.qvd]
                (qvd)
             Where Match(trans_type, 'I','R','S','M') > 0
                and complete_op = 1;
             //Group by 
             //	SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) & '-' & If(Isnull("oper_num") = -1,-1,oper_num);
             OperationCompleteDate:
             Mapping
             LOAD 
                OperationCompleteDate_ARG,
                Date(Max(trans_date)) as OperationCompleteDate_DESC
             resident OperationCompleteDateTemp
             Group by OperationCompleteDate_ARG;

             Drop table OperationCompleteDateTemp;

		case 'ProductManufacturedMap'
           ProductManufacturedMap:
           Mapping
           LOAD
              SiteCd & '-' & Value as PoductManufacturedMap_ARG,
              Value & '|' & Description as PoductManufacturedMap_DESC
			FROM [$(ENV_QV_RAW_STAGE)UserDefinedTypeValues.qvd](qvd)
			Where TypeName = 'ProductManufactured';
        
        
        case 'SubProductManufacturedMap'
           SubProductManufacturedMap:
           Mapping
           LOAD
              SiteCd & '-' & Value as SubPoductManufacturedMap_ARG,
              Value & '|' & Description as SubPoductManufacturedMap_DESC
			FROM [$(ENV_QV_RAW_STAGE)UserDefinedTypeValues.qvd](qvd)
			Where TypeName = 'SubProductManufactured';
		case 'CustomerCurrencyMap'
			CustomerCurrencyMap:
			Mapping
			LOAD
				[Customer Seq ID] as CustomerCurrencyMap_ARG,
				curr_code as CustomerCurrencyMap_DESC
			FROM [$(ENV_QV_RAW_STAGE)custaddr.qvd](qvd);
        case 'SROLaborCost'
        	SROLaborCost:
            mapping
            LOAD
                SROLineInvoiceKey,
                "fs_sro_labor extcost" & '|' & 
                "fs_sro_labor extprice" & '|' &
                "fs_sro_labor hrs_to_bill" & '|' &
                "fs_sro_labor hrs_worked"
            FROM [$(ENV_QV_RAW_STAGE)fs_sro_labor_special.qvd]
            (qvd);
        case 'ItemDescMap'
             ItemDescMap:
             Mapping
             Load
                [%Item Id] as ItemDescMap_ARG,
                [Item description] & '|' & [Item product code] & '|' & [Item lot_size] as ItemDescMap_Desc
             From [$(ENV_QV_RAW_STAGE)item.qvd](qvd);
       Case 'FSSRPOperDesc'
            FSSRPOperDesc:
            Mapping
            LOAD 
                SiteCd & '-' & "fs_sro_oper sro_num"  & '-' & "fs_sro_oper sro_line" & '-' & "fs_sro_oper sro_oper" as FSSRPOperDesc_Arg,
		        [fs_sro_oper description] & '|' & [fs_sro_oper product_code] as FSSRPOperDesc_Desc
		    FROM [$(ENV_QV_RAW_STAGE)fs_sro_oper.qvd](qvd);

        Case 'INV_SRO_MAP'
        INV_SRO_MAP:
        Mapping
        LOAD
            SiteCd & '-' & "fs_sro_inv_hdr inv_num" as INV_SRO_MAP_ARG,
            SiteCd & '-' & [fs_sro_inv_hdr inv_num] as INV_SRO_MAP_DESC
        FROM [$(ENV_QV_RAW_STAGE)fs_sro_inv_hdr.qvd]
        (qvd);
		
        Case 'OrderLineItem_Map'
          OrderLineItem_Map:
          Mapping
          LOAD
              'Order-' & SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release as OrderLineItem_Map_Arg,
              'Item-' & SiteCd & '-' & item as OrderLineItem_Map_Desc
          FROM [$(ENV_QV_RAW_STAGE)coitem.qvd]
          (qvd);

        Case 'DeliveryTermsMap'
            DeliveryTermsMap:
            Mapping
            LOAD
                SiteCd & '-' & "DeliveryTerms delterm" as  DeliveryTermsMap_ARG,
                "DeliveryTerms description" as DeliveryTermsMap_DESC
            FROM [$(ENV_QV_RAW_STAGE)del_term.qvd]
            (qvd);
        case 'MostGrowableCustomerMap'
           MostGrowableCustomerMap:
		   Mapping
           LOAD
              MostGrowableCustomers as MostGrowableCustomerMap_ARG,
              1 as MostGrowableCustomerMap_Desc
           FROM [lib://QlikDataFiles Corporate Share/Finance/Aftermarket Sales Dashboard/Aftermarket  Most Growable Customers.xlsx]
           (ooxml, embedded labels, table is [Most Growable Customers])
           Where ThisRowisACustomer = 1;
        case 'AOPKeyMap'
            
            //Get all the possible Regions
            AOPKeyMapTemp:
            Load
               Value as Region;
            LOAD
                Upper(Value) as Value,
                Count(Value) as ValCount
            FROM [$(ENV_QV_RAW_STAGE)UserDefinedTypeValues.qvd]
            (qvd)
            Where TypeName = 'DPC_Region'
            Group by Value;

            //Get all the possible slsman codes
            Left Join(AOPKeyMapTemp)
            Load
               SalesPersonId;
            LOAD
                //SiteCd & '-'& slsman as SalesPersonId
                slsman as SalesPersonId,
                Count(slsman)
            FROM [$(ENV_QV_RAW_STAGE)slsman.qvd]
            (qvd)
            Group by slsman;

            AOPKeyMap:
            Mapping
            Load
            SalesPersonId & '||' & Region as AOPKeyMap_Arg,
            Hash128(SalesPersonId,Region) as AOPKeyMap_Desc
            Resident AOPKeyMapTemp;

            Drop table AOPKeyMapTemp;
        Case 'CustomerRegionMap'
            CustomerRegionMap:
            Mapping
            LOAD
                SiteCd & '-' & cust_num & '-' &  cust_seq as CustomerRegionMap_ARG,
                Upper("customer Uf_DPC_Region") as CustomerRegionMap_DESC
            FROM [$(ENV_QV_RAW_STAGE)customer.qvd]
            (qvd)
            Where Len(Trim("customer Uf_DPC_Region"))>0;
        case 'SiteKahlixMap'
             SiteKahlixMap:
             Mapping
             LOAD
			    SiteCd as SiteKahlixMap_ARG,
			    KahlixCode as SiteKahlixMap_DESC
			 FROM [$(ENV_QV_EXTERNAL_DATA)ExtractConfigurationData/Sites.xlsx]
			 (ooxml, embedded labels, table is Sites)
             Where Len(Trim(KahlixCode))>0;
         
         case 'EndTypeScrapMap'
        	EndTypeScrapMap:
            Mapping
            LOAD
            	[SiteCd] & '-' & [endtype end_user_type] as EndTypeScrapMap_Arg,
                IsScrapUser as EndTypeScrapMap_Desc
            FROM [$(ENV_QV_EXTERNAL_DATA)Dover Scrap Customer Flags.xlsx]
            (ooxml, embedded labels, table is Sheet1);
            
         Case 'CustomerScrapMap'
         Call BuildMappingTable('EndTypeScrapMap')
         	CustomerScrapMap:
            Mapping
            Load
            	SiteCd & '-' & cust_num as CustomerScrapMap_Arg,
            	If(Len(Trim(end_user_type))=0,0, ApplyMap('EndTypeScrapMap', SiteCd & '-' & end_user_type,0)) as CustomerScrapMap_Desc
         	FROM
   		 	[$(ENV_QV_FINAL_STAGE)customer_custaddr_join.qvd]
    		(qvd)
    		Where cust_seq = 0;
		Case 'SiteTimeZoneMap'
        	SiteTimeZoneMap:
        	Mapping
            Load
            	SiteCd as SiteTimeZoneMap_Arg,
                QlikTimeZoneCode as SiteTimeZoneMap_Desc
            FROM [lib://QV-ProductionData/Data/External Data/ExtractConfigurationData/Sites.xlsx]
			(ooxml, embedded labels, table is Sites)
            Where len(trim(QlikTimeZoneCode)) > 0;

        case 'SupplierOTD_Map'
        	SupplierOTD_Map:
              Mapping
              Load
                  SiteCd & '-' & po_num as SupplierOTD_Map_Arg,
                  rcvd_date as SupplierOTD_Map_Desc
              FROM [lib://QV-ProductionData/Data/Raw Stage/po_rcpt.qvd]
              (qvd);	

		DEFAULT
		   Trace Mapping Table not defined: $(subTName);
	 End switch




End sub



Sub ServiceInvoiceDetailProcess
		CAll BuildMappingTable('INVOICE_DISC_MAP')
        call BuildMappingTable('SiteKahlixMap')
        
        InvoiceDetail:
        Load
            'Service Invoice Detail' as FactType,
            %Site,
            ApplyMap('SiteKahlixMap',%Site,Null()) as %KahlixCode,
            %WarehouseKey,
            %ShipToCustomerId,
            %BillToCustomerId,
            %Salesman,
            %SalespersonKey,
            %RegionKey,    
            %Invoice,
            %TempInvoiceID,
            //%Order,
            MasterDate,
            [Exchange Rate],
            Conv_USD,
            Conv_GBP,
            [Currency Code]
        From [$(ENV_QV_FINAL_STAGE)InvoiceHeaderFact.qvd](qvd);
        
        inner Join(InvoiceDetail)
        Load
           %TempInvoiceID,
           %FSSROInvoiceItemID,
           %Order,
           %OrderItem,
           %Item,
           %InvoiceItem,
           [Invoice Discount],
           [Invoice Item Discount],
           [Invoice Item Extended Cost(LOCAL)],
           [Invoice Item Extended Price(CUST)],
           //[Invoice Item Extended Price Pre discount(CUST)],
            // * (1 - (ApplyMap('INVOICE_DISC_MAP',"fs_sro_inv_item Site-InvoiceNum",0)/100))
           [Invoice Item Price(CUST)],
           [Invoice Item Qty Sold],
           [Invoice Item Qty Billed],
           [Invoice Description];
        LOAD
            "fs_sro_inv_item Site-InvoiceNum" as %TempInvoiceID,
            PrimaryKey as %FSSROInvoiceItemID,
            'SRO-' & SiteCd & '-' & "fs_sro_inv_item sro_num" as %Order,
            'SRO-' & SiteCd & '-' & "fs_sro_inv_item sro_num" & '-' & "fs_sro_inv_item sro_line" as %OrderItem,
            If(isnull([fs_sro_inv_item item]),'Project Fixed or Misc',SiteCd & '-' & [fs_sro_inv_item item]) as %InvoiceItem,
            'SRO-' & SiteCd & '-' & "fs_sro_inv_item sro_num" & '-' & "fs_sro_inv_item sro_line" & '-' & "fs_sro_inv_item sro_oper" as %Item,
            ApplyMap('INVOICE_DISC_MAP',"fs_sro_inv_item Site-InvoiceNum",0)/100 as [Invoice Discount],
            If(isnull("fs_sro_inv_item disc"),0,"fs_sro_inv_item disc"/100) as [Invoice Item Discount],
            [fs_sro_inv_item cost] * [fs_sro_inv_item qty] as [Invoice Item Extended Cost(LOCAL)],
           [fs_sro_inv_item description] AS [Invoice Description],
            //(rangesum([fs_sro_inv_item price],[fs_sro_inv_item proj_price]) + (rangesum([fs_sro_inv_item price],[fs_sro_inv_item proj_price]) * -("fs_sro_inv_item disc"/100))) * [fs_sro_inv_item qty_to_bill] as [Invoice Item Extended Price(CUST)],
            rangesum([fs_sro_inv_item price],[fs_sro_inv_item proj_price]) * [fs_sro_inv_item qty_to_bill] as [Invoice Item Extended Price(CUST)],
            //(((line.price + line.proj_price) * -(line.disc/100)) + (line.price + line.proj_price)) * line.qty_to_bill as DISC_APPLIED_EXT
            If([fs_sro_inv_item price] = 0,If([fs_sro_inv_item proj_price] = 0,0,[fs_sro_inv_item proj_price]),[fs_sro_inv_item price]) as [Invoice Item Price(CUST)],
            [fs_sro_inv_item qty] as [Invoice Item Qty Sold],
            [fs_sro_inv_item qty_to_bill] as [Invoice Item Qty Billed]
        FROM [$(ENV_QV_RAW_STAGE)fs_sro_inv_item.qvd]
        (qvd);

         LEFT JOIN (InvoiceDetail)
         LOAD 
              due_date AS LineDueDate,
              [%OrderItem], 
              due_date-CreateDate AS TargetLeadTime,
//               UfSroLinesSentToBilling - CreateDate AS ActualLeadTime,
              UfSroLinesSentToBilling,
              -(due_date >= UfSroLinesSentToBilling) AS SROOnTimeCompletion,
              LFW_FLAG
              ;
         LOAD
            'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" AS %OrderItem,
            DATE(FLOOR(NUM(meter_amt + due_date))) AS due_date,
            meter_amt,
            DATE(FLOOR(NUM(CreateDate))) AS CreateDate,
            IF(NUM(DATE(FLOOR(NUM(CreateDate)))) >= NUM(WeekStart(TODAY())) - 7 AND NUM(DATE(FLOOR(NUM(CreateDate)))) <= NUM(WEEKSTART(TODAY())) - 1, 'YES for LFW', 'NO for LFW') AS LFW_FLAG,
            DATE(FLOOR(NUM(UfSroLinesSentToBilling))) AS UfSroLinesSentToBilling
          FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_line.qvd]
          (qvd);


        Inner Join(InvoiceDetail)
        Load
           1 AS InvoiceRowCount,
           [%FSSROInvoiceItemID],
           [Invoice Item Extended Price(CUST)]/[Exchange Rate] as [Invoice Item Extended Price(LOCAL)],
           ([Invoice Item Extended Price(CUST)]/[Exchange Rate]) * Conv_GBP as [Invoice Item Extended Price(GBP)],
           ([Invoice Item Extended Price(CUST)]/[Exchange Rate]) * Conv_USD as [Invoice Item Extended Price(USD)],
           
           [Invoice Item Extended Cost(CUST)],
           [Invoice Item Extended Cost(USD)],
           [Invoice Item Extended Cost(GBP)],
           ActualLeadTime
           ;
        Load
           [%FSSROInvoiceItemID],
           [Invoice Item Extended Cost(LOCAL)] * [Exchange Rate] as [Invoice Item Extended Cost(CUST)],
           [Invoice Item Extended Cost(LOCAL)] * Conv_USD as [Invoice Item Extended Cost(USD)],
           [Invoice Item Extended Cost(LOCAL)] * Conv_GBP as [Invoice Item Extended Cost(GBP)],
           
           [Invoice Item Extended Price(CUST)],
           //([Invoice Item Price(CUST)] * [Invoice Item Qty Billed]) * (1 - [Invoice Item Discount]) * (1 - [Invoice Discount]) as [Invoice Item Extended Price(CUST)],
           Conv_GBP,
           Conv_USD,
           [Exchange Rate],
           IF(MasterDate - UfSroLinesSentToBilling < 0, 0, MasterDate - UfSroLinesSentToBilling) AS ActualLeadTime
        Resident InvoiceDetail;
        
        
        Store InvoiceDetail into  [$(ENV_QV_FINAL_STAGE)SRO InvoiceDetailFact.qvd](qvd);
        Drop Table InvoiceDetail;
   
End Sub;



Sub ItemProcess
    Call BuildMappingTable( 'PRODUCT_CODE_MAP')
    CALL BuildMappingTable('FAMILY_CODE_MAP')


    ItemDim:
    LOAD
        'SRO-' & SiteCd & '-' & "fs_sro_oper sro_num"  & '-' & "fs_sro_oper sro_line" & '-' & "fs_sro_oper sro_oper" as %Item,
        'Project Fixed or Misc' as [Item Number],
        "fs_sro_oper description" as [Item Description],
        "fs_sro_oper product_code" as [Item Product Code],
        //ApplyMap('PRODUCT_CODE_MAP',SiteCd & '-' & "fs_sro_oper product_code",'Unknown') as [Item Product Code Desc],
        If(Len(Trim("fs_sro_oper product_code"))=0,'Undefined',SiteCd & '-' & Upper("fs_sro_oper product_code")) as %ProdCode,
        //If(Len(Trim("fs_sro_oper product_code"))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & "fs_sro_oper product_code",'Unknown|Unknown|Unknown'),'|',1)) as [Item Product Code Desc],
        //If(Len(Trim("fs_sro_oper product_code"))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & "fs_sro_oper product_code",'Unknown|Unknown|Unknown'),'|',2)) as [Item Product Code Category],
        //If(Len(Trim("fs_sro_oper product_code"))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & "fs_sro_oper product_code",'Unknown|Unknown|Unknown'),'|',3)) as [Item Product Code Sub Category],
        'SRO Item' as "Item Family Code",
        'SRO Item' as [Item Family]
    FROM [$(ENV_QV_RAW_STAGE)fs_sro_oper.qvd]
    (qvd);
    

    Join(ItemDim)
    LOAD
        'Item' & '-' & [%Item Id] as %Item,
        "Item Number",
        "Item description" as [Item Description],
        "Item product_code" as [Item Product Code],
        //ApplyMap('PRODUCT_CODE_MAP',SiteCd & '-' & "Item product_code",'Unknown') as [Item Product Code Desc],
        If(Len(Trim("Item product_code"))=0,'Undefined',SiteCd & '-' & Upper("Item product_code")) as %ProdCode,
        //If(Len(Trim("Item product_code"))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & "Item product_code",'Unknown|Unknown|Unknown'),'|',1)) as [Item Product Code Desc],
        //If(Len(Trim("Item product_code"))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & "Item product_code",'Unknown|Unknown|Unknown'),'|',2)) as [Item Product Code Category],
        //If(Len(Trim("Item product_code"))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & "Item product_code",'Unknown|Unknown|Unknown'),'|',3)) as [Item Product Code Sub Category],
        "Item Item Family Code" as [Item Family Code],
        //ApplyMap('FAMILY_CODE_MAP',"Item Item Family Id",'Unknown') as [Item Family],
        IF(LEN(TRIM("Item Item Family Code")) = 0, 'Undefined', ApplyMap('FAMILY_CODE_MAP',"Item Item Family Id",'Unknown')) as [Item Family],
        If(Match(SiteCd,'INPROUS','INPROUK')>0,Left([Item Number],4)) as [Item Design Code],
        "Item Create Date",
        /************ New items added by AED for Open Purchase Order App 03-11-2021 ******************/
        "Item abc_code"                 AS [Item ABC Code],
        "Item qty_allocjob"             AS [Item Quantity Allocated Job],
        "Item qty_used_ytd"             AS [Item Quantity User YTD],
        "Item stocked"                  AS [Item Stocked],
        "Item matl_type"                AS [Item Material Type],
        "Item days_supply"              AS [Item Days Supply],
        "Item order_min"                AS [Item Order Minimum],
        "Item order_mult"               AS [Item Order Multi],
        "Item order_max"                AS [Item Order Maximum],
    	"item Uf_NPD"	                AS [Item New Product],
    	"item Uf_NPD_Category"          AS [Item New Product Category],
    	"item Uf_NPD_Patented"          AS [Item Patented],
    	"item Uf_NPD_Patented_Product"  AS [Item Patent Product],
    	"item Uf_NPD_Trademark"         AS [Item Trademark],
    	"item Uf_NPD_Trademark_Product" AS [Item Trademark Product]


        /************ New items added by AED for Open Purchase Order App 03-11-2021 ******************/
    FROM [$(ENV_QV_RAW_STAGE)item.qvd]
    (qvd);
    

    //Prod code is a hierarchy resolving the naturally occurring nulls first
    //also adding in placeholders for undefined prodcodes
    ProdCodeTemp:
    LOAD
        SiteCd & '-' & Upper("prodcode product_code") as %ProductCode,
        SiteCd,
        "prodcode product_code" as [Product Code],
        "prodcode description" as [Product Code Desc],
        SiteCd & '-' & "prodcode Uf_Prod_Cat" as [%ProductCodeCategory],
        SiteCd & '-' & "prodcode Uf_Prod_SubCat" as [%ProductCodeSubCategory],
        "prodcode wip_acct_unit4" as [Product Code Division Code],
        SiteCd & '-' & "prodcode wip_acct_unit4" as %DivisionKey,
        "prodcode unit" as [Product Code Focus Factory Code],
        SiteCd & '-' & "prodcode unit" as %FocusFactoryKey
        //If(Len(Trim("prodcode Uf_Prod_Cat"))>0,SiteCd & '-' & "prodcode Uf_Prod_Cat", SiteCd & '-Undefined') as [%ProductCodeCategory],
        //If(Len(Trim("prodcode Uf_Prod_SubCat"))>0,SiteCd & '-' & "prodcode Uf_Prod_SubCat", SiteCd & '-Undefined') as [%ProductCodeSubCategory]
    FROM [lib://QV-ProductionData/Data\Raw Stage\prodcode.qvd]
    (qvd);
    

    Left Join (ProdCodeTemp)
    LOAD
        SiteCd & '-' & "unit_code2 unit2" as [%FocusFactoryKey],
        "unit_code2 description" as [Product Code Focus Factory]
    FROM [$(ENV_QV_RAW_STAGE)unitcd2.qvd]
    (qvd);

    Left Join (ProdCodeTemp)
    LOAD
        SiteCd & '-' & "unit_code4 unit4" as %DivisionKey,
        "unit_code4 description" as [Product Code Division]
    FROM [$(ENV_QV_RAW_STAGE)unitcd4.qvd]
    (qvd);

    Left Join(ProdCodeTemp)
    LOAD
        SiteCd & '-' & Value as [%ProductCodeSubCategory],
        Value as [Product Code Sub Category Code],
        Description  as [Product Code Sub Category Desc]
    FROM [lib://QV-ProductionData/Data\Raw Stage\UserDefinedTypeValues.qvd]
    (qvd) Where TypeName = 'ProductSubCategory';


    Left Join(ProdCodeTemp)
    LOAD
        SiteCd & '-' & Value as [%ProductCodeCategory],
        Value as [Product Code Category Code],
        Description  as [Product Code Category Desc]
    FROM [lib://QV-ProductionData/Data\Raw Stage\UserDefinedTypeValues.qvd]
    (qvd) Where TypeName = 'ProductCategory';


    ProdCode:
    Load
        %ProductCode as %ProdCode,
        [Product Code],
        [Product Code Desc],
        If(Len(Trim([Product Code Sub Category Code]))>0,[Product Code Sub Category Code],'Undefined') as [Product Code Sub Category Code],
        If(Len(Trim([Product Code Sub Category Desc]))>0, [Product Code Sub Category Desc],'Undefined') as [Product Code Sub Category Desc],
        If(Len(Trim([Product Code Category Code]))>0, [Product Code Category Code],'Undefined') as [Product Code Category Code],
        If(Len(Trim([Product Code Category Desc]))>0, [Product Code Category Desc],'Undefined') as [Product Code Category Desc],    
        [Product Code Division Code],
        [Product Code Division],
        [Product Code Focus Factory Code],
        [Product Code Focus Factory]
    Resident ProdCodeTemp;

    Drop table ProdCodeTemp;


    Concatenate(ProdCode)
    Load * inline [
        %ProdCode, Product Code, Product Code Desc, Product Code Sub Category Code,Product Code Sub Category Desc, Product Code Category Code, Product Code Category Desc
        Undefined,Undefined,Undefined,Undefined,Undefined,Undefined,Undefined
    ];

    //Store ProdCode into [$(ENV_QV_FINAL_STAGE)ProdCode.qvd](qvd);


    Left Join(ItemDim)
    Load
        %ProdCode,
        [Product Code Desc] as [Item Product Code Desc],
        [Product Code Sub Category Code] as [Item Product Code Sub Category],
        [Product Code Sub Category Desc] as [Item Product Code Sub Category Desc],
        [Product Code Category Code] as [Item Product Code Category],
        [Product Code Category Desc] as [Item Product Code Category Desc],
        [Product Code Division Code] as [Item Division Code],
        [Product Code Division] as [Item Division],
        [Product Code Focus Factory Code] as [Item Focus Factory Code],
        [Product Code Focus Factory] as [Item Focus Factory]
    Resident ProdCode;





    Store ItemDim into [$(ENV_QV_FINAL_STAGE)SRO_MFG_ItemDim.qvd](qvd);
    Drop Tables ItemDim, ProdCode;
End Sub;



Sub OTDProcess
call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteTimeZoneMap')

        OTDFact:
		LOAD 
        	'On-Time Delivery' 												                   as FactType,
        	 SiteCd 												                           as %Site,
             SiteCd & '-' & whse                                                               as %WarehouseKey,
        	 'Order-' & SiteCd & '-' & co_num 						                           as %Order,
             SiteCd & '-' & cust_num & '-' & cust_seq 			                  	           as [%ShipToCustomerId], 
             SiteCd & '-' & cust_num & '-0' 						                           as [%BillToCustomerId], 
             
             If(Len(Trim(slsman))>0,SiteCd & '-' & slsman,SiteCd & '-Undefined')	           as %Salesman,
             "slsman"                                                                          as %SalespersonKey,
             ApplyMap('CustomerRegionMap',SiteCd & '-' & [cust_num] & '-' & "cust_seq",Null()) as %RegionKey  
             //ConvertToLocalTime(UTC(), ApplyMap('SiteTimeZoneMap',SiteCd)) 				       as SiteDate
		FROM [$(ENV_QV_RAW_STAGE)co.qvd](qvd)
		Where type <> 'E';

// OrderLineKey and Item	
		inner Join(OTDFact)
		LOAD 
        	'Order-' & SiteCd & '-' & "co_num" 						                           as %Order, 
		    'Item-' & SiteCd & '-' & item 							                           as %Item,
            'Order-' & SiteCd & '-' & "co_num" & '-' & "co_line"  & '-' & co_release 	       as %OrderItem,           
            Date(Floor(Num(
            	If(len(trim(ship_date)) > 0,
                	If(ship_date > due_date, due_date, ship_date),
                    	due_date))))							   							   as MasterDate,
            Date(Floor(Num(ship_date)))                                                        as ship_date,
            -(Floor(Num(due_date)) < floor(num(today())))                                      as isOTDPastDue,
            If(len(Trim(ship_date)) > 0,
            	If(Floor(Num(ship_date)) > Floor(Num(due_date)),Dual('No',0), Dual('Yes',1)),
                  If(Floor(Num(due_date)) > Floor(Num(ConvertToLocalTime(UTC(), ApplyMap('SiteTimeZoneMap',SiteCd)))),
                  Dual('No',0)))				  											   as isOTDDeliveredOntime,
            //-(Floor(Num(due_date)) >= Alt(Floor(Num(ship_date)),floor(num(today()))))          as isOTDDeliveredOntime,
            -(qty_ordered > qty_shipped)                                                       as isOTDIsFilled,
            If(len(Trim(ship_date)) > 0, 1,
            	If(due_date <= ConvertToLocalTime(UTC(), ApplyMap('SiteTimeZoneMap',SiteCd)), 1, 0))    as OTDOrderLineCount
		From [$(ENV_QV_RAW_STAGE)coitem.qvd] (qvd)
        Where //Date(Floor(Num(due_date))) <= ConvertToLocalTime(UTC(), ApplyMap('SiteTimeZoneMap',SiteCd)) and 
        Date(Floor(Num(due_date))) >= YearStart(today(),-5)
        and WildMatch(SiteCd & '-' & Uf_HoldCode,'*E','*C','*E2','*G','*H','*H1','*K','*M','*N','*N1','*S','*S1','*S2','*T','*U1','*U2','*U3','*U4','*U5') = 0;

Store   
      FactType,
      %Site,
      %WarehouseKey,
      %Order,
      [%ShipToCustomerId], 
      [%BillToCustomerId], 
      %Salesman,
      %SalespersonKey,
      %RegionKey,             
      %Item,
      %OrderItem,           
      MasterDate,
      //SiteDate,
      isOTDPastDue,
      isOTDDeliveredOntime,
      isOTDIsFilled,
      OTDOrderLineCount
from OTDFact into [$(ENV_QV_FINAL_STAGE)ManufacturingOTDFact.qvd](qvd);
End Sub;



Sub SalespersonProcess
SlsmanEmpNameMap:
Mapping
Load
   SiteCd & '-' & emp_num as SlsmanEmpNameMap_ARG,
   name as SlsmanEmpNameMap_DESC
FROM [lib://QV-ProductionData/Data/Raw Stage/employee.qvd]
(qvd);




Slsman:
Load
   slsman as %SalespersonKey,
   SubField(Concat(Distinct If(isnull(CookName),If(isnull(EmployeeName),slsman,EmployeeName),CookName),'||',10000000 - RecordDate),'||',1) as SalesPersonName,
   Concat(Distinct If(isnull(CookName),If(isnull(EmployeeName),slsman,EmployeeName),CookName),'||',10000000 - RecordDate) as SalesPersonNames,
   Concat(Distinct EmployeeName,'||',10000000 - RecordDate) as EmployeeNames,
   Concat(Distinct CookName,'||',10000000 - RecordDate) as CookNames,
   Concat(Distinct SiteCd,'||',10000000 - RecordDate) as Sites
Group by slsman;
LOAD
//     PrimaryKey,
    SiteCd,
//     "slsman site_ref",
    slsman,
//     slsclass,
//     sales_ptd,
//     sales_ytd,
//     outside,
    ref_num as EmployeeNum,
    ApplyMap('SlsmanEmpNameMap',SiteCd & '-' & ref_num,Null()) as EmployeeName, 
    "slsman Uf_Cook_Slsman_Desc" as CookName,
//     code,
//     slsmangr,
//     logifld,
//     NoteExistsFlag,
     RecordDate
//     RowPointer,
//     charfld1,
//     charfld2,
//     charfld3,
//     decifld1,
//     decifld2,
//     decifld3,
//     datefld,
//     CreatedBy,
//     UpdatedBy,
//     CreateDate,
//     InWorkflow,
//     username,
//     "slsman Uf_SlsmanActiveCode",
//     "slsman uf_KAM_YN",
//     "slsman Uf_Cook_SalesRepemail",
//     "slsman Uf_Cook_Slsman_Desc",
//     "slsman Uf_LOU_Bogey_Annual",
//     "slsman Uf_LOU_Bogey_Monthly",
//     "slsman Uf_LOU_SlsmanCommBasis",
//     "slsman portal_reseller"
FROM [$(ENV_QV_RAW_STAGE)slsman.qvd]
(qvd);

Store Slsman into [$(ENV_QV_FINAL_STAGE)GSMSalesperson.qvd](qvd);

Drop Table Slsman;

End Sub;



Sub RegionProcess
RegionDim:
Load
   Value as %RegionKey,
   Value as RegionName;
LOAD
    Upper(Value) as Value,
    Count(Value) as ValCount
FROM [$(ENV_QV_RAW_STAGE)UserDefinedTypeValues.qvd]
(qvd)
Where TypeName = 'DPC_Region'
Group by Value;
            
            
Store RegionDim into [$(ENV_QV_FINAL_STAGE)RegionDim.qvd](qvd);

Drop Table RegionDim;

End Sub;



Sub WarehouseProcess
WarehouseDim:
LOAD
    SiteCd & '-' & "whse whse"		 as %WarehouseKey,
    "whse whse"						 as [Warehouse Code],
    "whse name" 					 as [Warehouse Name],
    "whse city"						 as [Warehouse City],
    IF("whse whse" = 'BTR', 'BATON ROUGE',
        IF("whse whse" = 'SFS', 'CYPRESS',
            IF("whse whse" = 'DEN', 'DENVER',
                IF("whse whse" = 'GJN', 'GRAND JUNCTION',
                    IF("whse whse" = 'LAP', 'LAPORTE',
                        IF("whse whse" = 'ODE', 'ODESSA',
                            IF("whse whse" = 'OKC', 'OKLAHOMA CITY',
                                IF("whse whse" = 'PRL', 'PEARLAND',
                                    IF("whse whse" = 'TYL', 'TYLER', 'UNDEFINED')
                                  )
                               )
                           )
                       )
                   )
               )
           )
       ) AS [Service Center]
//     "whse state",
//     "whse zip",
//     "whse country",
//     "whse contact",
//     "whse phone",
//     "whse fax_num",
//     "whse phy_inv_flg",
//     "whse cycle_type",
//     "whse cycle_freq",
//     "whse logifld",
//     "whse datefld",
//     "whse addr##1",
//     "whse addr##2",
//     "whse addr##3",
//     "whse addr##4",
//     "whse NoteExistsFlag",
//     "whse RecordDate",
//     "whse RowPointer",
//     "whse charfld1",
//     "whse charfld2",
//     "whse charfld3",
//     "whse decifld1",
//     "whse decifld2",
//     "whse decifld3",
//     "whse CreatedBy",
//     "whse UpdatedBy",
//     "whse CreateDate",
//     "whse InWorkflow",
//     "whse process_ind",
//     "whse trans_nat",
//     "whse trans_nat_2",
//     "whse delterm",
//     "whse transport",
//     "whse tax_reg_num1",
//     "whse dedicated_inventory",
//     "whse fs_srv_whse",
//     "whse consignment_type",
//     "whse cust_num",
//     "whse cust_seq",
//     "whse vend_num",
//     "whse vendor_consignment_loc",
//     "whse plan_intra_site_transfer",
//     "whse trn_time",
//     "whse Uf_Cook_WHCUST",
//     "whse vrtx_county",
//     "whse controlled_by_external_wms",
//     "whse Uf_Cook_WHCust"
FROM [$(ENV_QV_RAW_STAGE)whse.qvd]
(qvd);

Store WarehouseDim into [$(ENV_QV_FINAL_STAGE)WarehouseDim.qvd](qvd);

Drop Table WarehouseDim;

End Sub;



Sub AOPProcess
call BuildMappingTable('AOPKeyMap')

AOPData:
Crosstable(Month,AOPPlan,4)
Load
    Year,
    [Refined Region Name],
    Salesperson,
    ApplyMap('AOPKeyMap',Salesperson & '||' & [Refined Region Name]) as AOPPlanKey,
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12";
LOAD
    2020 as Year,
    Upper(If(
       SubStringCount("Refined Region",' - ') = 0,
       "Refined Region",
       If(
          SubStringCount("Refined Region",' - ') = 1,
          SubField("Refined Region",' - ',2),
          If(
             SubStringCount("Refined Region",' - ') = 2,
             SubField("Refined Region",' - ',2) & ' - ' & SubField("Refined Region",' - ',3)
          )
       )
    ) ) as [Refined Region Name],
    "Refined Region",         
    "Refined Salesperson",
    SubField(Salesperson,' - ',1) as Salesperson,
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12"
FROM [lib://QlikDataFiles Corporate Share/Finance/Aftermarket Sales Dashboard/2020 AOP by Salesperson.xlsx]
(ooxml, embedded labels, table is [2020 Sales AOP by Salesperson]);

Left Join(AOPData)
Load
   FieldValue('Month',Recno() - 1) as [Month],
   Num#(FieldValue('Month',Recno() - 1)) as MonthNum
AutoGenerate FieldValueCount('Month');



DateRange:
Load
   Floor(MonthStart(Min(MakeDate([Year],Num#([Month]))))) as StartDate,
   Floor(MonthEnd(Max(MakeDate([Year],Num#([Month]))))) as EndDate
Resident AOPData;


Let vMinDate = FieldValue('StartDate',1);
Let vMaxDate = FieldValue('EndDate',1);

Drop Table DateRange;

Left Join(AOPData)
Load
   Num(Month(Date($(vMinDate) + Recno() - 1))) as [MonthNum],
   Year(Date($(vMinDate) + Recno() - 1)) as [Year],
   Date($(vMinDate) + Recno() - 1) as MasterDate,
   NetWorkDays(Date($(vMinDate) + Recno() - 1),Date($(vMinDate) + Recno() - 1)) as IsWorkingDay,
   NetWorkDays(MonthStart($(vMinDate) + Recno() - 1),MonthEnd($(vMinDate) + Recno() - 1)) as WorkingDaysInMonth
AutoGenerate $(vMaxDate) - $(vMinDate) + 1;

Inner Join(AOPData)
Load
   [Refined Region Name] as %RegionKey,
    Salesperson as %SalespersonKey,
   AOPPlanKey,
   MasterDate,
   AOPPlan/WorkingDaysInMonth as [Daily AOP_Plan]
Resident AOPData
Where IsWorkingDay = 1;
   
Store AOPData into [$(ENV_QV_FINAL_STAGE)AOPData.qvd](qvd);

Drop Table AOPData;

End Sub;



Sub InvoiceHeaderProcess
		  call BuildMappingTable('CustomerCurrencyMap')
          call BuildMappingTable('INV_SRO_MAP')
          call BuildMappingTable('CustomerRegionMap')
          call BuildMappingTable('SiteKahlixMap')
          call BuildMappingTable('CustomerScrapMap')
          
          InvoiceHeaderFact:
          LOAD
              'Invoice Header' as FactType,
              SiteCd as %Site,
              ApplyMap('SiteKahlixMap',SiteCd,Null()) as %KahlixCode,
              "Invoice Customer ID" as %ShipToCustomerId,
              SiteCd & '-' & [Invoice Customer Number] & '-0' as %BillToCustomerId,
              SiteCd & '-' & "Invoice Header slsman" as %Salesman,
    		  "Invoice Header slsman" as %SalespersonKey,
    		  ApplyMap('CustomerRegionMap',SiteCd & '-' & "Invoice Customer Number" & '-' & "Invoice Header cust_seq",Null()) as %RegionKey,              
              //some detail records for the invoice do not qualify with the inv_seq number 
              //Tthe %TempInvoiceID provides a field for making that join
              SiteCd & '-' & "Invoice Header Number" as %TempInvoiceID,
              PrimaryKey as %Invoice,
              SiteCd & '-' & [Invoice Header co_num] as OrderIDTemp,
              //If(not isnull("Invoice Header co_num"), 'Order-' & SiteCd & '-' & "Invoice Header co_num",'SRO-' & ApplyMap('INV_SRO_MAP',SiteCd & '-' & "Invoice Header Number",'Unknown')) as %Order,
              "Invoice Header Invoice Date" as MasterDate,
              [Invoice Header exch_rate] as [Exchange Rate],
              
              ApplyMap('CustomerCurrencyMap',[Invoice Customer ID],Null()) as [Currency Code],

              [Invoice Header misc_charges] as [Total Misc Charges(CUST)], 
              [Invoice Header prepaid_amt] as [Total Prepaid Amount(CUST)], 
              [Invoice Header freight] as [Total Freight Amount(CUST)], 
              [Invoice Header cost] * [Invoice Header exch_rate] as [Total Cost Amount(CUST)], 
              [Invoice Header price] as [Total Price(CUST)],

              [Invoice Header misc_charges]/[Invoice Header exch_rate] as [Total Misc Charges(LOCAL)], 
              [Invoice Header prepaid_amt]/[Invoice Header exch_rate] as [Total Prepaid Amount(LOCAL)], 
              [Invoice Header freight]/[Invoice Header exch_rate] as [Total Freight Amount(LOCAL)], 
              [Invoice Header cost] as [Total Cost Amount(LOCAL)], 
              [Invoice Header price]/[Invoice Header exch_rate] as [Total Price(LOCAL)]
          //     PrimaryKey,
          //     SiteCd,
          //     "Invoice ID",
          //     "Invoice Header Site-Invoice Number",
          //     "Invoice Header Number",
          //     "Invoice Header inv_seq",
          //     "Invoice Customer ID",
          //     "Invoice Customer Number",
          //     "Invoice Header cust_seq",
          //     "Invoice Header co_num",
          //     "Invoice Header Invoice Date",
          //     "Invoice Header Terms ID",
          //     "Invoice Header Terms Code",
          //     "Invoice Header ship_code",
          //     "Invoice Header cust_po",
          //     "Invoice Header weight",
          //     "Invoice Header qty_packages",
          //     "Invoice Header Ship Date",
          //     "Invoice Header misc_charges",
          //     "Invoice Header prepaid_amt",
          //     "Invoice Header freight",
          //     "Invoice Header cost",
          //     "Invoice Header price",
          //     "Invoice Header slsman",
          //     "Invoice Header comm_calc",
          //     "Invoice Header comm_due",
          //     "Invoice Header comm_paid",
          //     "Invoice Header comm_base",
          //     "Invoice Header state",
          //     "Invoice Header misc_acct",
          //     "Invoice Header freight_acct",
          //     "Invoice Header tot_comm_due",
          //     "Invoice Header tot_comm_pd",
          //     "Invoice Header mgr_comm_cal",
          //     "Invoice Header mgr_comm_bse",
          //     "Invoice Header bill_type",
          //     "Invoice Header exch_rate",
          //     "Invoice Header use_exch_rate",
          //     "Invoice Header tax_code1",
          //     "Invoice Header tax_code2",
          //     "Invoice Header Tax Date",
          //     "Invoice Header ec_code",
          //     "Invoice Header frt_tax_code1",
          //     "Invoice Header frt_tax_code2",
          //     "Invoice Header msc_tax_code1",
          //     "Invoice Header msc_tax_code2",
          //     "Invoice Header disc",
          //     "Invoice Header misc_acct_unit1",
          //     "Invoice Header misc_acct_unit2",
          //     "Invoice Header misc_acct_unit3",
          //     "Invoice Header misc_acct_unit4",
          //     "Invoice Header freight_acct_unit1",
          //     "Invoice Header freight_acct_unit2",
          //     "Invoice Header freight_acct_unit3",
          //     "Invoice Header freight_acct_unit4",
          //     "Invoice Header do_num",
          //     "Invoice Header NoteExistsFlag",
          //     "Invoice Header RecordDate",
          //     "Invoice Header RowPointer",
          //     "Invoice Header CreatedBy",
          //     "Invoice Header UpdatedBy",
          //     "Invoice Header CreateDate",
          //     "Invoice Header InWorkflow",
          //     "Invoice Header disc_amount",
          //     "Invoice Header shipment_id"
          FROM [$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
          (qvd);
          //Where ApplyMap('CustomerScrapMap',SiteCd & '-' & [Invoice Customer Number],0) = 0;


//***************************************  Adding Credit Hold Data
TempCreditHold:
LOAD
    SiteCd & '-' & co_num as OrderIDTemp,
    SiteCd & '-' & whse as %coWarehouseKey,
    credit_hold,
    1 as OrderIDIsCONum 
FROM [lib://QV-ProductionData/Data/Raw Stage/co.qvd]
(qvd);
          
CONCATENATE(TempCreditHold)          
LOAD
    SiteCd & '-' & "fs_sro sro_num" as OrderIDTemp,
    SiteCd & '-' & "fs_sro whse" as %sroWarehouseKey,
    "fs_sro credit_hold" as credit_hold,
    1 as OrderIDIsSRONum
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro.qvd]
(qvd);


LEFT JOIN(InvoiceHeaderFact)
LOAD
    OrderIDTemp,
    %coWarehouseKey,
    %sroWarehouseKey,
    credit_hold,
    OrderIDIsCONum,
    OrderIDIsSRONum
RESIDENT TempCreditHold
;

DROP TABLE TempCreditHold;
// **************************************  Adding Credit Hold Data


//        Left Join(InvoiceHeaderFact)
//        LOAD
//            SiteCd & '-' & co_num as OrderIDTemp,
//           SiteCd & '-' & whse as %coWarehouseKey,
//            1 as OrderIDIsCONum 
//        FROM [lib://QV-ProductionData/Data/Raw Stage/co.qvd]
//        (qvd);
//
//        Left join(InvoiceHeaderFact)
//        LOAD
//            SiteCd & '-' & "fs_sro sro_num" as OrderIDTemp,
//            SiteCd & '-' & "fs_sro whse" as %sroWarehouseKey, 
//            1 as OrderIDIsSRONum
//        FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro.qvd]
//        (qvd);
        
        Inner Join(InvoiceHeaderFact)
        Load 
           [%Invoice],
           If(Len(Trim(OrderIDIsCONum))>0, 'Order-',If(Len(Trim(OrderIDIsSRONum))>0,'SRO-')) & OrderIDTemp as %Order,
           If(Len(Trim(OrderIDIsCONum))>0, [%coWarehouseKey],If(Len(Trim(OrderIDIsSRONum))>0,[%sroWarehouseKey])) as %WarehouseKey
           
        Resident InvoiceHeaderFact
        Where (Len(Trim(OrderIDIsSRONum))>0 And WildMatch(OrderIDTemp,'NCR*') = 0) OR Len(Trim(OrderIDIsCONum))>0;
      
          
        drop fields OrderIDTemp, OrderIDIsCONum, OrderIDIsSRONum;
        
        

		Left Join(InvoiceHeaderFact)
		LOAD 
		      [inv_stax InvoiceId] as [%Invoice], 
		     Sum([inv_stax sales_tax]) as [Total Sales Tax Amount(CUST)]
		FROM
		[$(ENV_QV_RAW_STAGE)inv_stax.qvd]
		(qvd)
		Group by [inv_stax InvoiceId];
        
        
        Left Join(InvoiceHeaderFact)
        LOAD
            Site as %Site,
            CurrencyDate AS MasterDate,
            Conv_USD,
            Conv_GBP
        FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
        (qvd);
        
        
        
        
        
        
        Left Join(InvoiceHeaderFact)
        Load
        	%Invoice,
            [Total Sales Tax Amount(CUST)] * [Exchange Rate] as [Total Sales Tax Amount(LOCAL)],
            [Total Sales Tax Amount(CUST)] * [Conv_USD] as [Total Sales Tax Amount(USD)],
            [Total Sales Tax Amount(CUST)] * [Conv_GBP] as [Total Sales Tax Amount(GBP)],
  
            [Total Misc Charges(LOCAL)] * Conv_USD as [Total Misc Charges(USD)], 
		    [Total Prepaid Amount(LOCAL)] * Conv_USD as [Total Prepaid Amount(USD)],  
		    [Total Freight Amount(LOCAL)] * Conv_USD as [Total Freight Amount(USD)],  
		    [Total Cost Amount(LOCAL)] * Conv_USD as [Total Cost Amount(USD)],  
		    [Total Price(LOCAL)] * Conv_USD as [Total Price(USD)],
            
            [Total Misc Charges(LOCAL)] * Conv_GBP as [Total Misc Charges(GBP)], 
		    [Total Prepaid Amount(LOCAL)] * Conv_GBP as [Total Prepaid Amount(GBP)],  
		    [Total Freight Amount(LOCAL)] * Conv_GBP as [Total Freight Amount(GBP)],  
		    [Total Cost Amount(LOCAL)] * Conv_GBP as [Total Cost Amount(GBP)],  
		    [Total Price(LOCAL)] * Conv_GBP as [Total Price(GBP)]
        Resident InvoiceHeaderFact;
        
 
 
        Store InvoiceHeaderFact into [$(ENV_QV_FINAL_STAGE)InvoiceHeaderFact.qvd](qvd);
        Drop Table InvoiceHeaderFact;
End Sub;



sub SROBacklogProcess

call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteKahlixMap')

ExcludedCustomers:
Load * Inline [
ExcludeCustomers
DP01781,
DP01988,
DP02015,
DP02095,
DP02096,
DP02097,
DP02098,
DP02099,
DP04608,
DP05361,
DP06480,
DP07391
];


DetailTemp:
LOAD
    SiteCd & '-LABOR-' & RowPointer as [DetailKey],
    'SRO-' & SiteCd & '-' & sro_num as %Order,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" & '-' & "sro_oper" as %Item,
    'Labor' as [Detail Type],
    bill_stat,
    "type",
    posted,
    extcost as [Total Cost],
    extprice as [Total Price],
    vovhd_cost * hrs_worked as [Total Variable Overhead Cost],
    fovhd_cost * hrs_worked as [Total Fixed Overhead Cost],
    lbr_cost * hrs_worked as [Total Labor Cost],
    matl_cost * hrs_worked as [Total Material Cost],
    out_cost * hrs_worked as [Total Outside Cost],
    hrs_to_bill as [Quantity to Bill],
    hrs_worked as [Quantity Sold]
FROM [$(ENV_QV_RAW_STAGE)fs_sro_labor.qvd]
(qvd)
Where
(type = 'A' and posted = 1)
or (type = 'A' and posted = 0)
or (type = 'P' and posted  = 0);
//bill_stat = 'N' and ((type = 'A' and posted = 1) or (type = 'P' and posted = 0));


Concatenate(DetailTemp)
LOAD
    SiteCd & '-LABOR-' & RowPointer as [DetailKey],
    'SRO-' & SiteCd & '-' & sro_num as %Order,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" & '-' & "sro_oper" as %Item,
    'Material' as [Detail Type],
    bill_stat,
    "type",
    posted,
    extcost as [Total Cost],
    extprice as [Total Price],
    vovhd_cost * matl_qty as [Total Variable Overhead Cost],
    fovhd_cost * matl_qty as [Total Fixed Overhead Cost],
    lbr_cost * matl_qty as [Total Labor Cost],
    matl_cost * matl_qty as [Total Material Cost],
    out_cost * matl_qty as [Total Outside Cost],
    matl_qty as [Quantity to Bill],
    matl_qty as [Quantity Sold]
FROM [$(ENV_QV_RAW_STAGE)fs_sro_matl.qvd]
(qvd)
Where
(type = 'A' and posted = 1)
or (type = 'A' and posted = 0)
or (type = 'P' and posted  = 0);
//bill_stat = 'N' and ((type = 'A' and posted = 1) or (type = 'P' and posted = 0));

Concatenate(DetailTemp)
LOAD
    SiteCd & '-MATL-' & RowPointer as [DetailKey],
    'SRO-' & SiteCd & '-' & sro_num as %Order,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" & '-' & "sro_oper" as %Item,
    'Miscellaneous' as [Detail Type],
    bill_stat,
    "type",
    posted,
    extcost as [Total Cost],
    extprice as [Total Price],
    vovhd_cost * qty as [Total Variable Overhead Cost],
    fovhd_cost * qty as [Total Fixed Overhead Cost],
    lbr_cost * qty as [Total Labor Cost],
    matl_cost * qty as [Total Material Cost],
    out_cost * qty as [Total Outside Cost],
    qty as [Quantity to Bill],
    qty as [Quantity Sold]
FROM [$(ENV_QV_RAW_STAGE)fs_sro_misc.qvd]
(qvd)
Where 
(type = 'A' and posted = 1)
or (type = 'A' and posted = 0)
or (type = 'P' and posted  = 0);
//bill_stat = 'N' and ((type = 'A' and posted = 1) or (type = 'P' and posted = 0));

DetailAmounts:
Load
    //SiteCd & '-MATL-' & RowPointer as [DetailKey],
    %Order,
    %OrderLine,
    %Item,
    Sum([Total Cost]) as DtlCost,
    Sum([Total Price]) as DtlPrice,
    Sum([Total Variable Overhead Cost]) as Dtlvohd,
    Sum([Total Fixed Overhead Cost]) as Dtlfxohd,
    Sum([Total Labor Cost]) as Dtllabor,
    Sum([Total Material Cost]) as Dtlmatl,
    Sum([Total Outside Cost]) as Dtlout,
    Sum([Quantity to Bill]) as DtlQtytoBill,
    Sum([Quantity Sold]) as DtlQtySold
Resident DetailTemp
Group by
    %Order,
    %OrderLine,
    %Item;

Drop Table DetailTemp;


//Inner Join (DetailTemp)
DetailTemp:
// Load *,
//     Today() - [SRO Line Due Date]  as [Backlog Days Past Due],
//     -(Today() > [SRO Line Due Date]) as [Backlog is Past Due];
LOAD
    'SRO Backlog' as FactType,
    SiteCd as %Site,
    ApplyMap('SiteKahlixMap',SiteCd,Null()) as %KahlixCode,
    SiteCd & '-' & "fs_sro_oper whse" as %WarehouseKey,
    'SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" as %Order,
    'SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" & '-' & "fs_sro_oper sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" & '-' & "fs_sro_oper sro_line" & '-' & "fs_sro_oper sro_oper" as %Item,
    'SRO' as OrderType,
    1 as [Backlog Order Line Counter],
    If("fs_sro_oper bill_type"='C','T&M','Project Fixed') as OperBillType,
    "fs_sro_oper total_billed" as OperTotalBilled,
    RangeSum("fs_sro_oper total_cost_lbr", "fs_sro_oper total_cost_matl", "fs_sro_oper total_cost_misc") as OperTotalCost,
    "fs_sro_oper total_price" as OperTotalPrice,
//    "fs_sro_oper total_price" as [SRO Backlog Amount],
    "fs_sro_oper end_date" as [Forecast Date],
    "fs_sro_oper RecordDate" as [Record Date]
//    Applymap('LineDueDateMap','SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" & '-' & "fs_sro_oper sro_line",Null()) as [SRO Line Due Date]

FROM [$(ENV_QV_RAW_STAGE)fs_sro_oper.qvd]
(qvd)
Where 
Match([fs_sro_oper bill_stat],'N','P') > 0;
//"fs_sro_oper stat" = 'O' and Not("fs_sro_oper stat" = 'O' and "fs_sro_oper bill_type" = 'P' and "fs_sro_oper whse" = 'PRL');





Inner Join(DetailTemp)
LOAD
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    //SiteCd,
    bill_stat as LineBillStat,
    bill_type as LineBillType,
    //sro_line,
    //sro_num
    Date(Floor(Num(due_date))) as DueDate
FROM [$(ENV_QV_RAW_STAGE)fs_sro_line.qvd]
(qvd)
where stat <> 'C';
;
//Where bill_stat = 'N';





Inner Join(DetailTemp)
LOAD
    'SRO-' & SiteCd & '-' & "fs_sro sro_num" as %Order,
    SiteCd & '-' & "fs_sro cust_num" & '-' & [fs_sro cust_seq] as %ShipToCustomerId,
    SiteCd & '-' & "fs_sro cust_num" & '-0' & [fs_sro cust_seq] as %BillToCustomerId,
    SiteCd & '-' & "fs_sro slsman" as %Salesman,
    "fs_sro slsman" as %SalespersonKey,
    ApplyMap('CustomerRegionMap',SiteCd & '-' & [fs_sro cust_num] & '-' & "fs_sro cust_seq",Null()) as %RegionKey,
    "fs_sro description" AS [SRO DESCRIPTION],
    "fs_sro sro_stat",
    "fs_sro UfSroIntenalStatus" AS [SRO Internal Status],
    "fs_sro end_date",
    "fs_sro cust_num",
    If(WildMatch("fs_sro sro_num",'*5s*', '*ehs*', '*ind*', '*mm*', '*VL*', 'ncr*', 'NCR*', 'SCVL*', 'slpmm*', 'sm*', 'war*', 'WAR*')>0,
       1,
       If(Match("fs_sro UfSroIntenalStatus",'Archived','Warranty')>0,
          1,
          If(exists(ExcludeCustomers,"fs_sro cust_num"),
             1,
             0
          )
       )
    )as IsSROWarrantee,
    [fs_sro exch_rate] as Conv_CUST,
    DATE(FLOOR(NUM([fs_sro open_date]))) AS OpenDate,
    TODAY() - DATE(FLOOR(NUM([fs_sro open_date]))) AS [Backlog Aging Days]
FROM [$(ENV_QV_RAW_STAGE)fs_sro.qvd]
(qvd) 
where 
    "fs_sro sro_stat" = 'O';
    
Left Join(DetailTemp)    
Load
    //SiteCd & '-MATL-' & RowPointer as [DetailKey],
    %Item,
    'T&M' as OperBillType,
    DtlCost,
    DtlPrice,
    DtlQtytoBill,
    DtlQtySold
Resident DetailAmounts;

drop table DetailAmounts;

Left Join(DetailTemp)
Load
   %Item,
   [SRO Order],
   [SRO Line],
   MasterDate,
   CompDate,
   isSRODateMissing,
   IsCompDateMissing,
   IsDueDateMissing,
   If(MasterDate<Today(),1,0) as [Backlog IsLate],
   [Cost Amount(CUST)],
   [Backlog Amount(CUST)],
   [Cost Amount(CUST)]/Conv_CUST as [Cost Amount(LOCAL)],
   [Backlog Amount(CUST)]/Conv_CUST as [Backlog Amount(LOCAL)];
Load
   %Item,
   Conv_CUST,
   SubField(%OrderLine, '-',-2) as [SRO Order],
   SubField(%OrderLine, '-',-1) as [SRO Line],
   If(OperBillType = 'T&M',DtlCost,OperTotalCost) as [Cost Amount(CUST)],
   If(OperBillType = 'T&M',DtlPrice,OperTotalPrice) as [Backlog Amount(CUST)],
   If(len(Trim("fs_sro end_date"))=0,If(Len(Trim(DueDate))=0,Date(Floor([Record Date])),DueDate),"fs_sro end_date") as MasterDate,
   "fs_sro end_date" AS CompDate,
   DueDate,
   If(len(Trim("fs_sro end_date"))=0, 1, 0) AS IsCompDateMissing,
   If(Len(Trim(DueDate))=0, 1, 0) AS IsDueDateMissing,
   If(len(Trim("fs_sro end_date"))=0,If(Len(Trim(DueDate))=0,1,0),0) as isSRODateMissing
Resident DetailTemp;

Left Join(DetailTemp)
LOAD
    Site as %Site,
    CurrencyDate as MasterDate,
    Conv_USD,
    Conv_GBP
FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
(qvd);

Left Join(DetailTemp)
Load
   %Item,
   [Cost Amount(LOCAL)] * Conv_USD as [Cost Amount(USD)],
   [Backlog Amount(LOCAL)] * Conv_USD as [Backlog Amount(USD)],
   [Cost Amount(LOCAL)] * Conv_GBP as [Cost Amount(GBP)],
   [Backlog Amount(LOCAL)] * Conv_GBP as [Backlog Amount(GBP)]
Resident DetailTemp;

Store
FactType,
%Site,
%KahlixCode,
%Order,
%OrderLine,
[SRO Order],
[SRO Line],
%Item,
%ShipToCustomerId,
%BillToCustomerId,
%RegionKey,
[%Salesman],
[%SalespersonKey],
[%WarehouseKey],
[MasterDate],
CompDate,
DueDate,
[Backlog IsLate],
[Backlog Order Line Counter],
[IsSROWarrantee],
IsCompDateMissing,
IsDueDateMissing,
[isSRODateMissing],
[Backlog Aging Days],
[SRO Internal Status],
[SRO DESCRIPTION],
[Backlog Amount(CUST)] as [Backlog Remaining Value(CUST)],
[Backlog Amount(GBP)] as [Backlog Remaining Value(GBP)],
[Backlog Amount(LOCAL)] as [Backlog Remaining Value(LOCAL)],
[Backlog Amount(USD)] as [Backlog Remaining Value(USD)],
[Cost Amount(CUST)] as [Backlog Extended Total Cost(CUST)],
[Cost Amount(GBP)] as [Backlog Extended Total Cost(GBP)],
[Cost Amount(LOCAL)] as [Backlog Extended Total Cost(LOCAL)],
[Cost Amount(USD)] as [Backlog Extended Total Cost(USD)]
From 
DetailTemp into [$(ENV_QV_FINAL_STAGE)Global_SROBacklogFact.qvd](qvd);

Drop Tables DetailTemp,ExcludedCustomers;

End Sub;



Sub SROGrossMarginsProcess
call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteKahlixMap')

// ExcludedCustomers:
// Load * Inline [
// ExcludeCustomers
// DP01781,
// DP01988,
// DP02015,
// DP02095,
// DP02096,
// DP02097,
// DP02098,
// DP02099,
// DP04608,
// DP05361,
// DP06480,
// DP07391
// ];


DetailTemp:
Load
    [DetailKey],
    %Order,
    %OrderLine,
    %Item,
    [Detail Type],
    bill_stat,
    "type",
    posted,
    If(type = 'A',[LABOR Cost]) as [Actual Labor Cost],
    If(type = 'A',[LABOR Price]) as [Actual Labor Price],
    If(type = 'A',[Variable Overhead Cost]) as [Actual vohd_cost],
    If(type = 'A',[Fixed Overhead Cost]) as [Actual fohd_cost],
    If(type = 'A',[Labor Cost]) as [Actual lbr_cost],
    If(type = 'A',[Material Cost]) as [Actual matl_cost],
    If(type = 'A',[Outside Cost]) as [Actual out_cost],
    If(type = 'A',[Quantity to Bill]) as [Actual Quantity to Bill],
    If(type = 'A',[Quantity Sold]) as [Actual Quantity Sold],
    
    If(type = 'P',[LABOR Cost]) as [Plan Labor Cost],
    If(type = 'P',[LABOR Price]) as [Plan Labor Price],
    If(type = 'P',[Variable Overhead Cost]) as [Plan vohd_cost],
    If(type = 'P',[Fixed Overhead Cost]) as [Plan fohd_cost],
    If(type = 'P',[Labor Cost]) as [Plan lbr_cost],
    If(type = 'P',[Material Cost]) as [Plan matl_cost],
    If(type = 'P',[Outside Cost]) as [Plan out_cost],
    If(type = 'P',[Quantity to Bill]) as [Plan Quantity to Bill],
    If(type = 'P',[Quantity Sold]) as [Plan Quantity Sold];
LOAD
    SiteCd & '-LABOR-' & RowPointer as [DetailKey],
    'SRO-' & SiteCd & '-' & sro_num as %Order,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" & '-' & "sro_oper" as %Item,
    'Labor' as [Detail Type],
    bill_stat,
    "type",
    posted,
    extcost as [LABOR Cost],
    extprice as [LABOR Price],
    vovhd_cost * hrs_worked as [Variable Overhead Cost],
    fovhd_cost * hrs_worked as [Fixed Overhead Cost],
    lbr_cost * hrs_worked as [Labor Cost],
    matl_cost * hrs_worked as [Material Cost],
    out_cost * hrs_worked as [Outside Cost],
    hrs_to_bill as [Quantity to Bill],
    hrs_worked as [Quantity Sold]
FROM [$(ENV_QV_RAW_STAGE)fs_sro_labor.qvd]
(qvd)
Where posted = 1;
//Where
//(type = 'A' and posted = 1)
//or (type = 'A' and posted = 0)
//or (type = 'P' and posted  = 0);
//bill_stat = 'N' and ((type = 'A' and posted = 1) or (type = 'P' and posted = 0));


Concatenate(DetailTemp)
Load
    [DetailKey],
    %Order,
    %OrderLine,
    %Item,
    [Detail Type],
    bill_stat,
    "type",
    posted,
    If(type = 'A',[MATL Cost]) as [Actual Material Cost],
    If(type = 'A',[MATL Price]) as [Actual Material Price],
    If(type = 'A',[Variable Overhead Cost]) as [Actual vohd_cost],
    If(type = 'A',[Fixed Overhead Cost]) as [Actual fohd_cost],
    If(type = 'A',[Labor Cost]) as [Actual lbr_cost],
    If(type = 'A',[Material Cost]) as [Actual matl_cost],
    If(type = 'A',[Outside Cost]) as [Actual out_cost],
    If(type = 'A',[Quantity to Bill]) as [Actual Quantity to Bill],
    If(type = 'A',[Quantity Sold]) as [Actual Quantity Sold],
    
    If(type = 'P',[MATL Cost]) as [Plan Material Cost],
    If(type = 'P',[MATL Price]) as [Plan Material Price],
    If(type = 'P',[Variable Overhead Cost]) as [Plan vohd_cost],
    If(type = 'P',[Fixed Overhead Cost]) as [Plan fohd_cost],
    If(type = 'P',[Labor Cost]) as [Plan lbr_cost],
    If(type = 'P',[Material Cost]) as [Plan matl_cost],
    If(type = 'P',[Outside Cost]) as [Plan out_cost],
    If(type = 'P',[Quantity to Bill]) as [Plan Quantity to Bill],
    If(type = 'P',[Quantity Sold]) as [Plan Quantity Sold];
LOAD
    SiteCd & '-MATL-' & RowPointer as [DetailKey],
    'SRO-' & SiteCd & '-' & sro_num as %Order,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" & '-' & "sro_oper" as %Item,
    'Material' as [Detail Type],
    bill_stat,
    "type",
    posted,
    extcost as [MATL Cost],
    extprice as [MATL Price],
    vovhd_cost * matl_qty as [Variable Overhead Cost],
    fovhd_cost * matl_qty as [Fixed Overhead Cost],
    lbr_cost * matl_qty as [Labor Cost],
    matl_cost * matl_qty as [Material Cost],
    out_cost * matl_qty as [Outside Cost],
    matl_qty as [Quantity to Bill],
    matl_qty as [Quantity Sold]
FROM [$(ENV_QV_RAW_STAGE)fs_sro_matl.qvd]
(qvd) where posted = 1;
//Where
//(type = 'A' and posted = 1)
//or (type = 'A' and posted = 0)
//or (type = 'P' and posted  = 0);
//bill_stat = 'N' and ((type = 'A' and posted = 1) or (type = 'P' and posted = 0));

Concatenate(DetailTemp)
Load
    [DetailKey],
    %Order,
    %OrderLine,
    %Item,
    [Detail Type],
    bill_stat,
    "type",
    posted,
    If(type = 'A',[MISC Cost]) as [Actual Miscelaneous Cost],
    If(type = 'A',[MISC Price]) as [Actual Miscelaneous Price],
    If(type = 'A',[Variable Overhead Cost]) as [Actual vohd_cost],
    If(type = 'A',[Fixed Overhead Cost]) as [Actual fohd_cost],
    If(type = 'A',[Labor Cost]) as [Actual lbr_cost],
    If(type = 'A',[Material Cost]) as [Actual matl_cost],
    If(type = 'A',[Outside Cost]) as [Actual out_cost],
    If(type = 'A',[Quantity to Bill]) as [Actual Quantity to Bill],
    If(type = 'A',[Quantity Sold]) as [Actual Quantity Sold],
    
    If(type = 'P',[MISC Cost]) as [Plan Miscelaneous Cost],
    If(type = 'P',[MISC Price]) as [Plan Miscelaneous Price],
    If(type = 'P',[Variable Overhead Cost]) as [Plan vohd_cost],
    If(type = 'P',[Fixed Overhead Cost]) as [Plan fohd_cost],
    If(type = 'P',[Labor Cost]) as [Plan lbr_cost],
    If(type = 'P',[Material Cost]) as [Plan matl_cost],
    If(type = 'P',[Outside Cost]) as [Plan out_cost],
    If(type = 'P',[Quantity to Bill]) as [Plan Quantity to Bill],
    If(type = 'P',[Quantity Sold]) as [Plan Quantity Sold];
LOAD
    SiteCd & '-MISC-' & RowPointer as [DetailKey],
    'SRO-' & SiteCd & '-' & sro_num as %Order,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" & '-' & "sro_oper" as %Item,
    'Miscellaneous' as [Detail Type],
    bill_stat,
    "type",
    posted,
    extcost as [MISC Cost],
    extprice as [MISC Price],
    vovhd_cost * qty as [Variable Overhead Cost],
    fovhd_cost * qty as [Fixed Overhead Cost],
    lbr_cost * qty as [Labor Cost],
    matl_cost * qty as [Material Cost],
    out_cost * qty as [Outside Cost],
    qty as [Quantity to Bill],
    qty as [Quantity Sold]
FROM [$(ENV_QV_RAW_STAGE)fs_sro_misc.qvd]
(qvd) where posted = 1;
//Where 
//(type = 'A' and posted = 1)
//or (type = 'A' and posted = 0)
//or (type = 'P' and posted  = 0);
//bill_stat = 'N' and ((type = 'A' and posted = 1) or (type = 'P' and posted = 0));


//Exit script;

DetailAmounts:
Load
    //SiteCd & '-MATL-' & RowPointer as [DetailKey],
    %Order,
    %OrderLine,
    %Item,
    Sum(RangeSum([Actual Labor Cost],[Actual Material Cost],[Actual Miscelaneous Cost])) as [Actual Total Cost],
    Sum(RangeSum([Actual Labor Price],[Actual Material Price],[Actual Miscelaneous Price])) as [Actual Total Price],
    Sum([Actual Labor Cost]) as [Actual Labor Cost],
    Sum([Actual Labor Price]) as [Actual Labor Price],
    Sum([Actual Material Cost]) as [Actual Material Cost],
    Sum([Actual Material Price]) as [Actual Material Price],
    Sum([Actual Miscelaneous Cost]) as [Actual Miscelaneous Cost],
    Sum([Actual Miscelaneous Price]) as [Actual Miscelaneous Price],
    Sum([Actual vohd_cost]) as [Actual vohd_cost],
    Sum([Actual fohd_cost]) as [Actual fohd_cost],
    Sum([Actual lbr_cost]) as [Actual lbr_cost],
    Sum([Actual matl_cost]) as [Actual matl_cost],
    Sum([Actual out_cost]) as [Actual out_cost],
    Sum([Actual Quantity to Bill]) as [Actual Quantity to Bill],
    Sum([Actual Quantity Sold]) as [Actual Quantity Sold],
    
    Sum(RangeSum([Plan Labor Cost],[Plan Material Cost],[Plan Miscelaneous Cost])) as [Plan Total Cost],
    Sum(RangeSum([Plan Labor Price],[Plan Material Price],[Plan Miscelaneous Price])) as [Plan Total Price],
    Sum([Plan Labor Cost]) as [Plan Labor Cost],
    Sum([Plan Labor Price]) as [Plan Labor Price],
    Sum([Plan Material Cost]) as [Plan Material Cost],
    Sum([Plan Material Price]) as [Plan Material Price],
    Sum([Plan Miscelaneous Cost]) as [Plan Miscelaneous Cost],
    Sum([Plan Miscelaneous Price]) as [Plan Miscelaneous Price],
    Sum([Plan vohd_cost]) as [Plan vohd_cost],
    Sum([Plan fohd_cost]) as [Plan fohd_cost],
    Sum([Plan lbr_cost]) as [Plan lbr_cost],
    Sum([Plan matl_cost]) as [Plan matl_cost],
    Sum([Plan out_cost]) as [Plan out_cost],
    Sum([Plan Quantity to Bill]) as [Plan Quantity to Bill],
    Sum([Plan Quantity Sold]) as [Plan Quantity Sold]
Resident DetailTemp
Group by
    %Order,
    %OrderLine,
    %Item;

Drop Table DetailTemp;


//Inner Join (DetailTemp)
DetailTemp:
// Load *,
//     Today() - [SRO Line Due Date]  as [Backlog Days Past Due],
//     -(Today() > [SRO Line Due Date]) as [Backlog is Past Due];
LOAD
    'SRO Backlog' as FactType,
    SiteCd as %Site,
    ApplyMap('SiteKahlixMap',SiteCd,Null()) as %KahlixCode,
    SiteCd & '-' & "fs_sro_oper whse" as %WarehouseKey,
    'SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" as %Order,
    'SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" & '-' & "fs_sro_oper sro_line" as %OrderLine,
    'SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" & '-' & "fs_sro_oper sro_line" & '-' & "fs_sro_oper sro_oper" as %Item,
    'SRO' as OrderType,
    1 as [Backlog Order Line Counter],
    If("fs_sro_oper bill_type"='C','T&M','Project Fixed') as OperBillType,
    "fs_sro_oper total_billed" as OperTotalBilled,
    RangeSum("fs_sro_oper total_cost_lbr", "fs_sro_oper total_cost_matl", "fs_sro_oper total_cost_misc") as OperTotalCost,
    "fs_sro_oper total_cost_lbr"  as OperLbrCost,
    "fs_sro_oper total_cost_matl" as OperMatlCost,
    "fs_sro_oper total_cost_misc" as OperMiscCost,
    "fs_sro_oper total_price" as OperTotalPrice,
//    "fs_sro_oper total_price" as [SRO Backlog Amount],
    Date(alt(Floor(Num("fs_sro_oper end_date")),floor(Num([fs_sro_oper close_date])),floor(Num([fs_sro_oper RecordDate])))) as [MasterDate],
    "fs_sro_oper RecordDate" as [Record Date]
//    Applymap('LineDueDateMap','SRO-' & SiteCd & '-' & "fs_sro_oper sro_num" & '-' & "fs_sro_oper sro_line",Null()) as [SRO Line Due Date]

FROM [$(ENV_QV_RAW_STAGE)fs_sro_oper.qvd]
(qvd);
//Where; 
//[fs_sro_oper bill_stat]= 'C';
//"fs_sro_oper stat" = 'O' and Not("fs_sro_oper stat" = 'O' and "fs_sro_oper bill_type" = 'P' and "fs_sro_oper whse" = 'PRL');





Inner Join(DetailTemp)
LOAD
    'SRO-' & SiteCd & '-' & "sro_num" & '-' & "sro_line" as %OrderLine,
    //SiteCd,
    bill_stat as LineBillStat,
    bill_type as LineBillType,
    //sro_line,
    //sro_num
    Date(Floor(Num(due_date))) as DueDate
FROM [$(ENV_QV_RAW_STAGE)fs_sro_line.qvd]
(qvd)
where stat = 'C';
;
//Where bill_stat = 'N';





Inner Join(DetailTemp)
LOAD
    'SRO-' & SiteCd & '-' & "fs_sro sro_num" as %Order,
    SiteCd & '-' & "fs_sro cust_num" & '-' & [fs_sro cust_seq] as %ShipToCustomerId,
    SiteCd & '-' & "fs_sro cust_num" & '-0' & [fs_sro cust_seq] as %BillToCustomerId,
    SiteCd & '-' & "fs_sro slsman" as %Salesman,
    "fs_sro slsman" as %SalespersonKey,
    ApplyMap('CustomerRegionMap',SiteCd & '-' & [fs_sro cust_num] & '-' & "fs_sro cust_seq",Null()) as %RegionKey,
    "fs_sro sro_stat",
    "fs_sro UfSroIntenalStatus",
    "fs_sro end_date",
    "fs_sro cust_num",
    If(WildMatch("fs_sro sro_num",'*5s*', '*ehs*', '*ind*', '*mm*', '*VL*', 'ncr*', 'NCR*', 'SCVL*', 'slpmm*', 'sm*', 'war*', 'WAR*')>0,
       1,
       If(Match("fs_sro UfSroIntenalStatus",'Archived','Warranty')>0,
          1,
          If(exists(ExcludeCustomers,"fs_sro cust_num"),
             1,
             0
          )
       )
    )as IsSROWarrantee,
    [fs_sro exch_rate] as Conv_CUST
FROM [$(ENV_QV_RAW_STAGE)fs_sro.qvd]
(qvd); 


Left Join(DetailTemp)    
Load
    //SiteCd & '-MATL-' & RowPointer as [DetailKey],
    %Item,
    [Actual Total Cost],
    [Actual Total Price],
    [Actual Labor Cost],
    [Actual Labor Price],
    [Actual Material Cost],
    [Actual Material Price],
    [Actual Miscelaneous Cost],
    [Actual Miscelaneous Price],
    [Actual vohd_cost],
    [Actual fohd_cost],
    [Actual lbr_cost],
    [Actual matl_cost],
    [Actual out_cost],
    [Actual Quantity to Bill],
    [Actual Quantity Sold],
    
    [Plan Total Cost],
    [Plan Total Price],
    [Plan Labor Cost],
    [Plan Labor Price],
    [Plan Material Cost],
    [Plan Material Price],
    [Plan Miscelaneous Cost],
    [Plan Miscelaneous Price],
    [Plan vohd_cost],
    [Plan fohd_cost],
    [Plan lbr_cost],
    [Plan matl_cost],
    [Plan out_cost],
    [Plan Quantity to Bill],
    [Plan Quantity Sold]
Resident DetailAmounts;

Drop table DetailAmounts;

Left Join(DetailTemp)
LOAD
    Site as %Site,
    CurrencyDate as MasterDate,
    Conv_USD,
    Conv_GBP,
    Conv_LOCAL
FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
(qvd);









Left Join(DetailTemp)
Load
   %Item,
   MasterDate,
   //isSRODateMissing,
   [Shipment On-Time(Due Date)],
   [Shipment Is Late(Due Date)],
   [Actual Quantity to Bill] as [Shipment Quantity to Bill],
   [Actual Quantity Sold] as [Shipment Quantity],

   [Shipment Cost Amount(LOCAL)],
   [Shipment Cost Amount(LOCAL)] * Conv_USD as [Shipment Cost Amount(USD)],
   [Shipment Cost Amount(LOCAL)] * Conv_GBP as [Shipment Cost Amount(GBP)],
   [Shipment Cost Amount(LOCAL)] * Conv_CUST as [Shipment Cost Amount(CUST)],
   
   [Shipment Amount(LOCAL)],
   [Shipment Amount(LOCAL)] * Conv_USD as [Shipment Amount(USD)],
   [Shipment Amount(LOCAL)] * Conv_GBP as [Shipment Amount(GBP)],
   [Shipment Amount(LOCAL)] * Conv_CUST as [Shipment Amount(CUST)],
   
   [Shipment Amount(LOCAL)] - [Shipment Cost Amount(LOCAL)] as [Shipment Margin Amount(LOCAL)],
   ([Shipment Amount(LOCAL)] - [Shipment Cost Amount(LOCAL)]) * Conv_USD as [Shipment Margin Amount(USD)],
   ([Shipment Amount(LOCAL)] - [Shipment Cost Amount(LOCAL)]) * Conv_GBP as [Shipment Margin Amount(GBP)],
   ([Shipment Amount(LOCAL)] - [Shipment Cost Amount(LOCAL)]) * Conv_CUST as [Shipment Margin Amount(CUST)],   
   
   [Shipment Variable Overhead Cost(LOCAL)],
   [Shipment Variable Overhead Cost(LOCAL)] * Conv_USD as [Shipment Variable Overhead Cost(USD)],
   [Shipment Variable Overhead Cost(LOCAL)] * Conv_GBP as [Shipment Variable Overhead Cost(GBP)],
   [Shipment Variable Overhead Cost(LOCAL)] * Conv_CUST as [Shipment Variable Overhead Cost(CUST)],
   
   [Shipment Fixed Overhead Cost(LOCAL)],
   [Shipment Fixed Overhead Cost(LOCAL)] * Conv_USD as [Shipment Fixed Overhead Cost(USD)],
   [Shipment Fixed Overhead Cost(LOCAL)] * Conv_GBP as [Shipment Fixed Overhead Cost(GBP)],
   [Shipment Fixed Overhead Cost(LOCAL)] * Conv_CUST as [Shipment Fixed Overhead Cost(CUST)],
   
   [Shipment Labor Cost(LOCAL)],
   [Shipment Labor Cost(LOCAL)] * Conv_USD as [Shipment Labor Cost(USD)],
   [Shipment Labor Cost(LOCAL)] * Conv_GBP as [Shipment Labor Cost(GBP)],
   [Shipment Labor Cost(LOCAL)] * Conv_CUST as [Shipment Labor Cost(CUST)],
   
   [Shipment Material Cost(LOCAL)],
   [Shipment Material Cost(LOCAL)] * Conv_USD as [Shipment Material Cost(USD)],
   [Shipment Material Cost(LOCAL)] * Conv_GBP as [Shipment Material Cost(GBP)],
   [Shipment Material Cost(LOCAL)] * Conv_CUST as [Shipment Material Cost(CUST)],
   
   [Shipment Outside Cost(LOCAL)],
   [Shipment Outside Cost(LOCAL)] * Conv_USD as [Shipment Outside Cost(USD)],
   [Shipment Outside Cost(LOCAL)] * Conv_GBP as [Shipment Outside Cost(GBP)],
   [Shipment Outside Cost(LOCAL)] * Conv_CUST as [Shipment Outside Cost(CUST)],
   
   [Shipment SRO Labor Cost(LOCAL)],
   [Shipment SRO Labor Cost(LOCAL)] * Conv_USD as [Shipment SRO Labor Cost(USD)],
   [Shipment SRO Labor Cost(LOCAL)] * Conv_GBP as [Shipment SRO Labor Cost(GBP)],
   [Shipment SRO Labor Cost(LOCAL)] * Conv_CUST as [Shipment SRO Labor Cost(CUST)],
   
   [Shipment SRO Material Cost(LOCAL)],
   [Shipment SRO Material Cost(LOCAL)] * Conv_USD as [Shipment SRO Material Cost(USD)],
   [Shipment SRO Material Cost(LOCAL)] * Conv_GBP as [Shipment SRO Material Cost(GBP)],
   [Shipment SRO Material Cost(LOCAL)] * Conv_CUST as [Shipment SRO Material Cost(CUST)],
   
   [Shipment SRO Miscelaneous Cost(LOCAL)],
   [Shipment SRO Miscelaneous Cost(LOCAL)] * Conv_USD as [Shipment SRO Miscelaneous Cost(USD)],
   [Shipment SRO Miscelaneous Cost(LOCAL)] * Conv_GBP as [Shipment SRO Miscelaneous Cost(GBP)],
   [Shipment SRO Miscelaneous Cost(LOCAL)] * Conv_CUST as [Shipment SRO Miscelaneous Cost(CUST)],
//Plan Starts here   
   [Plan Cost Amount(LOCAL)],
   [Plan Cost Amount(LOCAL)] * Conv_USD as [Plan Cost Amount(USD)],
   [Plan Cost Amount(LOCAL)] * Conv_GBP as [Plan Cost Amount(GBP)],
   [Plan Cost Amount(LOCAL)] * Conv_CUST as [Plan Cost Amount(CUST)],
   
   [Plan Amount(LOCAL)],
   [Plan Amount(LOCAL)] * Conv_USD as [Plan Amount(USD)],
   [Plan Amount(LOCAL)] * Conv_GBP as [Plan Amount(GBP)],
   [Plan Amount(LOCAL)] * Conv_CUST as [Plan Amount(CUST)],
   
   [Plan Amount(LOCAL)] - [Plan Cost Amount(LOCAL)] as [Plan Margin Amount(LOCAL)],
   [Plan Amount(LOCAL)] - [Plan Cost Amount(LOCAL)] * Conv_USD as [Plan Margin Amount(USD)],
   [Plan Amount(LOCAL)] - [Plan Cost Amount(LOCAL)] * Conv_GBP as [Plan Margin Amount(GBP)],
   [Plan Amount(LOCAL)] - [Plan Cost Amount(LOCAL)] * Conv_CUST as [Plan Margin Amount(CUST)],
   
   [Plan Variable Overhead Cost(LOCAL)],
   [Plan Variable Overhead Cost(LOCAL)] * Conv_USD as [Plan Variable Overhead Cost(USD)],
   [Plan Variable Overhead Cost(LOCAL)] * Conv_GBP as [Plan Variable Overhead Cost(GBP)],
   [Plan Variable Overhead Cost(LOCAL)] * Conv_CUST as [Plan Variable Overhead Cost(CUST)],
   
   [Plan Fixed Overhead Cost(LOCAL)],
   [Plan Fixed Overhead Cost(LOCAL)] * Conv_USD as [Plan Fixed Overhead Cost(USD)],
   [Plan Fixed Overhead Cost(LOCAL)] * Conv_GBP as [Plan Fixed Overhead Cost(GBP)],
   [Plan Fixed Overhead Cost(LOCAL)] * Conv_CUST as [Plan Fixed Overhead Cost(CUST)],
   
   [Plan Labor Cost(LOCAL)],
   [Plan Labor Cost(LOCAL)] * Conv_USD as [Plan Labor Cost(USD)],
   [Plan Labor Cost(LOCAL)] * Conv_GBP as [Plan Labor Cost(GBP)],
   [Plan Labor Cost(LOCAL)] * Conv_CUST as [Plan Labor Cost(CUST)],
   
   [Plan Material Cost(LOCAL)],
   [Plan Material Cost(LOCAL)] * Conv_USD as [Plan Material Cost(USD)],
   [Plan Material Cost(LOCAL)] * Conv_GBP as [Plan Material Cost(GBP)],
   [Plan Material Cost(LOCAL)] * Conv_CUST as [Plan Material Cost(CUST)],
   
   [Plan Outside Cost(LOCAL)],
   [Plan Outside Cost(LOCAL)] * Conv_USD as [Plan Outside Cost(USD)],
   [Plan Outside Cost(LOCAL)] * Conv_GBP as [Plan Outside Cost(GBP)],
   [Plan Outside Cost(LOCAL)] * Conv_CUST as [Plan Outside Cost(CUST)],
   
   [Plan SRO Labor Cost(LOCAL)],
   [Plan SRO Labor Cost(LOCAL)] * Conv_USD as [Plan SRO Labor Cost(USD)],
   [Plan SRO Labor Cost(LOCAL)] * Conv_GBP as [Plan SRO Labor Cost(GBP)],
   [Plan SRO Labor Cost(LOCAL)] * Conv_CUST as [Plan SRO Labor Cost(CUST)],
   
   [Plan SRO Material Cost(LOCAL)],
   [Plan SRO Material Cost(LOCAL)] * Conv_USD as [Plan SRO Material Cost(USD)],
   [Plan SRO Material Cost(LOCAL)] * Conv_GBP as [Plan SRO Material Cost(GBP)],
   [Plan SRO Material Cost(LOCAL)] * Conv_CUST as [Plan SRO Material Cost(CUST)],
   
   [Plan SRO Miscelaneous Cost(LOCAL)],
   [Plan SRO Miscelaneous Cost(LOCAL)] * Conv_USD as [Plan SRO Miscelaneous Cost(USD)],
   [Plan SRO Miscelaneous Cost(LOCAL)] * Conv_GBP as [Plan SRO Miscelaneous Cost(GBP)],
   [Plan SRO Miscelaneous Cost(LOCAL)] * Conv_CUST as [Plan SRO Miscelaneous Cost(CUST)]
   
 ;
Load
   %Item,
   -(MasterDate <= DueDate) as [Shipment On-Time(Due Date)],
   -(MasterDate > DueDate) as [Shipment Is Late(Due Date)],
   If(OperBillType = 'T&M',[Actual Total Cost],OperTotalCost)                  as "Shipment Cost Amount(LOCAL)",
   If(OperBillType = 'T&M',[Actual Total Price],OperTotalPrice)/Conv_CUST      as "Shipment Amount(LOCAL)",
   [Actual vohd_cost]                                                          as [Shipment Variable Overhead Cost(LOCAL)],
   [Actual fohd_cost]                                                          as [Shipment Fixed Overhead Cost(LOCAL)],
   [Actual lbr_cost]                                                           as [Shipment Labor Cost(LOCAL)],
   [Actual matl_cost]                                                          as [Shipment Material Cost(LOCAL)],
   [Actual out_cost]                                                           as [Shipment Outside Cost(LOCAL)],
   [Actual Labor Cost]                                                         as [Shipment SRO Labor Cost(LOCAL)],
   [Actual Material Cost]                                                      as [Shipment SRO Material Cost(LOCAL)],
   [Actual Miscelaneous Cost]                                                  as [Shipment SRO Miscelaneous Cost(LOCAL)],
   [Actual Quantity to Bill],
   [Actual Quantity Sold],

   If(OperBillType = 'T&M',[Plan Total Cost],OperTotalCost)                    as [Plan Cost Amount(LOCAL)],
   If(OperBillType = 'T&M',[Plan Total Price],OperTotalPrice)/Conv_CUST        as [Plan Amount(LOCAL)],
   [Plan vohd_cost]                                                            as [Plan Variable Overhead Cost(LOCAL)],
   [Plan fohd_cost]                                                            as [Plan Fixed Overhead Cost(LOCAL)],
   [Plan lbr_cost]                                                             as [Plan Labor Cost(LOCAL)],
   [Plan matl_cost]                                                            as [Plan Material Cost(LOCAL)],
   [Plan out_cost]                                                             as [Plan Outside Cost(LOCAL)],
   [Plan Labor Cost]                                                           as [Plan SRO Labor Cost(LOCAL)],
   [Plan Material Cost]                                                        as [Plan SRO Material Cost(LOCAL)],
   [Plan Miscelaneous Cost]                                                    as [Plan SRO Miscelaneous Cost(LOCAL)],
   [Plan Quantity to Bill],
   [Plan Quantity Sold],

   MasterDate,
   Conv_CUST,
   Conv_USD,
   Conv_GBP,
   Conv_LOCAL
   //If(len(Trim("fs_sro end_date"))=0,If(Len(Trim(DueDate))=0,1,0),0) as isSRODateMissing
Resident DetailTemp;

Store DetailTemp into [$(ENV_QV_FINAL_STAGE)Global_SRO Gross Margin.qvd](qvd);
Drop table DetailTemp;

End Sub;



Sub GrossMarginProcess

call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteKahlixMap')
call BuildMappingTable('CustomerScrapMap')

GrossMargin:
LOAD
    'Shipments' as FactType
    ,SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release & '-' & date(Floor(Num(ship_date))) & '-' & date_seq  as %ShipKey
    ,SiteCd as %Site
    ,ApplyMap('SiteKahlixMap',SiteCd,Null()) as %KahlixCode
    ,'Order-' & SiteCd & '-' & co_num as %Order
    ,'Order-' & SiteCd & '-' & co_num  & '-' & co_line  & '-' & co_release as %OrderItem
    ,Date(Floor(Num(ship_date))) as MasterDate
    ,1 as ShipCounter
    ,price as [ShipmentPrice(CUST)]
    ,co_num
	,co_line
	,co_release
	,date_seq
	,qty_invoiced
	,Date(Floor(Num(ship_date))) as ShipDate
	,qty_shipped
	,qty_returned
	,cost as [StandardUnitItemCost(LOCAL)]
	,unit_weight
	,by_cons
	,matl_cost as [StandardUnitMaterialCost(LOCAL)]
	,lbr_cost  as [StandardUnitLaborCost(LOCAL)]
	,fovhd_cost as [StandardUnitFixedOverheadCost(LOCAL)]
	,vovhd_cost as [StandardUnitVariableOverheadCost(LOCAL)]
	,out_cost as [StandardUnitOutsideCost(LOCAL)]
	,shipper_num
	,do_num
	,do_line
	,do_seq
	,pack_num
	,orig_inv_num
	,reason_text
//     "co_ship site_ref",
//     co_num,
//     co_line,
//     co_release,
//     date_seq,
//     qty_invoiced,
//     ship_date,
//     qty_shipped,
//     qty_returned,
//     cost,
//     price,
//     unit_weight,
//     by_cons,
//     matl_cost,
//     lbr_cost,
//     fovhd_cost,
//     vovhd_cost,
//     out_cost,
//     shipper_num,
//     do_num,
//     do_line,
//     do_seq,
//     NoteExistsFlag,
//     RecordDate,
//     RowPointer,
//     CreatedBy,
//     UpdatedBy,
//     CreateDate,
//     InWorkflow,
//     pack_num,
//     orig_inv_num,
//     reason_text,
//     shipment_id,
//     "co_ship external_shipment_doc_id"
FROM [$(ENV_QV_RAW_STAGE)co_ship.qvd]
(qvd);

Inner Join(GrossMargin)
LOAD
     'Order-' & SiteCd & '-' & co_num								 	as %Order
     ,SiteCd & '-' & cust_num & '-' & cust_seq 				as [%ShipToCustomerId]
     ,SiteCd & '-' & cust_num & '-0' 						as [%BillToCustomerId] 
     ,SiteCd & '-' & slsman 								as %Salesman
     ,"slsman" as %SalespersonKey,
     ApplyMap('CustomerRegionMap',SiteCd & '-' & [cust_num] & '-' & "cust_seq",Null()) as %RegionKey
     ,Date(floor(Num(order_date)))							as [Order Date]
     ,exch_rate 											as Conv_CUST
FROM [$(ENV_QV_RAW_STAGE)co.qvd]
(qvd);
//Where ApplyMap('CustomerScrapMap', SiteCd & '-' & cust_num, 0) = 0;

Left Join(GrossMargin)
LOAD
    //PrimaryKey,
    'Order-' & SiteCd & '-' & co_num  & '-' & co_line & '-' & co_release as %OrderItem,
    If(ref_type = 'J',SiteCd & '-' & ref_type & '-' & ref_num) as %JobKey,
    'Item-' & SiteCd & '-' & item as %Item,
    Date(Floor(Num(due_date))) as DueDate,
    Date(Floor(Num(promise_date))) as PromiseDate,
    qty_ordered as QuantityOrdered,
    SiteCd & '-' & whse as %WarehouseKey
FROM [$(ENV_QV_RAW_STAGE)coitem.qvd]
(qvd);


Left Join (GrossMargin)
LOAD
    SiteCd & '-J-' & job as %JobKey,
    Sum(run_hrs_t_lbr) as JobHours
FROM [$(ENV_QV_RAW_STAGE)jobroute.qvd]
(qvd)
Where suffix = 0
Group by SiteCd, job;


Left Join (GrossMargin)
LOAD
    SiteCd & '-J-' & [jrt_sch job] as %JobKey,
    Sum("jrt_sch run_mch_hrs") as StandardHours
FROM [$(ENV_QV_RAW_STAGE)jrt_sch.qvd]
(qvd)
Where "jrt_sch suffix" = 0
Group by SiteCd,[jrt_sch job];

Left Join(GrossMargin)
LOAD
    SiteCd & '-J-' & job as %JobKey,
    qty_complete,
    qty_released,
    wip_matl_total/qty_complete as [Job Material Cost(LOCAL)],
    wip_lbr_total/qty_complete as [Job Labor Cost(LOCAL)],
    wip_fovhd_total/qty_complete as [Job Fixed Overhead Cost(LOCAL)],
    wip_vovhd_total/qty_complete as [Job Variable Overhead Cost(LOCAL)],
    wip_out_total/qty_complete as [Job Outside Cost(LOCAL)],
    Uf_plan_fixed as [Plan Fixed Cost(LOCAL)],
    Uf_plan_fixture as [Plan Fixture Cost(LOCAL)],
    Uf_plan_labor as [Plan Labor Cost(LOCAL)],
    Uf_plan_matl as [Plan Material Cost(LOCAL)],
    Uf_plan_other as [Plan Other Cost(LOCAL)],
    Uf_plan_outside as [Plan Outside Cost(LOCAL)],
    Uf_plan_run as [Plan Run Cost(LOCAL)],
    Uf_plan_setup  as [Plan Setup Cost(LOCAL)],
    Uf_plan_tool  as [Plan Tool Cost(LOCAL)],
    Uf_plan_UCost as [Plan U Cost(LOCAL)],
    Uf_plan_var as [Plan Variable Cost(LOCAL)]
FROM [$(ENV_QV_RAW_STAGE)job.qvd]
(qvd)
Where suffix = 0;

Left Join(GrossMargin)
LOAD
    Site as %Site,
    CurrencyDate as [Order Date],
    Conv_USD,
    Conv_GBP,
    Conv_LOCAL
FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
(qvd);

ShipmentFact:
Load *, 
    "Shipment Amount(CUST)" - "Shipment Cost Amount(CUST)" as [Shipment Margin Amount(CUST)],
    "Shipment Amount(LOCAL)" - "Shipment Cost Amount(LOCAL)" as [Shipment Margin Amount(LOCAL)],
    "Shipment Amount(GBP)" - "Shipment Cost Amount(GBP)" as [Shipment Margin Amount(GBP)],
    "Shipment Amount(USD)" - "Shipment Cost Amount(USD)" as [Shipment Margin Amount(USD)]
    ;
LOAD
    %ShipKey,
    %Site,
    %KahlixCode,
    [%WarehouseKey],
    FactType,
    [Order Date],
    %ShipToCustomerId,
    %BillToCustomerId,
    %Salesman,
    %SalespersonKey,
    %RegionKey,
    %Order,
    %OrderItem,
    %Item,
    %JobKey,
    ShipCounter,
    MasterDate,
    MasterDate - [Order Date] as [Shipment Lead Time Days],
    If(ShipDate < DueDate,1,0) as [Shipment On-Time(Due Date)],
    If(ShipDate < PromiseDate,1,0) as [Shipment On-Time(Promise Date)],
    If(ShipDate >= DueDate,1,0) as [Shipment Is Late(Due Date)],
    If(ShipDate >= PromiseDate,1,0) as [Shipment Is Late(Promise Date)],
    QuantityOrdered as [Shipment Original Order Quantity],
    qty_shipped as "Shipment Quantity",
    qty_complete as [Shipment Job Quantity Complete],
    qty_released as [Shipment Job Quantity Released],
    
    
    [ShipmentPrice(CUST)] * qty_shipped as  "Shipment Amount(CUST)",
    ([ShipmentPrice(CUST)] * qty_shipped)/Conv_CUST as  "Shipment Amount(LOCAL)",
    (([ShipmentPrice(CUST)] * qty_shipped)/Conv_CUST) * Conv_GBP as  "Shipment Amount(GBP)",
    (([ShipmentPrice(CUST)] * qty_shipped)/Conv_CUST) * Conv_USD as  "Shipment Amount(USD)",
    
    [StandardUnitItemCost(LOCAL)] * Conv_CUST * qty_shipped as  "Shipment Cost Amount(CUST)",
	[StandardUnitItemCost(LOCAL)] * qty_shipped as "Shipment Cost Amount(LOCAL)",
    [StandardUnitItemCost(LOCAL)] * Conv_GBP * qty_shipped as "Shipment Cost Amount(GBP)",
    [StandardUnitItemCost(LOCAL)] * Conv_USD  * qty_shipped as "Shipment Cost Amount(USD)",
    
    If(qty_shipped = QuantityOrdered,Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),[StandardUnitMaterialCost(LOCAL)]) * qty_shipped as [Shipment Job Material Cost(LOCAL)],
    If(qty_shipped = QuantityOrdered,Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),[StandardUnitMaterialCost(LOCAL)]) * Conv_CUST * qty_shipped as [Shipment Job Material Cost(CUST)],
    If(qty_shipped = QuantityOrdered,Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),[StandardUnitMaterialCost(LOCAL)]) * Conv_USD * qty_shipped as [Shipment Job Material Cost(USD)],
    If(qty_shipped = QuantityOrdered,Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),[StandardUnitMaterialCost(LOCAL)]) * Conv_GBP * qty_shipped as [Shipment Job Material Cost(GBP)],
    
    If(qty_shipped = QuantityOrdered,Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),[StandardUnitLaborCost(LOCAL)]) * qty_shipped as [Shipment Job Labor Cost(LOCAL)],
    If(qty_shipped = QuantityOrdered,Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),[StandardUnitLaborCost(LOCAL)]) * Conv_CUST * qty_shipped as [Shipment Job Labor Cost(CUST)],
    If(qty_shipped = QuantityOrdered,Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),[StandardUnitLaborCost(LOCAL)]) * Conv_USD * qty_shipped as [Shipment Job Labor Cost(USD)],
    If(qty_shipped = QuantityOrdered,Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),[StandardUnitLaborCost(LOCAL)]) * Conv_GBP * qty_shipped as [Shipment Job Labor Cost(GBP)],
    
    If(qty_shipped = QuantityOrdered,Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),[StandardUnitFixedOverheadCost(LOCAL)]) * qty_shipped as [Shipment Job Fixed Overhead Cost(LOCAL)],
    If(qty_shipped = QuantityOrdered,Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),[StandardUnitFixedOverheadCost(LOCAL)]) * Conv_CUST * qty_shipped as [Shipment Job Fixed Overhead Cost(CUST)],
    If(qty_shipped = QuantityOrdered,Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),[StandardUnitFixedOverheadCost(LOCAL)]) * Conv_USD * qty_shipped as [Shipment Job Fixed Overhead Cost(USD)],
    If(qty_shipped = QuantityOrdered,Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),[StandardUnitFixedOverheadCost(LOCAL)]) * Conv_GBP * qty_shipped as [Shipment Job Fixed Overhead Cost(GBP)],
    
    If(qty_shipped = QuantityOrdered,Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),[StandardUnitVariableOverheadCost(LOCAL)])  * qty_shipped as [Shipment Job Variable Overhead Cost(LOCAL)],
    If(qty_shipped = QuantityOrdered,Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),[StandardUnitVariableOverheadCost(LOCAL)])  * Conv_CUST * qty_shipped as [Shipment Job Variable Overhead Cost(CUST)],
    If(qty_shipped = QuantityOrdered,Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),[StandardUnitVariableOverheadCost(LOCAL)])  * Conv_USD * qty_shipped as [Shipment Job Variable Overhead Cost(USD)],
    If(qty_shipped = QuantityOrdered,Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),[StandardUnitVariableOverheadCost(LOCAL)])  * Conv_GBP * qty_shipped as [Shipment Job Variable Overhead Cost(GBP)],
    
    If(qty_shipped = QuantityOrdered,Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)]),[StandardUnitOutsideCost(LOCAL)]) * qty_shipped as [Shipment Job Outside Cost(LOCAL)],
    If(qty_shipped = QuantityOrdered,Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)]),[StandardUnitOutsideCost(LOCAL)]) * Conv_CUST * qty_shipped as [Shipment Job Outside Cost(CUST)],
    If(qty_shipped = QuantityOrdered,Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)]),[StandardUnitOutsideCost(LOCAL)]) * Conv_USD * qty_shipped as [Shipment Job Outside Cost(USD)],
    If(qty_shipped = QuantityOrdered,Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)]),[StandardUnitOutsideCost(LOCAL)]) * Conv_GBP * qty_shipped as [Shipment Job Outside Cost(GBP)],
    
    If(qty_shipped = QuantityOrdered,
       RangeSum(
    			Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),
    			Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),
    			Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),
    			Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),
                Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)])
               ),
       RangeSum(
    			[StandardUnitMaterialCost(LOCAL)],
    			[StandardUnitLaborCost(LOCAL)],
    			[StandardUnitFixedOverheadCost(LOCAL)],
    			[StandardUnitVariableOverheadCost(LOCAL)],
                [StandardUnitOutsideCost(LOCAL)]
               )
    )* qty_shipped as [Shipment Job Total Cost(LOCAL)],
    
    If(qty_shipped = QuantityOrdered,
       RangeSum(
    			Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),
    			Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),
    			Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),
    			Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),
                Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)])
               ),
       RangeSum(
    			[StandardUnitMaterialCost(LOCAL)],
    			[StandardUnitLaborCost(LOCAL)],
    			[StandardUnitFixedOverheadCost(LOCAL)],
    			[StandardUnitVariableOverheadCost(LOCAL)],
                [StandardUnitOutsideCost(LOCAL)]
               )
    ) * qty_shipped * Conv_CUST as [Shipment Job Total Cost(CUST)],
    If(qty_shipped = QuantityOrdered,
       RangeSum(
    			Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),
    			Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),
    			Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),
    			Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),
                Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)])
               ),
       RangeSum(
    			[StandardUnitMaterialCost(LOCAL)],
    			[StandardUnitLaborCost(LOCAL)],
    			[StandardUnitFixedOverheadCost(LOCAL)],
    			[StandardUnitVariableOverheadCost(LOCAL)],
                [StandardUnitOutsideCost(LOCAL)]
               )
    ) * qty_shipped * Conv_USD as [Shipment Job Total Cost(USD)],
    If(qty_shipped = QuantityOrdered,
       RangeSum(
    			Alt([Job Material Cost(LOCAL)],[StandardUnitMaterialCost(LOCAL)]),
    			Alt([Job Labor Cost(LOCAL)],[StandardUnitLaborCost(LOCAL)]),
    			Alt([Job Fixed Overhead Cost(LOCAL)],[StandardUnitFixedOverheadCost(LOCAL)]),
    			Alt([Job Variable Overhead Cost(LOCAL)],[StandardUnitVariableOverheadCost(LOCAL)]),
                Alt([Job Outside Cost(LOCAL)],[StandardUnitOutsideCost(LOCAL)])
               ),
       RangeSum(
    			[StandardUnitMaterialCost(LOCAL)],
    			[StandardUnitLaborCost(LOCAL)],
    			[StandardUnitFixedOverheadCost(LOCAL)],
    			[StandardUnitVariableOverheadCost(LOCAL)],
                [StandardUnitOutsideCost(LOCAL)]
               )
    ) * qty_shipped * Conv_GBP as [Shipment Job Total Cost(GBP)],            
    
    [StandardUnitItemCost(LOCAL)] * qty_shipped as [Shipment Standard Total Cost(LOCAL)],
    [StandardUnitItemCost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Standard Total Cost(CUST)],
    [StandardUnitItemCost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Standard Total Cost(USD)],
    [StandardUnitItemCost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Standard Total Cost(GBP)],
    
	[StandardUnitMaterialCost(LOCAL)] * qty_shipped as [Shipment Standard Material Cost(LOCAL)],
    [StandardUnitMaterialCost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Standard Material Cost(CUST)],
    [StandardUnitMaterialCost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Standard Material Cost(USD)],
    [StandardUnitMaterialCost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Standard Material Cost(GBP)],
	
    [StandardUnitLaborCost(LOCAL)] * qty_shipped as [Shipment Standard Labor Cost(LOCAL)],
    [StandardUnitLaborCost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Standard Labor Cost(CUST)],
    [StandardUnitLaborCost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Standard Labor Cost(USD)],
    [StandardUnitLaborCost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Standard Labor Cost(GBP)],
    
    [StandardUnitFixedOverheadCost(LOCAL)] * qty_shipped as [Shipment Standard Fixed Overhead Cost(LOCAL)],
    [StandardUnitFixedOverheadCost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Standard Fixed Overhead Cost(CUST)],
    [StandardUnitFixedOverheadCost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Standard Fixed Overhead Cost(USD)],
    [StandardUnitFixedOverheadCost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Standard Fixed Overhead Cost(GBP)],
    
    [StandardUnitVariableOverheadCost(LOCAL)] * qty_shipped as [Shipment Standard Variable Overhead Cost(LOCAL)],
    [StandardUnitVariableOverheadCost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Standard Variable Overhead Cost(CUST)],
    [StandardUnitVariableOverheadCost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Standard Variable Overhead Cost(USD)],
    [StandardUnitVariableOverheadCost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Standard Variable Overhead Cost(GBP)],
    
    [StandardUnitOutsideCost(LOCAL)] * qty_shipped as [Shipment Standard Outside Cost(LOCAL)],
    [StandardUnitOutsideCost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Standard Outside Cost(CUST)],
    [StandardUnitOutsideCost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Standard Outside Cost(USD)],
    [StandardUnitOutsideCost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Standard Outside Cost(GBP)],
    
    [Plan Fixed Cost(LOCAL)] * qty_shipped as [Shipment Plan Fixed Cost(LOCAL)],
    [Plan Fixed Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Fixed Cost(CUST)],
    [Plan Fixed Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Fixed Cost(USD)],
    [Plan Fixed Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Fixed Cost(GBP)],
    
    [Plan Fixture Cost(LOCAL)] * qty_shipped as [Shipment Plan Fixture Cost(LOCAL)],
    [Plan Fixture Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Fixture Cost(CUST)],
    [Plan Fixture Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Fixture Cost(USD)],
    [Plan Fixture Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Fixture Cost(GBP)],
    
    [Plan Labor Cost(LOCAL)] * qty_shipped as [Shipment Plan Labor Cost(LOCAL)],
    [Plan Labor Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Labor Cost(CUST)],
    [Plan Labor Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Labor Cost(USD)],
    [Plan Labor Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Labor Cost(GBP)],
    
    
    [Plan Material Cost(LOCAL)] * qty_shipped as [Shipment Plan Material Cost(LOCAL)],
    [Plan Material Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Material Cost(CUST)],
    [Plan Material Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Material Cost(USD)],
    [Plan Material Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Material Cost(GBP)],
        
    [Plan Other Cost(LOCAL)] * qty_shipped as [Shipment Plan Other Cost(LOCAL)],
    [Plan Other Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Other Cost(CUST)],
    [Plan Other Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Other Cost(USD)],
    [Plan Other Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Other Cost(GBP)],
    
    [Plan Outside Cost(LOCAL)] * qty_shipped as [Shipment Plan Outside Cost(LOCAL)],
    [Plan Outside Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Outside Cost(CUST)],
    [Plan Outside Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Outside Cost(USD)],
    [Plan Outside Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Outside Cost(GBP)],
    
    [Plan Run Cost(LOCAL)] * qty_shipped as [Shipment Plan Run Cost(LOCAL)],
    [Plan Run Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Run Cost(CUST)],
    [Plan Run Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Run Cost(USD)],
    [Plan Run Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Run Cost(GBP)],
    
    [Plan Setup Cost(LOCAL)] * qty_shipped as [Shipment Plan Setup Cost(LOCAL)],
    [Plan Setup Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Setup Cost(CUST)],
    [Plan Setup Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Setup Cost(USD)],
    [Plan Setup Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Setup Cost(GBP)],
    
    [Plan Tool Cost(LOCAL)] * qty_shipped as [Shipment Plan Tool Cost(LOCAL)],
    [Plan Tool Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Tool Cost(CUST)],
    [Plan Tool Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Tool Cost(USD)],
    [Plan Tool Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Tool Cost(GBP)],
    
    [Plan U Cost(LOCAL)] * qty_shipped as [Shipment Plan U Cost(LOCAL)],
    [Plan U Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan U Cost(CUST)],
    [Plan U Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan U Cost(USD)],
    [Plan U Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan U Cost(GBP)],
    
    
    [Plan Variable Cost(LOCAL)] * qty_shipped as [Shipment Plan Variable Cost(LOCAL)],
    [Plan Variable Cost(LOCAL)] * qty_shipped * Conv_CUST as [Shipment Plan Variable Cost(CUST)],
    [Plan Variable Cost(LOCAL)] * qty_shipped * Conv_GBP as [Shipment Plan Variable Cost(GBP)],
    [Plan Variable Cost(LOCAL)] * qty_shipped * Conv_USD as [Shipment Plan Variable Cost(USD)],
    
    If([ShipmentPrice(CUST)] * qty_shipped = 0,0,(([ShipmentPrice(CUST)] * qty_shipped) - ([Plan U Cost(LOCAL)] * qty_shipped))/([ShipmentPrice(CUST)] * qty_shipped)) as [Shipment Plan Margin %], 
    Conv_CUST,
    Conv_LOCAL,
    Conv_USD,
    Conv_GBP,
    If(Isnull(Conv_CUST),1,0) 							as NullOrder,
    If(Isnull(Conv_USD),1,0) 							as NullRates
Resident GrossMargin;


drop table GrossMargin;

Store ShipmentFact into [$(ENV_QV_FINAL_STAGE)GlobalDashboard_GrossMarginShipFact.qvd](qvd);
Drop table ShipmentFact;





// JobHours:
// LOAD
//     SiteCd & '-' & "jobroute site_ref"  & '-J-' & job as %JobKey,
//     Sum(run_hrs_t_lbr) as JobHours
// FROM [$(ENV_QV_RAW_STAGE)jobroute.qvd]
// (qvd)
// Where suffix = 0
// Group by SiteCd, "jobroute site_ref", job;

// Left Join (GrossMargin)
// Load
//    %JobKey,
//    JobHours
// Resident JobHours;

// Drop table JobHours;


//Exit script;

End Sub;



Sub OrderProcess

CALL BuildMappingTable('TERMS_CODE_MAP')
CALL BuildMappingTable('SHIP_CODE_MAP')
CALL BuildMappingTable('SHIP_CODE_TRANSPORT_MAP')
CALL BuildMappingTable('WonLostMap')
CALL BuildMappingTable('WLPrefixMap')

OrderDim:
//Customer Order Record Types
LOAD
    'Order-' & SiteCd & '-' & co_num 										as %Order,
    co_num 																	as [Order Number],
    est_num 																as [Order Estimate Number],
    "type" 																	as [Order Type],
    'Order' 																as [Order Data Type],
    cust_po 																as [Order Customer PO], 
    stat 																	as [Order Status Code],
    Date(Floor(Num(order_date))) 											as [Order Date/Open Date],
    Date(Floor(Num(close_date))) 											as [Order Close Date], 
    terms_code 																as [Order Terms Code],
    ship_code 																as [Order Ship Code],
    taken_by																as [Order Taken By],
    CreatedBy																as [Order Created By],
    Date(Floor(Num(CreateDate))) 											as [Order Receipt Date],
    ApplyMap('TERMS_CODE_MAP',SiteCd & '-' & terms_code,'Unknown') 			as [Order Payment Terms],
    Applymap('SHIP_CODE_MAP',SiteCd & '-' & ship_code,'Unknown') 			as [Order Ship Code Desc],
    Applymap('SHIP_CODE_TRANSPORT_MAP',SiteCd & '-' & ship_code,'Unknown') 			as [Order Ship Code Transport Desc],
    If(type = 'E',If(Len(Trim(Uf_WonLost))=0,'UDF',Uf_WonLost)) 			as [Order Won Lost Code],
    If(type = 'E',ApplyMap('WonLostMap',If(Len(Trim(Uf_WonLost))=0,'UDF',SiteCd & '-' & Uf_WonLost),'Unknown' & '-' & Uf_WonLost)) 	as [Order Won Lost],
    Applymap('WLPrefixMap',Left(If(type = 'E',If(Len(Trim(Uf_WonLost))=0,'UDF',Uf_WonLost)),1)) 									as [Order Won Lost Group],
    Date(Floor(Num("co UF_WonLostEstimatedCloseDate"))) 					as [Order Won Lost Close Date],
    If(Len(Trim([co Uf_NewBusiness]))=0,'Undefined',[co Uf_NewBusiness]) 				as [Order New/Repeat Business],
    Num(disc/100,'#,##0.00%') 				as [Order Discount Percent],
    "Uf_Notes" 								as [Order Quote Notes],
    freight_t as [Order Total Freight],
    "co Uf_shipto_Carrier"                                                  as [Order ShipTo Carrier],
    If(type = 'E', Date(Floor(Num(order_date))), Null())					as [Order Estimate Date],
    credit_hold                                                             as [Credit Hold],
    credit_hold_date                                                        as [Credit Hold Date],
    credit_hold_reason                                                      as [Credit Hold Reason],
    credit_hold_user                                                        as [Credit Hold User]
FROM [$(ENV_QV_RAW_STAGE)co.qvd](qvd);




Join(OrderDim)
LOAD
    'SRO-' & SiteCd & '-' & "fs_sro sro_num" as %Order,
    "fs_sro sro_num" 						as [Order Number],
    "fs_sro Uf_Cook_SRO_Estimate" 			as [Order Estimate Number],
    'SRO' 									as [Order Data Type],
    "fs_sro sro_type" 						as [Order Type],
    "fs_sro cust_po" 						as [Order Customer PO], 
    Date(Floor(Num("fs_sro open_date"))) 	as [Order Date/Open Date],
    "fs_sro terms_code" 					as [Order Terms Code],
    Date(Floor(Num("fs_sro CreateDate"))) 	as [Order Receipt Date],
    [fs_sro sro_stat] 						as [Order Status Code],
    "fs_sro ship_code" 						as [Order Ship Code],
    ApplyMap('TERMS_CODE_MAP',SiteCd & '-' & "fs_sro terms_code",'Unknown') as [Order Payment Terms],
    Applymap('SHIP_CODE_MAP',SiteCd & '-' & "fs_sro ship_code",'Unknown') 	as [Order Ship Code Desc],
    Applymap('SHIP_CODE_TRANSPORT_MAP',SiteCd & '-' & "fs_sro ship_code",'Unknown') 	as [Order Ship Code Transport Desc],
    [fs_sro UfSroIntenalStatus] as [SRO Internal Status],
    [fs_sro prior_code] as [Order Prior Code],
    "fs_sro credit_hold"                    as [Credit Hold],
    "fs_sro credit_hold_date"               as [Credit Hold Date],
    "fs_sro credit_hold_reason"             as [Credit Hold Reason],
    "fs_sro credit_hold_user"               as [Credit Hold User]
FROM [$(ENV_QV_RAW_STAGE)fs_sro.qvd](qvd);

Join(OrderDim)
LOAD 
     'RMA-' & SiteCd & '-' & rma_num 		as %Order,
     rma_num 								as [Order Number],
     'RMA' 									as [Order Data Type],
     'RMA' 									as [Order Type],
     Date(Floor(Num(rma_date))) 			as [Order Date/Open Date],
     ship_code 								as [Order Ship Code], 
     Date(Floor(Num(rma_date)))				as [Order Receipt Date],
     taken_by 								as [Order Taken By],
     CreatedBy 								as [Order Created By],
     stat 									as [Order Status Code],
      Applymap('SHIP_CODE_MAP',SiteCd & '-' & "ship_code",'Unknown') 		as [Order Ship Code Desc],
      Applymap('SHIP_CODE_TRANSPORT_MAP',SiteCd & '-' & "ship_code",'Unknown') 		as [Order Ship Code Transport Desc]
      
     //cust_po as [Order Customer PO], 
From [$(ENV_QV_RAW_STAGE)rma.qvd](qvd);

Join(OrderDim)
LOAD
    'Transfer-' & SiteCd & '-' & "transfer trn_num" 				as %Order,
    "transfer trn_num" 						as [Order Number],
    'Transfer' 								as [Order Data Type],
    'TRN' 									as [Order Type],
    "transfer order_date" 					as [Order Date/Open Date],
    "transfer uf_Cust_po" 					as [Order Customer PO],
    "transfer ship_code" 					as [Order Ship Code],
    "transfer order_date" 					as [Order Receipt Date],
    "transfer CreatedBy" 					as [Order Taken By],
    "transfer CreatedBy" 					as [Order Created By],
    "transfer stat" 						as [Order Status Code],
    Applymap('SHIP_CODE_MAP',SiteCd & '-' & "transfer ship_code",'Unknown') as [Order Ship Code Desc],
    Applymap('SHIP_CODE_TRANSPORT_MAP',SiteCd & '-' & "transfer ship_code",'Unknown') as [Order Ship Code Transport Desc]
FROM  [$(ENV_QV_RAW_STAGE)transfer.qvd](qvd);


Store OrderDim into [$(ENV_QV_FINAL_STAGE)SRO_MFG_OrderDim.qvd](qvd);
Drop Table OrderDim;

End Sub;



Sub OrderLineDimProcess
Call BuildMappingTable('HoldCodeMap')
Call BuildMappingTable('DeliveryTermsMap')

OrderLineDim:
      LOAD 
      	  'Order-' & SiteCd & '-' & co_num  & '-' & co_line  & '-' & co_release 	as %OrderItem,
           co_line 										as [Order Line Number],
           Uf_HoldCode 									as [Order Line Hold Code],
           Uf_EstGP 									as [?Order Line Estimated GP], 
           Uf_EST_VP 									as [Order Line Estimated GP],
           description 									as [Order Line Desc],
           stat 										as [Order Line Status],
           Date(Floor(Num(projected_date))) 			as [Order Line Projected Date],
           //Date(Floor(Num(due_date))) 					as [Order Line Due Date], 
           Date(Floor(Num(If([due_date] > YearEnd(Today(), 1) 
           	OR IsNull([due_date]),
           	YearEnd(Today(), 1), [due_date]))))			as [Order Line Due Date],
            Date(Floor(Num(ship_date)))                 as [Order Line Ship Date],
           Date(Floor(Num(release_date))) 				as [Order Line Release Date], 
           Date(Floor(Num(promise_date))) 				as [Order Line Promise Date],
           ref_num 										as [Order Line Ref Number], 
           ref_line_suf                                 as [Order Line Ref Line Suffix],
           Uf_JobType 									as [Order Line New/Repeat],
           Date(CreateDate) 							as [Order Line Record Create Date],
           Time(CreateDate) 							as [Order Line Record Create Time],
           Date(Floor(Num([coitem Uf_PromiseDate]))) 	as [Order Line Promise Date WBUET],
           cust_item 									as [Order Line Cust Item],
           [Order Line uf_PriceIncrP] 					as [Order Line Price Increase Percent],
           If(Len(Trim([Uf_NewBusiness]))=0,'Undefined',[Uf_NewBusiness]) 				as [Order Line New/Repeat Business],
            Num(disc/100,'#,##0.00%') 				 	as [Order Line Discount],
           If(Len(Trim(Uf_HoldCode))>0,ApplyMap('HoldCodeMap',SiteCd & '-' & Uf_HoldCode,'Unknown-' & Uf_HoldCode),'Undefined') as [Order Line Hold Code Desc],
           delterm										as [Order Line Delivery Terms Code],
           ApplyMap('DeliveryTermsMap',SiteCd & '-' & delterm) as [Order Line Delivery Terms],
           Uf_JobType                                  as [Order Line Job Type],
           Date(Floor(Num([coitem Uf_LOU_Requested_Date])))   			as [Order Line Request Date]
           
      FROM [$(ENV_QV_RAW_STAGE)coitem.qvd](qvd);
      
      


      
    Join(OrderLineDim)
    LOAD
        'RMA-' &  SiteCd & '-' & rma_num & '-' & rma_line 				as %OrderItem,
        rma_line 										as [Order Line Number],
        Uf_HoldCode 									as [Order Line Hold Code],
        description 									as [Order Line Desc],
        stat 											as [Order Line Status],
        Date(CreateDate) 								as [Order Line Record Create Date],
        Time(CreateDate) 								as [Order Line Record Create Time],
        cust_item 										as [Order Line Cust Item],
        If(Len(Trim(Uf_HoldCode))>0,ApplyMap('HoldCodeMap',SiteCd & '-' & Uf_HoldCode,'Unknown-' & Uf_HoldCode),'Undefined') 	as [Order Line Hold Code Desc]
    FROM [$(ENV_QV_RAW_STAGE)rmaitem.qvd](qvd);
    
    Join(OrderLineDim)
		Load
        	'Transfer-' & SiteCd & '-' & [trnitem trn_num] & '-' & [trnitem trn_line] as %OrderItem,
		   [trnitem trn_line] 							as [Order Line Number],
		   'TRN' 										as [Order Line Hold Code],
		   'Transfer' 									as [Order Line Hold Code Desc],
		   [trnitem stat] 								as [Order Line Status],
		   Date(Floor(Num([trnitem projected_date]))) 	as [Order Line Projected Date],
		   Date(Floor(Num([trnitem sch_ship_date]))) 	as [Order Line Due Date],
		   Date(Floor(Num([trnitem ship_date])))		as [Order Line Release Date],
		   Date(Floor(Num([trnitem sch_rcv_date]))) 	as [Order Line Promise Date],
           Date([trnitem CreateDate]) 					as [Order Line Record Create Date],
           Time([trnitem CreateDate]) 					as [Order Line Record Create Time],
		   Date(Floor(Num([trnitem sch_rcv_date]))) 	as [Order Line Promise Date WBUET],
		   [trnitem uf_WB_Label_CustItem] 				as [Order Line Cust Item]
		FROM [$(ENV_QV_RAW_STAGE)trnitem.qvd](qvd);

        Concatenate(OrderLineDim)
        LOAD
            'SRO-' & SiteCd & '-' & "sro_num"  & '-' & "sro_line" as %OrderItem,
            sro_line as [Order Line Number],
             sro_num  as [Order SRO Number],
            Null() as [Order Line Hold Code],
            Null() as [?Order Line Estimated GP], 
            Null() as [Order Line Estimated GP],
            description as [Order Line Desc],
             item as [Order Item],
            stat as [Order Line Status],
            total_billed as [Order Total Billed],
            total_cost_lbr	as [Order Labor Cost],
    		total_cost_matl as [Order Material Cost],
    		total_cost_misc	as [Order Miscellaneous Cost],
            total_price as [Order Total Price],
            Uf_CCI_BoreSize as [Order BoreSize],
            Uf_CCI_CylClass as [Order CylClass],
            Uf_CCI_SROLineCom as [Order SRO Line Com],
            Uf_CCI_Stage as [Order CCI Stage],
            Uf_CCI_Unit as [Order CCI Unit],
            Uf_OEM	as [Order OEM],
            UfSroLineQty as [Order SRO Line Qty],
            Date(Floor(Num(due_date))) as [Order Line Projected Date],
            Date(Floor(Num(due_date))) as [Order Line Due Date],
            Date(Floor(Num(Null()))) as [Order Line Release Date],
            Date(Floor(Num(due_date))) as [Order Line Promise Date],
            ref_num as [Order Line Ref Number],
            ref_line_suf as [Order Line Ref Line Suffix],
            Null() as [Order Line New/Repeat],
            Date(Floor(Num(CreateDate))) as [Order Line Record Create Date],
            Time(frac(Num(CreateDate))) as [Order Line Record Create Time],
            Null() as [Order Line Promise DAte WBUET],
            cust_item as [Order Line Cust Item],
            Null() as [Order Line Price Increase Percent],
            Null() as [Order Line New/Repeat Business],
            Null() as [Order Line Discount],
            Null() as [Order Line Hold Code Desc],
            Null() as [Order Line Delivery Terms Code],
            Null() as [Order Line Delivery Terms],
            Null() As [Order Line Job Type],
            UfSroLinesSentToBilling as [Order Line Sent To Billing]
        FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_line.qvd]
        (qvd);

Store OrderLineDim into [$(ENV_QV_FINAL_STAGE)SRO_MFG_OrderLineDim.qvd](qvd);
Drop Table OrderLineDim;

End Sub;



Sub SitesProcess

Site:
Directory;
LOAD
     Site as [%Site Id]
FROM
[$(ENV_QV_FINAL_STAGE)SiteApps.qvd](qvd)
Where AppName = 'AR Reporting';


Left Join(Site)
LOAD [%Site Id], 
     [Site Code], 
     [Site Database], 
     [Site Name], 
     [Site Business Segment],
     [USD Conv Exp],
     [GBP Conv Exp]
FROM
[$(ENV_QV_FINAL_STAGE)Site.qvd](qvd)
Where Match([Site Code],'CHN','BRA')=0;

End Sub;



Sub ShipmentFactProcess

Call BuildMappingTable('OrderLineItem_Map')
call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteKahlixMap')
Call BuildMappingTable('CustomerScrapMap')

ShipFactTemp:
LOAD
	'Shipments' 																										as FactType,
	SiteCd 																												as %Site,
    ApplyMap('SiteKahlixMap',SiteCd,Null()) as %KahlixCode,
    'Order-' & SiteCd & '-' & co_num 																					as %Order,
    'Order-' & SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release 											as %OrderItem,
    SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release & '-' & date(Floor(Num(ship_date))) & '-' & date_seq  	as %ShipKey,
    ApplyMap('OrderLineItem_Map', 'Order-' & SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release,Null()) 		as %Item,
    1 																													as ShipCounter, 
    Date(Floor(Num("ship_date"))) 																						as MasterDate,
    "qty_shipped" 																										as [Shipment Quantity],
    price * "qty_shipped" 																								as [Shipment Amount(CUST)],
    cost * "qty_shipped" 																								as [Shipment Cost Amount(CUST)]
From [$(ENV_QV_RAW_STAGE)co_ship.qvd](qvd);


Inner Join(ShipFactTemp)
Load 
	 'Order-' & SiteCd & '-' & co_num 												as [%Order], 
     SiteCd & '-' & cust_num & '-' & cust_seq 										as [%ShipToCustomerId], 
     SiteCd & '-' & cust_num & '-0' 												as [%BillToCustomerId], 
     If(Len(Trim(slsman))>0,SiteCd & '-' & slsman,SiteCd & '-Undefined')			as %Salesman,
     "slsman" as %SalespersonKey,
     ApplyMap('CustomerRegionMap',SiteCd & '-' & [cust_num] & '-' & "cust_seq",Null()) as %RegionKey,
     Date(Floor(Num(order_date))) 													as [Order Date],
     If(isnull(exch_rate),1.00000,exch_rate)										as Conv_CUST,
     SiteCd & '-' & whse as %WarehouseKey
FROM
[$(ENV_QV_RAW_STAGE)co.qvd]
(qvd)
//Where ApplyMap('CustomerScrapMap', SiteCd & '-' & cust_num, 0) = 0;
;

ShipFact:
NoConcatenate
LOAD
	FactType,
	%Site,
    [%KahlixCode],
    %WarehouseKey,
    [%ShipToCustomerId],
    [%BillToCustomerId],
    %Salesman,
    [%SalespersonKey],
    [%RegionKey],
    %Order,
    %OrderItem,
    %Item,
    %ShipKey,
    ShipCounter, 
    MasterDate,
    If(Isnull([Order Date]),MasterDate,[Order Date]) 								as [Order Date],
    [Shipment Quantity],
    [Shipment Amount(CUST)],
    [Shipment Cost Amount(CUST)],
    Conv_CUST
Resident ShipFactTemp;

Drop Table ShipFactTemp;



Left Join(ShipFact)
LOAD Date(floor(Num(CurrencyDate)))													as [Order Date], 
     Site 																			as %Site, 
     Conv_LOCAL, 
     Conv_USD, 
     Conv_GBP
FROM
[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd);

Left Join(ShipFact)
Load
   %ShipKey,
   If(Isnull(Conv_CUST),1,0) 														as NullOrder,
   If(Isnull(Conv_USD),1,0) 														as NullRates,
   
   [Shipment Amount(CUST)]/Conv_CUST 												as [Shipment Amount(LOCAL)],
   ([Shipment Amount(CUST)]/Conv_CUST) * Conv_GBP 									as [Shipment Amount(GBP)],
   ([Shipment Amount(CUST)]/Conv_CUST) * Conv_USD 									as [Shipment Amount(USD)],
   
   
   [Shipment Cost Amount(CUST)]/Conv_CUST 											as [Shipment Cost Amount(LOCAL)],
   ([Shipment Cost Amount(CUST)]/Conv_CUST) * Conv_GBP 								as [Shipment Cost Amount(GBP)],
   ([Shipment Cost Amount(CUST)]/Conv_CUST) * Conv_USD 								as [Shipment Cost Amount(USD)]
Resident ShipFact;

Store ShipFact into [$(ENV_QV_FINAL_STAGE)GlobalDashboard_ShipFact.qvd](qvd);
Drop table ShipFact;


End Sub;



Sub ShipmentDimProcess

ShipmentDim:
LOAD
    SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release & '-' & date(Floor(Num(ship_date))) & '-' & date_seq  as %ShipKey,
    date_seq 						as [Shipment Date Seq],
    Date(Floor(Num(ship_date))) 	as [Shipment Ship Date],
    by_cons 						as [Shipment By Cons],
    shipper_num 					as [Shipment Shipper Num],
    CreatedBy 						as [Shipment Created By],
    UpdatedBy 						as [Shipment Updated By],
    DAte(Floor(Num(CreateDate))) 	as [Shipment Create Date],
    pack_num 						as [Shipment Pack Num],
    orig_inv_num 					as [Shipment Original Invoice],
    reason_text 					as [Shipment Reason Text]
FROM [$(ENV_QV_RAW_STAGE)co_ship.qvd](qvd);


Store ShipmentDim into [$(ENV_QV_FINAL_STAGE)ShipmentDim.qvd](qvd);
Drop table ShipmentDim;

End Sub;



Sub TransferOrderDimProcess

Call BuildMappingTable('SystemSiteNameMap')
	Call BuildMappingTable('WarehouseNameMap')  
    CALL BuildMappingTable('SHIP_CODE_MAP')
    CALL BuildMappingTable('SHIP_CODE_TRANSPORT_MAP')
  
		TransferOrderDim:
		Load
		   'Transfer-' & SiteCd & '-' & [transfer trn_num] as [%Order],
		   'T' 										as [Order Type],
		   [transfer trn_num] 						as [Order Number],
		   [transfer uf_Cust_po] 					as [Order Customer PO],
		   Date(Floor(Num([transfer order_date]))) 	as [Order Date],
           Date(Floor(Num([transfer order_date]))) 	as [Order Receipt Date],
		   [transfer CreatedBy] 					as [Order Created By],
           [transfer ship_code]						as [Order Ship Code],
		   [transfer stat] 							as [Order Status],
           Applymap('SHIP_CODE_MAP',SiteCd & '-' & [transfer ship_code],'Unknown') 		as [Order Ship Code Desc],
           Applymap('SHIP_CODE_TRANSPORT_MAP',SiteCd & '-' & [transfer ship_code],'Unknown') 		as [Order Ship Code Transport Desc],
		   ApplyMap('SystemSiteNameMap',SiteCd & '-' & [transfer from_site],'Unknown') 	as [Order Transfer From Site],
		   ApplyMap('WarehouseNameMap',SiteCd & '-' & [transfer from_whse],'Unknown') 	as [Order Transfer From Warehouse],
		   ApplyMap('SystemSiteNameMap',SiteCd & '-' & [transfer to_site],'Unknown') 	as [Order Transfer to Site],
		   ApplyMap('WarehouseNameMap',SiteCd & '-' & [transfer to_whse],'Unknown') 	as [Order Transfer to Warehouse]
		FROM [$(ENV_QV_RAW_STAGE)transfer.qvd](qvd);
        
		Store TransferOrderDim into [$(ENV_QV_FINAL_STAGE)Global_TransferOrderDim.qvd](qvd);
		Drop Table TransferOrderDim;

End Sub;



Sub TransferOrderLineDimProcess

		TransferOrderLineDim:
		Load
		   'Transfer-' & SiteCd & '-' & [trnitem trn_num] & '-' & [trnitem trn_line] as [%OrderItem],
		   [trnitem trn_line] as [Order Line Number],
		   'TRN' as [Order Line Hold Code],
		   'Transfer' as [Order Line Hold Code Desc],
		   0 as [?Order Line Estimated GP],
		   0 as [Order Line Estimated GP],
		   Null() as [Order Line New/Repeat Business],
		   Null() as [Order Line Desc],
		   [trnitem stat] as [Order Line Status],
		   Date(Floor(Num([trnitem projected_date]))) as [Order Line Projected Date],
		   Date(Floor(Num([trnitem sch_ship_date]))) as [Order Line Due Date],
		   Date(Floor(Num([trnitem ship_date]))) as [Order Line Release Date],
		   Date(Floor(Num([trnitem sch_rcv_date]))) as [Order Line Promise Date],
		   Null() as [Order Line Ref Number],
		   Null() as [Order Line New/Repeat],
		   Date(Floor(Num([trnitem sch_rcv_date]))) as [Order Line Promise Date WBUET],
		   [trnitem uf_WB_Label_CustItem] as [Order Line Cust Item] 
		FROM [$(ENV_QV_RAW_STAGE)trnitem.qvd](qvd);
		
		Store TransferOrderLineDim into [$(ENV_QV_FINAL_STAGE)Global_TransferOrderLineDim.qvd](qvd);
		Drop Table TransferOrderLineDim;
		
End Sub;



Sub TransferBookingsProcess

		Call BuildMappingTable('SystemSiteKAMMap')
		Call BuildMappingTable('TransferHeaderExchangeRateMap')
        call BuildMappingTable('SiteKahlixMap')
       
		
TransferBookings_TEMP:
Load
	'Transfer-' & SiteCd & '-' & [transfer trn_num]							as %Order,
	Date(Floor(Num([transfer order_date]))) 								as [MasterDate],
    Year(Date(Floor(Num([transfer order_date])))) & ' Actuals'  as %ForecastVersion,
    'TA' & Date(Floor(Num([transfer order_date])),'YYMM')  as %ForecastPeriod,
	[transfer exch_rate] 													as [Conv_CUST],
    Date(Floor(Num([transfer order_date]))) 
FROM [$(ENV_QV_RAW_STAGE)transfer.qvd](qvd);

Inner Join(TransferBookings_TEMP)
Load
  	'Transfer-' & SiteCd & '-' & [trnitem trn_num] 							as %Order,
  	'T'																		as OrderType,
  	'Transfer Bookings' 													as FactType,
  	SiteCd 																	as %Site,
    ApplyMap('SiteKahlixMap',SiteCd,Null()) 								as %KahlixCode,
    SiteCd & '-' & [trnitem from_whse]                                      as %WarehouseKey,
    SiteCd & '-' & [trnitem to_whse]										as %ToWarehouseKey,
  	SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse]				as [%ShipToCustomerId],
  	SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] 				as [%BillToCustomerId],
  	ApplyMap('SystemSiteKAMMap',SiteCd & '-' & [trnitem to_site],'Unknown') as [%Salesman],
 	'Item-' & SiteCd & '-' & [trnitem item] 								as [%Item],
  	'Transfer-' & SiteCd & '-' & [trnitem trn_num]							as [%OrderItem],	
  	[trnitem qty_req] 														as [Booking Qty],
  	[trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1) 							as [Booking Unit Price],
  	[trnitem qty_shipped] * ([trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1))	as [Booking Extended Amount]	   
FROM [$(ENV_QV_RAW_STAGE)trnitem.qvd](qvd)
Where [trnitem site_ref] <> [trnitem to_site];

Left Join(TransferBookings_TEMP)
LOAD 
	Date(Floor(Num(CurrencyDate))) 											as [MasterDate], 
	Site 																	as %Site, 
	Conv_LOCAL, 
	Conv_USD, 
	Conv_GBP
FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd); 

TransferBookings:
Load 
	FactType,
    %Site,
    %KahlixCode,
    %WarehouseKey,
    %ToWarehouseKey,
    %Order,
    %OrderItem,
    %Item,
	[%ShipToCustomerId],
	[%BillToCustomerId],
	%Salesman,
    [%ForecastVersion],
    [%ForecastPeriod],
	MasterDate,
	OrderType,
    [Booking Qty]															as [Transfer Booking Quantity],
    [Booking Unit Price]													as [Transfer Booking Unit Price(CUST)],	
    [Booking Unit Price]/[Conv_CUST]										as [Transfer Booking Unit Price(LOCAL)],	
    ([Booking Unit Price]/[Conv_CUST])*Conv_GBP								as [Transfer Booking Unit Price(GBP)],	
    ([Booking Unit Price]/[Conv_CUST])*Conv_USD								as [Transfer Booking Unit Price(USD)],	
    
    [Booking Extended Amount]												as [Transfer Booking Extended Amount(CUST)],
    [Booking Extended Amount]/[Conv_CUST]									as [Transfer Booking Extended Amount(LOCAL)],
    ([Booking Extended Amount]/[Conv_CUST])*Conv_GBP						as [Transfer Booking Extended Amount(GBP)],
    ([Booking Extended Amount]/[Conv_CUST])*Conv_USD						as [Transfer Booking Extended Amount(USD)]
Resident TransferBookings_TEMP;

Drop Table TransferBookings_TEMP;
      
	Store TransferBookings into [$(ENV_QV_FINAL_STAGE)Global_TransferBookings.qvd](qvd);
	Drop Table TransferBookings;
    
End Sub;



Sub TransferShipmentsProcess
//sub BuildTransferShipments
		
		Call BuildMappingTable('SystemSiteKAMMap')
		Call BuildMappingTable('TransferHeaderExchangeRateMap')
        call BuildMappingTable('SiteKahlixMap')


		TransferShipments_TEMP:
		Load
		'Transfer-' & SiteCd & '-'& [transfer trn_num]						as [%Order],
		[transfer exch_rate] 											as [Conv_CUST]
		FROM [$(ENV_QV_RAW_STAGE)transfer.qvd](qvd);
		
		Inner Join(TransferShipments_TEMP)
		Load
        	'Transfer-' & SiteCd & '-' & [trnitem trn_num] 	as [%Order],
            'T' 														as OrderType,
        	'Transfer Shipments' 										as [FactType],
            SiteCd 														as [%Site],
            ApplyMap('SiteKahlixMap',SiteCd,Null()) as %KahlixCode,
            SiteCd & '-' & [trnitem from_whse]                          as %WarehouseKey,
            SiteCd & '-' & [trnitem to_whse]							as %ToWarehouseKey,
            'Transfer-' & SiteCd & '-' & [trnitem trn_num] & '-' & [trnitem trn_line]	as [%OrderItem],			//Renamed %OrderLineKey to %OrderItem, prefixed 'Order-'
            'Item-' & SiteCd & '-' & [trnitem item] 					as [%Item],
		   	SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] 	as [%ShipToCustomerId],
            SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] 	as [%BillToCustomerId],
		   	ApplyMap('SystemSiteKAMMap',SiteCd & '-' & [trnitem to_site],'Unknown') as [%Salesman],
		   Date(Floor(Num([trnitem ship_date]))) 						as [MasterDate],
		   1 															as [Transfer ShipCounter],
		   Date(Floor(Num([trnitem ship_date]))) 						as [Transfer Ship Date],
		   -(Date(Floor(Num([trnitem ship_date]))) <= Date(Floor(Num([trnitem sch_ship_date])))) as [Transfer IsShipOnTime],
		   -(Date(Floor(Num([trnitem ship_date]))) <= Date(Floor(Num([trnitem sch_ship_date])))) as [Transfer IsShipOnTime(Promise Date)],
		   [trnitem qty_shipped] 										as [Transfer Shipping Quantity],
		   [trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1) as [Ship Unit Price],
		   [trnitem qty_shipped] * ([trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1)) as [Ship Extended Price],
		   [trnitem unit_cost] * [trnitem qty_shipped] 					as [Ship Extended Cost],
		   [trnitem unit_cost] 											as [Ship Unit Cost],
		   [trnitem matl_cost] 											as [Ship Unit Material Cost],
		   [trnitem lbr_cost] 											as [Ship Unit Labor Cost],
		   Rangesum([trnitem fovhd_cost],[trnitem vovhd_cost])			as [Ship Unit Overhead Cost],
		   [trnitem fovhd_cost] 										as [Ship Unit Fixed Overhead Cost],
		   [trnitem vovhd_cost] 										as [Ship Unit Variable Overhead Cost],
		   [trnitem out_cost] 											as [Ship Unit Outside Cost]
//		Null() as [%CustomerComplaintID],
		FROM [$(ENV_QV_RAW_STAGE)trnitem.qvd](qvd)
		Where [trnitem stat] <> 'O'
        AND [trnitem site_ref] <> [trnitem to_site];
		   
		Left Join(TransferShipments_TEMP)
		LOAD Date(Floor(Num(CurrencyDate))) as [MasterDate], 
		     Site as %Site, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd); 	

TransferShipments:
Load
	FactType,
    %Site,
    %KahlixCode,
    %WarehouseKey,
    %ToWarehouseKey,
	OrderType,
    %Order,
    %OrderItem,
    %Item,
	[%ShipToCustomerId],
	[%BillToCustomerId],
	%Salesman,
	MasterDate,
// Where is this in transfer Bookings?
//	OrderType

    [Transfer ShipCounter],
    [Transfer IsShipOnTime],
    [Transfer IsShipOnTime(Promise Date)],
    [Transfer Shipping Quantity],
    
    [Ship Unit Price]											as [Transfer Ship Unit Price(CUST)],
    [Ship Unit Price]/[Conv_CUST]								as [Transfer Ship Unit Price(LOCAL)],
    ([Ship Unit Price]/[Conv_CUST])*Conv_GBP					as [Transfer Ship Unit Price(GBP)],
    ([Ship Unit Price]/[Conv_CUST])*Conv_USD					as [Transfer Ship Unit Price(USD)],
    
    [Ship Extended Price]										as [Transfer Ship Extended Price(CUST)],
    [Ship Extended Price]/[Conv_CUST]							as [Transfer Ship Extended Price(LOCAL)],
    ([Ship Extended Price]/[Conv_CUST])*Conv_GBP				as [Transfer Ship Extended Price(GBP)],
    ([Ship Extended Price]/[Conv_CUST])*Conv_USD				as [Transfer Ship Extended Price(USD)],
    
    [Ship Unit Cost]											as [Transfer Ship Unit Cost(CUST)],
    [Ship Unit Cost]/[Conv_CUST]								as [Transfer Ship Unit Cost(LOCAL)],
    ([Ship Unit Cost]/[Conv_CUST])*Conv_GBP						as [Transfer Ship Unit Cost(GBP)],
    ([Ship Unit Cost]/[Conv_CUST])*Conv_USD						as [Transfer Ship Unit Cost(USD)],   

    [Ship Unit Material Cost]									as [Transfer Ship Unit Material Cost(CUST)],
    [Ship Unit Material Cost]/[Conv_CUST]						as [Transfer Ship Unit Material Cost(LOCAL)],
    ([Ship Unit Material Cost]/[Conv_CUST])*Conv_GBP			as [Transfer Ship Unit Material Cost(GBP)],
    ([Ship Unit Material Cost]/[Conv_CUST])*Conv_USD			as [Transfer Ship Unit Material Cost(USD)], 
    
    [Ship Unit Labor Cost]										as [Transfer Ship Unit Labor Cost(CUST)],
    [Ship Unit Labor Cost]/[Conv_CUST]							as [Transfer Ship Unit Labor Cost(LOCAL)],
    ([Ship Unit Labor Cost]/[Conv_CUST])*Conv_GBP				as [Transfer Ship Unit Labor Cost(GBP)],
    ([Ship Unit Labor Cost]/[Conv_CUST])*Conv_USD				as [Transfer Ship Unit Labor Cost(USD)], 

    [Ship Unit Overhead Cost]									as [Transfer Ship Unit Overhead Cost(CUST)],
    [Ship Unit Overhead Cost]/[Conv_CUST]						as [Transfer Ship Unit Overhead Cost(LOCAL)],
    ([Ship Unit Overhead Cost]/[Conv_CUST])*Conv_GBP			as [Transfer Ship Unit Overhead Cost(GBP)],
    ([Ship Unit Overhead Cost]/[Conv_CUST])*Conv_USD			as [Transfer Ship Unit Overhead Cost(USD)], 
    
    [Ship Unit Fixed Overhead Cost]								as [Transfer Ship Unit Fixed Overhead Cost(CUST)],
    [Ship Unit Fixed Overhead Cost]/[Conv_CUST]					as [Transfer Ship Unit Fixed Overhead Cost(LOCAL)],
    ([Ship Unit Fixed Overhead Cost]/[Conv_CUST])*Conv_GBP		as [Transfer Ship Unit Fixed Overhead Cost(GBP)],
    ([Ship Unit Fixed Overhead Cost]/[Conv_CUST])*Conv_USD		as [Transfer Ship Unit Fixed Overhead Cost(USD)], 
    
    [Ship Unit Variable Overhead Cost]							as [Transfer Ship Unit Variable Overhead Cost(CUST)],
    [Ship Unit Variable Overhead Cost]/[Conv_CUST]				as [Transfer Ship Unit Variable Overhead Cost(LOCAL)],
    ([Ship Unit Variable Overhead Cost]/[Conv_CUST])*Conv_GBP	as [Transfer Ship Unit Variable Overhead Cost(GBP)],
    ([Ship Unit Variable Overhead Cost]/[Conv_CUST])*Conv_USD	as [Transfer Ship Unit Variable Overhead Cost(USD)], 
    
    [Ship Unit Outside Cost]									as [Transfer Ship Unit Outside Cost(CUST)],
    [Ship Unit Outside Cost]/[Conv_CUST]						as [Transfer Ship Unit Outside Cost(LOCAL)],
    ([Ship Unit Outside Cost]/[Conv_CUST])*Conv_GBP				as [Transfer Ship Unit Outside Cost(GBP)],
    ([Ship Unit Outside Cost]/[Conv_CUST])*Conv_USD				as [Transfer Ship Unit Outside Cost(USD)]
Resident TransferShipments_TEMP;

Drop Table TransferShipments_TEMP;
	
		Store TransferShipments into [$(ENV_QV_FINAL_STAGE)Global_TransferShipments.qvd](qvd);
		Drop Table TransferShipments;
        
End Sub;



Sub TransferOpenOrderProcess

		Call BuildMappingTable('SystemSiteKAMMap')
		Call BuildMappingTable('TransferHeaderExchangeRateMap')
        call BuildMappingTable('SiteKahlixMap')
		
		TransferOpenOrders_TEMP:
		Load
		'Transfer-' & SiteCd & '-' & [transfer trn_num]					as %Order,
		[transfer exch_rate] 											as [Conv_CUST]
		FROM [$(ENV_QV_RAW_STAGE)transfer.qvd](qvd);
		
		Inner Join(TransferOpenOrders_TEMP)
		Load
        	'Transfer-'& SiteCd & '-' & [trnitem trn_num] 	as %Order,
            'T' 														as OrderType,
            'Transfer Open Orders'										as [FactType],
            SiteCd 														as [%Site],
            ApplyMap('SiteKahlixMap',SiteCd,Null()) 					as %KahlixCode,
            SiteCd & '-' & [trnitem from_whse]                          as %WarehouseKey,
            SiteCd & '-' & [trnitem to_whse]							as %ToWarehouseKey,
            SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] 	as [%ShipToCustomerId],
		   	SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] 	as [%BillToCustomerId],
        	ApplyMap('SystemSiteKAMMap',SiteCd & '-' & [trnitem to_site],'Unknown') 		as [%Salesman],
		   	'Item-' & SiteCd & '-' & [trnitem item] 										as [%Item],
		   	'Transfer-' & SiteCd & '-' & [trnitem trn_num] & '-' & [trnitem trn_line] 											as [%OrderItem],
		   	Date(Floor(Num([trnitem sch_ship_date]))) 										as [MasterDate],
		   1 																				as [Transfer Open Order Line Count],
		   Date(Floor(Num([trnitem ship_date]))) 											as [Transfer Ship Date],
		   -(Date(Floor(Num([trnitem sch_ship_date]))) <= Date(Floor(Num('$(vToday)'))))	as [Transfer IsLate],
		   -(Date(Floor(Num([trnitem sch_ship_date]))) <= Date(Floor(Num('$(vToday)')))) 	as [Transfer IsPromisePast],
		   [trnitem qty_req] 																as [Transfer Open Order Remaining Units],
		   [trnitem qty_req] * ([trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1)) as [Transfer Open Order Remaining Value],
		   [trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1) as [Transfer Open Order Unit Price],
		   [trnitem unit_cost] * [trnitem qty_req] as [Transfer Open Order Remaining Extended Cost]
//		SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] as [%Customer Seq ID],
//		Null() as [%CustomerComplaintID],
		FROM [$(ENV_QV_RAW_STAGE)trnitem.qvd](qvd)
		Where [trnitem stat] = 'O'
        AND [trnitem site_ref] <> [trnitem to_site];
		
		Left Join(TransferOpenOrders_TEMP)
		LOAD Date(Floor(Num(CurrencyDate))) as [MasterDate],
		     Site as %Site,
		     Conv_LOCAL,
		     Conv_USD,
		     Conv_GBP
		FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd);

TransferOpenOrders:
Load            
	FactType,
    %Site,
    %KahlixCode,
    [%WarehouseKey],
    %ToWarehouseKey,
// Where is this in transfer Bookings?
//	%OrderNumber,
	%Order,
    %OrderItem,
	%Item,
	[%ShipToCustomerId],
	[%BillToCustomerId],
	%Salesman,
	MasterDate,
// Where is this in transfer Bookings?
	OrderType,
    [Transfer Open Order Line Count],
    [Transfer Ship Date],
	[Transfer IsLate],
    [Transfer IsPromisePast],
	[Transfer Open Order Remaining Units],
    
    [Transfer Open Order Remaining Value]					as [Transfer Open Order Remaining Value(LOCAL)],
    [Transfer Open Order Remaining Value]*Conv_CUST			as [Transfer Open Order Remaining Value(CUST)],
    [Transfer Open Order Remaining Value]*Conv_GBP			as [Transfer Open Order Remaining Value(GBP)],
    [Transfer Open Order Remaining Value]*Conv_USD			as [Transfer Open Order Remaining Value(USD)],
    
	[Transfer Open Order Unit Price]						as [Transfer Open Order Unit Price(LOCAL)],
    [Transfer Open Order Unit Price]*Conv_CUST				as [Transfer Open Order Unit Price(CUST)],
    [Transfer Open Order Unit Price]*Conv_GBP				as [Transfer Open Order Unit Price(GBP)],
    [Transfer Open Order Unit Price]*Conv_USD				as [Transfer Open Order Unit Price(USD)],
    
    [Transfer Open Order Remaining Extended Cost]			as [Transfer Open Order Remaining Extended Cost(LOCAL)],
    [Transfer Open Order Remaining Extended Cost]*Conv_CUST	as [Transfer Open Order Remaining Extended Cost(CUST)],
    [Transfer Open Order Remaining Extended Cost]*Conv_GBP	as [Transfer Open Order Remaining Extended Cost(GBP)],
    [Transfer Open Order Remaining Extended Cost]*Conv_USD	as [Transfer Open Order Remaining Extended Cost(USD)]
Resident TransferOpenOrders_TEMP;

Drop Table TransferOpenOrders_TEMP;

		Store TransferOpenOrders into [$(ENV_QV_FINAL_STAGE)Global_TransferOpenOrders.qvd](qvd);
		Drop Table TransferOpenOrders;

End Sub;

     

Sub BookingsProcess;

call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteKahlixMap')
Call BuildMappingTable('CustomerScrapMap')
//This is an edit made at 08:11 03/09/2021


BookingFact_TEMP:
// 		Load 
// 			FactType,
// 			%Site,
// 			[OrderType],
// 			[%Order],
//             [%ShipToCustomerId],
//             [%BillToCustomerId],
//             %Salesman,
// 			OrderStatus,
// 			Conv_CUST, 									
//             [Discount Percent],
// 			%PayMatrix; 
		LOAD 
        	'Sales' 												as FactType,
        	 SiteCd 												as %Site,
             ApplyMap('SiteKahlixMap',SiteCd,Null()) 				as %KahlixCode,
             SiteCd & '-' & whse                                    as %WarehouseKey,
        	 type 													as OrderType,
		     'Order-' &SiteCd & '-' & co_num 						as %Order,
             SiteCd & '-' & cust_num & '-' & cust_seq 				as [%ShipToCustomerId], 
             SiteCd & '-' & cust_num & '-0' 						as [%BillToCustomerId], 
             Year(Date(Floor(Num(order_date)))) & '-' & SiteCd & '-' & cust_num as %ForecastCustomerKey,
             stat 													as OrderStatus,
		     exch_rate												as Conv_CUST,
             If(Len(Trim(slsman))>0,SiteCd & '-' & slsman,SiteCd & '-Undefined')	as %Salesman,
             "slsman" as %SalespersonKey,
             ApplyMap('CustomerRegionMap',SiteCd & '-' & [cust_num] & '-' & "cust_seq",Null()) as %RegionKey,
             Date(Floor(Num(order_date))) 							as [Order Date],
             disc/100												as [Discount Percent],
             If(Len(Trim([co Uf_coCommSalePaymatrix]))=0,If(Len(Trim(slsman))=0,'UNDEFINED',slsman) & '-100',[co Uf_coCommSalePaymatrix]) as [%PayMatrix]
		FROM [$(ENV_QV_RAW_STAGE)co.qvd](qvd)
		Where type <> 'E';
        //rmoving the scrap condition temporarily CAC 4/6/2021
        //And ApplyMap('CustomerScrapMap', SiteCd & '-' & cust_num, 0) = 0;

// OrderLineKey and Item	
		Left Join(BookingFact_TEMP)
		LOAD 
            If(ref_type = 'J',SiteCd & '-' & ref_type & '-' & ref_num) as %JobKey,
        	'Order-' & SiteCd & '-' & "co_num" 						as %Order, 
		    'Item-' & SiteCd & '-' & item 							as %Item,
            'Order-' & SiteCd & '-' & "co_num" & '-' & "co_line"  & '-' & co_release 	as %OrderItem,
            Date(Floor(Num(due_date))) as [Due Date],
            disc/100 as [Line Discount Percent],
            [Order Line uf_PriceIncrP] 								as [Order Line Price Incr %]
		From [$(ENV_QV_RAW_STAGE)coitem.qvd] (qvd);

LEFT JOIN(BookingFact_TEMP)
LOAD
    SiteCd & '-J-' & job as %JobKey,
    Uf_plan_UCost as [Plan U Cost(LOCAL)]
FROM [$(ENV_QV_RAW_STAGE)job.qvd]
(qvd)
Where suffix = 0
;

// Booking transaction details
		Left Join(BookingFact_TEMP)
		LOAD 
             'Order-' & SiteCd & '-' & "co_num" & '-' & "co_line"  & '-' & co_release 	as %OrderItem,
		     Date(Floor(Num(activity_date))) 						as MasterDate,
             Year(Date(Floor(Num(activity_date)))) & ' Actuals'  as %ForecastVersion,
             'TA' & Date(Floor(Num(activity_date)),'YYMM')  as %ForecastPeriod,
             activity_seq,
		     qty_chg 												as [Booking Quantity Sold], 
		     trans_amt 												as [Booking Amount Ordered(CUST)]
		FROM [$(ENV_QV_RAW_STAGE)coitem_log.qvd](qvd);
  
//Conversions	
    	Left Join(BookingFact_TEMP)
		LOAD 
        	 Site 													as %Site, 
        	 Date(Floor(Num(CurrencyDate))) 						as MasterDate, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd); 

//Resident Bookings table w/ bookings amount
		BookingFact:
        LOAD *,
            "Booking Amount Ordered(CUST)"-("Booking Amount Ordered(CUST)"/(1+[Order Line Price Incr %]))	as [Booking Price Increase Amount(CUST)],
            "Booking Amount Ordered(LOCAL)"-("Booking Amount Ordered(LOCAL)"/(1+[Order Line Price Incr %]))	as [Booking Price Increase Amount(LOCAL)],
            "Booking Amount Ordered(GBP)"-("Booking Amount Ordered(GBP)"/(1+[Order Line Price Incr %]))		as [Booking Price Increase Amount(GBP)],
            "Booking Amount Ordered(USD)"-("Booking Amount Ordered(USD)"/(1+[Order Line Price Incr %]))		as [Booking Price Increase Amount(USD)];
		LOAD 
        	 FactType,
             %Site,
             %KahlixCode,
             %Order,
             %OrderItem,
        	 %Item, 
             [%ForecastVersion],
             [%ForecastPeriod],
             [%ShipToCustomerId], 
           	 [%BillToCustomerId],
             %Salesman,
             %ForecastCustomerKey,
             %SalespersonKey,
             %RegionKey,
             [Due Date],
             MasterDate,
		     OrderType,
             [Booking Quantity Sold],
             [Order Line Price Incr %],
             (1 - [Line Discount Percent]) * [Booking Amount Ordered(CUST)]							as [Booking Amount Ordered(CUST)],
             ((1 - [Line Discount Percent]) * [Booking Amount Ordered(CUST)])/Conv_CUST				as [Booking Amount Ordered(LOCAL)],
             (((1 - [Line Discount Percent]) * [Booking Amount Ordered(CUST)])/Conv_CUST)*Conv_GBP	as [Booking Amount Ordered(GBP)],
             (((1 - [Line Discount Percent]) * [Booking Amount Ordered(CUST)])/Conv_CUST)*Conv_USD	as [Booking Amount Ordered(USD)],
             Conv_CUST as TEMP_Conv_CUST,
             Conv_GBP as TEMP_Conv_GBP,
             Conv_USD as TEMP_Conv_USD,
             [Plan U Cost(LOCAL)] AS [Planned Cost]
		Resident BookingFact_TEMP
		Where Len(Trim(%OrderItem))>0 and Len(Trim(activity_seq))>0;
		
        Drop Fields TEMP_Conv_CUST,TEMP_Conv_GBP,TEMP_Conv_USD;
        Drop Table BookingFact_TEMP;
        
		RMA:
		Load
			'RMA' 													as FactType,
    		SiteCd 													as %Site,
            ApplyMap('SiteKahlixMap',SiteCd,Null()) 				as %KahlixCode,
            SiteCd & '-' & whse                                     as [%WarehouseKey],
			'RMA-'&SiteCd & '-' & rma_num 							as %Order,
			SiteCd & '-' & cust_num & '-' & cust_seq 				as [%ShipToCustomerId],
    		SiteCd & '-' & cust_num & '-0'  						as [%BillToCustomerId],
			ApplyMap('CustomerRegionMap',SiteCd & '-' & [cust_num] & '-' & "cust_seq",Null()) as %RegionKey,
            exch_rate 												as Conv_CUST
		From [$(ENV_QV_RAW_STAGE)rma.qvd](qvd);
		
		Inner Join(RMA)
		LOAD 
			'RMA-' & SiteCd  &'-' & rma_num 						as %Order,
			'RMA-' & SiteCd & '-' & "rma_num" & '-' & "rma_line" 	as %OrderItem,
			'Item-' & SiteCd & '-' & item 							as %Item,
			"qty_to_return" 										as [Quantity Returned],
			"cust_item" 											as [Customer Item]
		From [$(ENV_QV_RAW_STAGE)rmaitem.qvd](qvd);
		
		
		Left Join(RMA)
		LOAD 
			'RMA-' & SiteCd &'-'& "rma_num" & '-' & "rma_line" 		as %OrderItem,
			"activity_seq",
			Date(Floor(Num(activity_date))) 						as MasterDate,
			Date(Floor(Num(activity_date))) 						as FactDate,
			Time(Floor(frac(activity_date)/$(vTimestampRoundingFactor))*$(vTimestampRoundingFactor)) as [Sales Transaction Time],
			"qty_chg" 												as QtyChg,
			"trans_amt" * -1 										as TransAmt
		From [$(ENV_QV_RAW_STAGE)rmaitm_log.qvd](qvd);
	
		Left Join(RMA)
		LOAD 
			Date(Floor(Num(CurrencyDate))) 							as MasterDate, 
			Site 													as %Site, 
			Conv_LOCAL, 
			Conv_USD, 
			Conv_GBP
		FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd);
        
		Store RMA into [$(ENV_QV_WORKING_DATA)Global_SalesRMATemp.qvd](qvd);
		Drop Table RMA;        
        
		RMA:
		LOAD
			FactType, 
   		 	%Site,
            [%KahlixCode],
            [%WarehouseKey],
    		%Order,
    		%OrderItem, 
			%Item,
    		[%ShipToCustomerId],
    		[%BillToCustomerId],
    		%Site & '-Undefined' 									as %Salesman,
    		%RegionKey,
            MasterDate,
			[Quantity Returned], 
			[Customer Item], 
			[Sales Transaction Time], 
            1 														as [Salesman Contribution Percent], 
			QtyChg 													as [Sales Quantity Sold],
			TransAmt 												as [Booking Amount Ordered(CUST)],
    		(TransAmt/Conv_CUST)									as [Booking Amount Ordered(LOCAL)],
    		((TransAmt/Conv_CUST)*Conv_GBP) 						as [Booking Amount Ordered(GBP)],
    		((TransAmt/Conv_CUST)*Conv_USD) 						as [Booking Amount Ordered(USD)]
		FROM [$(ENV_QV_WORKING_DATA)Global_SalesRMATemp.qvd](qvd)
		Where Len(Trim(activity_seq))>0;

		Store RMA into [$(ENV_QV_FINAL_STAGE)Global_SalesRMA.qvd](qvd);
		Drop Table RMA;

		Join(BookingFact)      
		LOAD
    		FactType,
    		%Site,
            %KahlixCode,
            [%WarehouseKey],
    		%Order,
    		%OrderItem,
    		%Item,
    		%ShipToCustomerId,
    		%BillToCustomerId,
    		%Salesman,
    		MasterDate,
    		"Salesman Contribution Percent",
    		"Quantity Returned",
    		"Customer Item",
    		"Sales Transaction Time",
    		"Sales Quantity Sold",
    		"Booking Amount Ordered(CUST)",
    		"Booking Amount Ordered(LOCAL)",
    		"Booking Amount Ordered(GBP)",
    		"Booking Amount Ordered(USD)"
		FROM  [$(ENV_QV_FINAL_STAGE)Global_SalesRMA.qvd](qvd);	
        
 		Store BookingFact into [$(ENV_QV_FINAL_STAGE)Global_BookingFact.qvd](qvd);
 		Drop Table BookingFact;
        
End Sub;



Sub SROBookingsProcess
	call BuildMappingTable('CustomerRegionMap')
    call BuildMappingTable('SiteKahlixMap')
    
    

SROLog:
LOAD
    SiteCd & '-' &
    "_DPC_fs_sro_log logsource" & '-' &
    "_DPC_fs_sro_log sro_num" & '-' &
    "_DPC_fs_sro_log sro_line" & '-' &
    "_DPC_fs_sro_log sro_oper" & '-' &
    "_DPC_fs_sro_log type" & '-' &
    "_DPC_fs_sro_log trans_num" & '-' &
    "_DPC_fs_sro_log activity_seq" as IsThisMyPrimaryKey,
//     "_DPC_fs_sro_log logsource" & '-' &
//     "_DPC_fs_sro_log sro_num" & '-' &
//     "_DPC_fs_sro_log sro_line" & '-' &
//     "_DPC_fs_sro_log sro_oper"
//     /*"_DPC_fs_sro_log trans_num" Date(Floor(Num("_DPC_fs_sro_log activity_date")),'YYYYMMDD')  & '-' & (1000000 - ORD("_DPC_fs_sro_log type"))*/
//      as UnitOfWork,
    'SRO Bookings' as FactType,
    SiteCd as %Site,
    ApplyMap('SiteKahlixMap',SiteCd,Null()) as %KahlixCode,
    SiteCd & '-' & "_DPC_fs_sro_log whse" as %WarehouseKey,
    'SRO-' & SiteCd & '-' & "_DPC_fs_sro_log sro_num" as %Order,
    'SRO-' & SiteCd & '-' & "_DPC_fs_sro_log sro_num"  & '-' & "_DPC_fs_sro_log sro_line" as %OrderItem,
    'SRO-' & SiteCd & '-' & "_DPC_fs_sro_log sro_num" & '-' & "_DPC_fs_sro_log sro_line" & '-' & "_DPC_fs_sro_log sro_oper" as %Item,
    PrimaryKey,
    SiteCd,
    "_DPC_fs_sro_log logsource" as logsource,
    "_DPC_fs_sro_log sro_num" as sro_num,
    "_DPC_fs_sro_log sro_line" as sro_line,
    "_DPC_fs_sro_log sro_oper" as sro_oper,
    "_DPC_fs_sro_log type" as type,
    1000000 - Ord("_DPC_fs_sro_log type") as TypeSort,
    "_DPC_fs_sro_log trans_num" as trans_num,
    "_DPC_fs_sro_log activity_seq" as activity_seq,
    Date(Floor(Num("_DPC_fs_sro_log activity_date"))) as ActivityDate,
    Date(Floor(Num("_DPC_fs_sro_log activity_date"))) as MasterDate,
    Year(Date(Floor(Num("_DPC_fs_sro_log activity_date")))) & ' Actuals'  as %ForecastVersion,
    'TA' & Date(Floor(Num("_DPC_fs_sro_log activity_date")),'YYMM')  as %ForecastPeriod,
    Year(Date(Floor(Num("_DPC_fs_sro_log activity_date")))) & '-' & SiteCd  as %ForecastCustomerKeyTemp,
    Time(Frac(Num("_DPC_fs_sro_log activity_date")),'hh:mm:ss.fff') as ActivityTime,
    TimeStamp(Num("_DPC_fs_sro_log activity_date"),'MM/DD/YYYY hh:mm:ss.fff') as activity_date,
    "_DPC_fs_sro_log itemcode" as itemcode,
    
    alt("_DPC_fs_sro_log qty_chg",0) as qty_chg,
    Alt("_DPC_fs_sro_log extprice",0) as extprice,
    Alt("_DPC_fs_sro_log extcost",0) as extcost,
    "_DPC_fs_sro_log u_m" as u_m,
    "_DPC_fs_sro_log due_date" as due_date,
    "_DPC_fs_sro_log projected_date" as projected_date,
    "_DPC_fs_sro_log posted" as posted,
    "_DPC_fs_sro_log whse" as whse,
    "_DPC_fs_sro_log RowPointer" as Rowpointer,
    "_DPC_fs_sro_log CreatedBy" as CreatedBy,
    -Isnull("_DPC_fs_sro_log extprice") as FlagForDelete
FROM [lib://QV-ProductionData/Data/Raw Stage/_DPC_fs_sro_log.qvd]
(qvd)
WHERE (ISNULL("_DPC_fs_sro_log sro_stat") AND ISNULL("_DPC_fs_sro_log uf_cook_sro_estimate") AND ISNULL("_DPC_fs_sro_log uf_cook_sro_quote")) OR ("_DPC_fs_sro_log sro_stat" = 'O'
   AND "_DPC_fs_sro_log uf_cook_sro_estimate" <> 1 AND "_DPC_fs_sro_log UfSroIntenalStatus" <> 'Warranty' AND "_DPC_fs_sro_log uf_cook_sro_quote" <> 1)
;

Inner join(SROLog)
LOAD
    SiteCd as %Site,
    "fs_sro sro_num" as sro_num,
    SiteCd & '-' & "fs_sro cust_num" & '-' & [fs_sro cust_seq] as %ShipToCustomerId,
    SiteCd & '-' & "fs_sro cust_num" & '-0' & [fs_sro cust_seq] as %BillToCustomerId,
    SiteCd & '-' & "fs_sro slsman" as %Salesman,
    "fs_sro slsman" as %SalespersonKey,
    ApplyMap('CustomerRegionMap',SiteCd & '-' & [fs_sro cust_num] & '-' & "fs_sro cust_seq",Null()) as %RegionKey,
    If(
       Wildmatch("fs_sro sro_num",'WAR*')>0,
       'Warranty',
       If(Wildmatch("fs_sro sro_num",'NCR*')>0,
          'Scrap/Rework',
          If(
             WildMatch(Upper("fs_sro description"),'*WARRANTY*')>0,
             'Warranty',
             If(
                Match("fs_sro cust_num",'DP01781', 'DP01988', 'DP02015', 'DP02095', 'DP02096', 'DP02097', 'DP02098', 'DP02099', 'DP07391')>0,
                'Warranty',
                If(
                   wildmatch("fs_sro description",'*A1','*A2','*A3','*A4','*A5','*A6','*A7','*A8','*B1','*B2','*B3','*B4','*B5' ,'*B6' ,'*B7' ,'*B8','*C2','*C3','*C4','*C5','*C6','*C7','*C8','*D2','*D4','*D7','*E4','*F4','*G4' ,'*H4')>0,
                   'Warranty',
                   'Order'
                )
             )
          )
       )
    ) as SROType,
    "fs_sro cust_num" as cust_num,
    "fs_sro description" as sro_description,
    Date(Floor(Num("fs_sro CreateDate"))) as CurrencyDate
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro.qvd]
(qvd);

Left Join(SROLog)
LOAD
    Site as %Site,
    CurrencyDate,
    Conv_USD,
    Conv_GBP
FROM [lib://QV-ProductionData/Data/Final Stage/DailyCurrencyRates.qvd]
(qvd);



SROSorted:
Load
   SiteCd & '-' &
   logsource & '-' &
   sro_num & '-' &
   sro_line & '-' &
   sro_oper /*& '-' &
   trans_num*/ as UnitOfWork,
   //AutoNumber(RowNo(),SiteCd & '-' & logsource & '-' & sro_num & '-' & sro_line & '-' & sro_oper & '-' & trans_num) as MyTransNum,
   RowNo() as EditTransNo,
   if(Len(Trim(itemcode))=0,previous(itemcode),itemcode) as FilledItem,
   * Resident SROLog
Order by 
   SiteCd,
   logsource,
   sro_num,
   sro_line,
   sro_oper,
   trans_num,
   type desc,
   activity_date,
   activity_seq;

drop table SROLog;


SROSorted2:
Load *,
   %ForecastCustomerKeyTemp & '-' & cust_num as %ForecastCustomerKey,
   1 as [Booking Transaction Count],
   [Booking Amount Ordered(CUST)] as [Booking Amount Ordered(LOCAL)],
   [Booking Amount Ordered(CUST)] * [Conv_USD] as [Booking Amount Ordered(USD)],
   [Booking Amount Ordered(CUST)] * [Conv_GBP] as [Booking Amount Ordered(GBP)],
   [Booking Cost Amount(CUST)] as [Booking Cost Amount(LOCAL)],
   [Booking Cost Amount(CUST)] * [Conv_USD] as [Booking Cost Amount(USD)],
   [Booking Cost Amount(CUST)] * [Conv_GBP] as [Booking Cost Amount(GBP)],
   Null() as "Booking Total Sales Tax Amount(CUST)",
   Null() as "Booking Total Sales Tax Amount(LOCAL)",
   Null() as "Booking Total Sales Tax Amount(GBP)",
   Null() as "Booking Total Sales Tax Amount(USD)";
Load 
//   RowNo() as SecondPassTransNo,
   *,
   If(UnitOfWork <> Previous(UnitOfWork),extprice,-Previous(extprice) + extprice) as [Booking Amount Ordered(CUST)],
   If(UnitOfWork <> Previous(UnitOfWork),extcost,-Previous(extcost) + extcost) as [Booking Cost Amount(CUST)],
   If(UnitOfWork <> Previous(UnitOfWork),qty_chg,-Previous(qty_chg) + qty_chg) as [Booking Quantity Sold]
Resident SROSorted;
// Order by 
//    SiteCd,
//    logsource,
//    sro_num,
//    sro_line,
//    sro_oper,
//    FilledItem,
//    type desc,
//    trans_num,
//    activity_date,
//    activity_seq;

Drop Table SROSorted;

Store 
   [%Site],
   [%KahlixCode],
   [%WarehouseKey],
   [%Order],
   [%OrderItem],
   [%Item],
   [%BillToCustomerId],
   [%ShipToCustomerId],
   [%Salesman],
   [%SalespersonKey],
   [%RegionKey],
   MasterDate,
   FactType,
   [%ForecastVersion],
   [%ForecastPeriod],
   %ForecastCustomerKey,
   [Booking Transaction Count],
   [Booking Quantity Sold],
   [Booking Amount Ordered(LOCAL)],
   [Booking Amount Ordered(CUST)],
   [Booking Amount Ordered(USD)],
   [Booking Amount Ordered(GBP)],
   [Booking Cost Amount(LOCAL)],
   [Booking Cost Amount(CUST)],
   [Booking Cost Amount(USD)],
   [Booking Cost Amount(GBP)],
   [Booking Total Sales Tax Amount(CUST)],
   [Booking Total Sales Tax Amount(LOCAL)],
   [Booking Total Sales Tax Amount(GBP)],
   [Booking Total Sales Tax Amount(USD)]
From SROSorted2 into [lib://QV-ProductionData/Data/Final Stage/SRO_BookingsFact.qvd](qvd);
   
Drop table SROSorted2;

End Sub;



Sub QuotesProcess

call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteKahlixMap')

QuoteFact:
Load 
	'Quotes' 			As FactType,
	%Site,
    %KahlixCode,
    %WarehouseKey,
	[OrderType],
	[%OrderNumber],
	[%ShipToCustomerId],
	[%BillToCustomerId],
	%Salesman,
    %SalespersonKey,
    %RegionKey, 
	OrderStatus,
	Conv_CUST,
	MasterDate,
	[Quote Receipt Date],
    [Discount Percent],
	If(OrderStatus = 'Q',NetWorkDays([Quote Receipt Date], MasterDate) - 1) As [DaysToQuote]; 			
LOAD 
	SiteCd 																	As %Site,
    ApplyMap('SiteKahlixMap',SiteCd,Null()) 								as %KahlixCode,
    SiteCd & '-' & whse                                                     as %WarehouseKey,
	type 																	As [OrderType],
	'Order-' &SiteCd & '-' & co_num 										As [%OrderNumber],
        SiteCd & '-' & If(Len(trim(cust_num))=0, 'Prospect-' & prospect_id,cust_num & '-' & cust_seq)          As [%ShipToCustomerId],
	//SiteCd & '-' & cust_num & '-' & cust_seq 								As [%ShipToCustomerId], 
        SiteCd & '-' & If(Len(trim(cust_num))=0, 'Prospect-' & prospect_id,cust_num & '-0')                    As [%BillToCustomerId],
	//SiteCd & '-' & cust_num & '-0' 									As [%BillToCustomerId],
	If(Len(Trim(slsman))=0,SiteCd & '-Undefined',SiteCd & '-' & slsman) 	As %Salesman,
    "slsman" as %SalespersonKey,
    ApplyMap('CustomerRegionMap',SiteCd & '-' & [cust_num] & '-' & "cust_seq",Null()) as %RegionKey,
	stat 																	As OrderStatus,
	exch_rate 																As Conv_CUST,
	Date(Floor(Num(order_date))) 											As MasterDate,
	Date(Floor(Num(If(Len(trim(datefld))=0,order_date,datefld)))) 			As [Quote Receipt Date],
    disc/100																	As [Discount Percent]
FROM [$(ENV_QV_RAW_STAGE)co.qvd](qvd)
Where type = 'E';		
	
Inner Join(QuoteFact)
LOAD 
	SiteCd 													 				As %Site,
    'Order-' &SiteCd & '-' & co_num 										As [%OrderNumber],
	'Order-' &SiteCd & '-' & co_num  & '-' & co_line & '-' & co_release  	As [%OrderItem],
	'Item-' & SiteCd & '-' & item 										 	As [%Item],
	If(Len(Trim(Uf_NewBusiness))=0,'Undefined', Uf_NewBusiness) 			As NewBusiness,
	qty_ordered 												 			As QuantityQuoted,
	price 														 			As Price,
    disc/100    															As [Line Discount Percent]
FROM [$(ENV_QV_RAW_STAGE)coitem.qvd](qvd);
		
DaysToQuoteTargets:
Load 
	NewBusiness,
    BeginRange,
    EndRange,
    Dual([y/n],MeetsTarget)  As MeetsTarget 
From [$(ENV_SHAREPOINT_SALES)DaysToQuoteTargets.xlsx]
(ooxml, embedded labels, table is [Days To Quote Targets]);
		
		
Left Join(QuoteFact)
IntervalMatch(DaysToQuote, NewBusiness)
Load
	BeginRange,
    EndRange,
    NewBusiness 
Resident DaysToQuoteTargets;
		
Left Join(QuoteFact)
Load
	NewBusiness,
	BeginRange,
	EndRange,
	MeetsTarget As MeetsDaysToQuoteTarget
Resident DaysToQuoteTargets;
			
Drop Table DaysToQuoteTargets;
Drop Fields BeginRange, EndRange from QuoteFact;
		
        
Left Join(QuoteFact)
LOAD 
	Site 							As %Site, 
	Date(floor(Num(CurrencyDate))) 	As MasterDate,
	Conv_LOCAL, 
	Conv_USD, 
	Conv_GBP
FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd);
		
	
QuoteFact_Temp:
Load 
	FactType,
	%Site,
    [%KahlixCode],
    [%WarehouseKey],
	%OrderNumber,
	%OrderItem,
	%Item,
	[%ShipToCustomerId], 
	[%BillToCustomerId],
	%Salesman,
    %SalespersonKey,
    %RegionKey, 
	MasterDate,
	[OrderType],
	[Quote Receipt Date],
	DaysToQuote,
    NewBusiness,
	MeetsDaysToQuoteTarget,	
	1 																		as [Quote Line Count],	
	QuantityQuoted 															as [Estimated Quantity],
    (1-[Line Discount Percent])*Price as [Estimated Price(CUST)],
	((1-[Line Discount Percent])*Price)/Conv_CUST as [Estimated Price(LOCAL)],
    (((1-[Line Discount Percent])*Price)/Conv_CUST) * Conv_GBP	as [Estimated Price(GBP)],
    (((1-[Line Discount Percent])*Price)/Conv_CUST) * Conv_USD	as [Estimated Price(USD)],
    ((1-[Line Discount Percent])*Price) * QuantityQuoted as [Estimated Amount(CUST)],
	(((1-[Line Discount Percent])*Price)/Conv_CUST) * QuantityQuoted as [Estimated Amount(LOCAL)],
    (((1-[Line Discount Percent])*Price)/Conv_CUST) * Conv_GBP * QuantityQuoted as [Estimated Amount(GBP)],
    (((1-[Line Discount Percent])*Price)/Conv_CUST) * Conv_USD * QuantityQuoted as [Estimated Amount(USD)]
Resident QuoteFact;
		
Drop Table QuoteFact;
Rename Table QuoteFact_Temp To QuoteFact;
  
  
Store QuoteFact into [$(ENV_QV_FINAL_STAGE)Global_QuoteFact.qvd](qvd);
Drop Table QuoteFact;

End Sub;



Sub OpenOrdersProcess

call BuildMappingTable('CustomerRegionMap')
call BuildMappingTable('SiteKahlixMap')
call BuildMappingTable('CustomerScrapMap')


// on months past 
OpenOrderFact_TEMP:
Load
	'Backlog' 																as FactType,
	SiteCd 																	as %Site,
    ApplyMap('SiteKahlixMap',SiteCd,Null()) 								as %KahlixCode,
    SiteCd & '-' & whse                                                     as %WarehouseKey,
    type 																	as [OrderType],
	'Order-'&SiteCd & '-' & "co_num" 										as %Order,
    SiteCd & '-' & cust_num & '-' & cust_seq 								as [%ShipToCustomerId], 
    SiteCd & '-' & cust_num & '-0' 											as [%BillToCustomerId],
    If(Len(Trim(slsman))=0,SiteCd & '-Undefined',SiteCd & '-' & slsman) 	as %Salesman,
    "slsman" as %SalespersonKey,
    ApplyMap('CustomerRegionMap',SiteCd & '-' & [cust_num] & '-' & "cust_seq",Null()) as %RegionKey,
    stat 																	as OrderStatus,
	exch_rate 																as Conv_CUST,
    disc																	as [Discount Percent],
	Date(Floor(Num(order_date))) 											as [Order Date]
From [$(ENV_QV_RAW_STAGE)co.qvd](qvd)
Where type <> 'E';
//And ApplyMap('CustomerScrapMap', SiteCd & '-' & cust_num, 0) = 0;

Inner Join(OpenOrderFact_TEMP)
Load
	SiteCd 													 				As %Site,
    'Order-' &SiteCd & '-' & co_num 										As %Order,
  	'Order-' &SiteCd & '-' & co_num  & '-' & co_line & '-' & co_release 	As %OrderItem,
	'Item-' & SiteCd & '-' & item 										 	As %Item,
    Date(Floor(Num("due_date"))) 											as MasterDate,
    qty_ordered 															as [Backlog Quantity Ordered],
    qty_shipped 															as [Backlog Quantity Shipped],
    qty_ordered - qty_shipped 												as [Backlog Remaining Units],
    price_conv,
    cost * (qty_ordered - qty_shipped) 										as [Backlog Extended Total Cost],
    cost 																	as [Backlog Unit Cost],
	matl_cost 																as [Backlog Unit Material Cost],
	lbr_cost 																as [Backlog Unit Labor Cost],
	Rangesum(fovhd_cost, vovhd_cost) 										as [Backlog Unit Overhead Cost],
	fovhd_cost 																as [Backlog Unit Fixed Overhead Cost],
	vovhd_cost 																as [Backlog Unit Variable Overhead Cost],
	out_cost 																as [Backlog Unit Outside Cost],
	1 																		as [Backlog Order Line Counter],
	If((match(Uf_HoldCode,'P','Y') >= 1) Or Len(Trim(Uf_HoldCode))=0,If( Floor(Num("due_date")) < num('$(vToday)'), Dual('Yes',1),Dual('No',0)),Dual('No',0)) as [Backlog IsLate],
    If(match(Uf_HoldCode,'P','Y') >= 1,1,0) as [Backlog Is Scheduled],
    If(match(Uf_HoldCode,'P','Y') >= 1,0,1) as [Backlog Is In Queue],
	If( Date(Floor(Num("promise_date"))) < num('$(vToday)'), Dual('Yes',1),Dual('No',0)) as [Backlog IsPromisePast]
FROM [$(ENV_QV_RAW_STAGE)coitem.qvd](qvd)
Where stat = 'O';

Left Join(OpenOrderFact_TEMP)
LOAD Date(Floor(Num(CurrencyDate))) as [Order Date], 
     Site as %Site, 
     Conv_LOCAL, 
     Conv_USD, 
     Conv_GBP
FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd);


OpenOrderFact:
LOAD  
     FactType, 
     %Site,
     [%KahlixCode],
     [%WarehouseKey],
     %Order,
     %OrderItem,
     %Item,
     [%ShipToCustomerId], 
     [%BillToCustomerId],
     %Salesman,
     %SalespersonKey,
     %RegionKey,    
     MasterDate, 
     [OrderType],
     [Backlog IsLate], 
     [Backlog IsPromisePast],
     [Backlog Is Scheduled],
     [Backlog Is In Queue],
     [Backlog Order Line Counter],
     [Backlog Remaining Units] 																as [Backlog Remaining Units],
     
     [Backlog Unit Cost] * ([Backlog Remaining Units]) 										as [Backlog Extended Total Cost(LOCAL)],
     [Backlog Unit Cost] * ([Backlog Remaining Units])*Conv_CUST							as [Backlog Extended Total Cost(CUST)],
     [Backlog Unit Cost] * ([Backlog Remaining Units])*Conv_GBP								as [Backlog Extended Total Cost(GBP)],
     [Backlog Unit Cost] * ([Backlog Remaining Units])*Conv_USD								as [Backlog Extended Total Cost(USD)],
     
     [Backlog Unit Cost]																	as [Backlog Unit Cost(LOCAL)],
     [Backlog Unit Cost]* Conv_CUST															as [Backlog Unit Cost(CUST)],
     [Backlog Unit Cost]* Conv_GBP															as [Backlog Unit Cost(GBP)],
     [Backlog Unit Cost]* Conv_USD															as [Backlog Unit Cost(USD)],
     
     [Backlog Unit Material Cost]															as [Backlog Unit Material Cost(LOCAL)],
     [Backlog Unit Material Cost]*Conv_CUST													as [Backlog Unit Material Cost(CUST)],
     [Backlog Unit Material Cost]*Conv_GBP													as [Backlog Unit Material Cost(GBP)],
     [Backlog Unit Material Cost]*Conv_USD													as [Backlog Unit Material Cost(USD)],
     
	 [Backlog Unit Labor Cost]																as [Backlog Unit Labor Cost(LOCAL)],
     [Backlog Unit Labor Cost]*Conv_CUST													as [Backlog Unit Labor Cost(CUST)],
     [Backlog Unit Labor Cost]*Conv_GBP														as [Backlog Unit Labor Cost(GBP)],
     [Backlog Unit Labor Cost]*Conv_USD														as [Backlog Unit Labor Cost(USD)],
     
	 [Backlog Unit Overhead Cost]															as [Backlog Unit Overhead Cost(LOCAL)],
     [Backlog Unit Overhead Cost]*Conv_CUST													as [Backlog Unit Overhead Cost(CUST)],
     [Backlog Unit Overhead Cost]*Conv_GBP													as [Backlog Unit Overhead Cost(GBP)],
     [Backlog Unit Overhead Cost]*Conv_USD													as [Backlog Unit Overhead Cost(USD)],
     
	 [Backlog Unit Fixed Overhead Cost]														as [Backlog Unit Fixed Overhead Cost(LOCAL)],
     [Backlog Unit Fixed Overhead Cost]*Conv_CUST											as [Backlog Unit Fixed Overhead Cost(CUST)],
     [Backlog Unit Fixed Overhead Cost]*Conv_GBP											as [Backlog Unit Fixed Overhead Cost(GBP)],
     [Backlog Unit Fixed Overhead Cost]*Conv_USD											as [Backlog Unit Fixed Overhead Cost(USD)],
     		
	 [Backlog Unit Variable Overhead Cost]													as [Backlog Unit Variable Overhead Cost(LOCAL)],
     [Backlog Unit Variable Overhead Cost]*Conv_CUST										as [Backlog Unit Variable Overhead Cost(CUST)],
     [Backlog Unit Variable Overhead Cost]*Conv_GBP											as [Backlog Unit Variable Overhead Cost(GBP)],
     [Backlog Unit Variable Overhead Cost]*Conv_USD											as [Backlog Unit Variable Overhead Cost(USD)],
     
	 [Backlog Unit Outside Cost]															as [Backlog Unit Outside Cost(LOCAL)], 
     [Backlog Unit Outside Cost]*Conv_CUST													as [Backlog Unit Outside Cost(CUST)], 
     [Backlog Unit Outside Cost]*Conv_GBP													as [Backlog Unit Outside Cost(GBP)], 
     [Backlog Unit Outside Cost]*Conv_USD													as [Backlog Unit Outside Cost(USD)], 
     								
     (1-[Discount Percent])*((price_conv * [Backlog Remaining Units])/Conv_CUST) 			as [Backlog Remaining Value(LOCAL)],
     (1-[Discount Percent])*((price_conv * [Backlog Remaining Units])) 						as [Backlog Remaining Value(CUST)],
     (1-[Discount Percent])*((price_conv * [Backlog Remaining Units])/Conv_CUST)*Conv_GBP 	as [Backlog Remaining Value(GBP)],
     (1-[Discount Percent])*((price_conv * [Backlog Remaining Units])/Conv_CUST)*Conv_USD	as [Backlog Remaining Value(USD)],
     	
     (1-[Discount Percent])*((price_conv * [Backlog Quantity Ordered])/Conv_CUST)  			as [Backlog Order Value(LOCAL)],
     (1-[Discount Percent])*((price_conv * [Backlog Quantity Ordered]))  					as [Backlog Order Value(CUST)],
     (1-[Discount Percent])*((price_conv * [Backlog Quantity Ordered])/Conv_CUST)*Conv_GBP 	as [Backlog Order Value(GBP)],
     (1-[Discount Percent])*((price_conv * [Backlog Quantity Ordered])/Conv_CUST)*Conv_USD 	as [Backlog Order Value(USD)]
Resident OpenOrderFact_TEMP;

Drop Table OpenOrderFact_TEMP;

Store OpenOrderFact into [$(ENV_QV_FINAL_STAGE)Global_OpenOrderFact.qvd](qvd);
Drop Table OpenOrderFact;

End Sub;



Sub InvoiceDimProcess

CALL BuildMappingTable('TERMS_CODE_MAP')
CALL BuildMappingTable('SHIP_CODE_MAP')
CALL BuildMappingTable('SHIP_CODE_TRANSPORT_MAP')
call BuildMappingTable('SiteKahlixMap')


InvoiceDim:
LOAD
    SiteCd & '-' & "Invoice Header Number" & '-' & "Invoice Header inv_seq" as %Invoice,
    "Invoice Header Number" as [Invoice Number],
    "Invoice Header inv_seq" as [Invoice Sequence],
    "Invoice Header Invoice Date" as [Invoice Date],
    "Invoice Header Terms Code" as [Invoice Terms Code],
    ApplyMap('TERMS_CODE_MAP',"Invoice Header Terms ID",'Unknown') as [Invoice Terms],
    
    "Invoice Header ship_code" as [Invoice Ship Code],
    Applymap('SHIP_CODE_MAP',SiteCd & '-' & "Invoice Header ship_code",'Unknown') as [Invoice Ship Code Desc],
    Applymap('SHIP_CODE_TRANSPORT_MAP',SiteCd & '-' & "Invoice Header ship_code",'Unknown') as [Invoice Ship Code Transport Desc],
    "Invoice Header cust_po" as [Invoice Customer PO],
    "Invoice Header Ship Date" as [Invoice Ship Date],
    "Invoice Header state" as [Invoice State],
    "Invoice Header bill_type" as [Invoice Bill Type],
    "Invoice Header disc" as [Invoice Discount]
    //"Invoice Header tax_code1",
    //"Invoice Header tax_code2",
    //"Invoice Header Tax Date" 
FROM [$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
(qvd);


Store InvoiceDim into [$(ENV_QV_FINAL_STAGE)SRO_MFG_InvoiceDim.qvd](qvd);
Drop Table InvoiceDim;

End Sub;



Sub InvoiceLineDimProcess

InvoiceLineDim:
LOAD
    PrimaryKey as %InvoiceItem,
    "Invoice Line ID" as [Invoice Line Number],
    "invoice Line disc" as [Invoice Line Discount],
    "invoice Line cost" as [Invoice Line Unit Cost],
    "invoice Line price" as [Invoice Line Unit Price]
FROM [lib://QV-ProductionData/Data/Raw Stage/inv_item.qvd]
(qvd);

Store InvoiceLineDim into [$(ENV_QV_FINAL_STAGE)SRO_MFG_InvoiceLineDim.qvd](qvd);
Drop Table InvoiceLineDim;

End Sub;



Sub MFGInvoiceDetailsProcess

		call BuildMappingTable('INVOICE_DISC_MAP')
        call BuildMappingTable('SiteKahlixMap')
        
        InvoiceDetail:
        Load
            'Mfg Invoice Detail' as FactType,
            %Site,
            ApplyMap('SiteKahlixMap',%Site,Null()) as %KahlixCode,
            %WarehouseKey,
            %ShipToCustomerId,
            %BillToCustomerId,
            %Salesman,
            %SalespersonKey,
            %RegionKey, 
            %Invoice,
            %Order,
            MasterDate,
            [Exchange Rate],
            Conv_USD,
            Conv_GBP,
            [Currency Code]
        From [$(ENV_QV_FINAL_STAGE)InvoiceHeaderFact.qvd](qvd);
        
        inner Join(InvoiceDetail)
        LOAD
            //Join Fields
             "Invoice Line Invoice ID" & '-' & "invoice Line inv_seq" as %Invoice,
            // End of Join Fields
            PrimaryKey as %InvoiceItem,
            SiteCd & '-' & "invoice Line co_num" & '-' & "invoice Line co_line" & '-' & "invoice Line co_release" as %OrderItem,
            'Item-' & SiteCd & '-' & "invoice Line item" as %Item,
            [invoice Line disc]/100 as [Invoice Item Discount Percent],
            "invoice Line qty_invoiced" as [Invoice Item Quantity Sold],
            "invoice Line qty_invoiced" as [Invoice Item Quantity Biled],
            "invoice Line cost" * "invoice Line qty_invoiced" as [Invoice Item Extended Cost(LOCAL)],
            "invoice Line price" * "invoice Line qty_invoiced"  as [Invoice Item Extended Price(CUST)]
            //("invoice Line price" * "invoice Line qty_invoiced") * (1 - (If("invoice Line disc"<> 0,("invoice Line disc"),0)/100)) * (1 - (ApplyMap('INVOICE_DISC_MAP',"Invoice Line Invoice ID",0)/100))  as [Invoice Item Extended Price(CUST)]
       FROM [$(ENV_QV_RAW_STAGE)inv_item.qvd]
       (qvd);
        
        
        
        inner Join(InvoiceDetail)
        Load
           [%InvoiceItem],
           
           [Invoice Item Extended Price(CUST)]/[Exchange Rate] as [Invoice Item Extended Price(LOCAL)],
           ([Invoice Item Extended Price(CUST)]/[Exchange Rate]) * Conv_GBP as [Invoice Item Extended Price(GBP)],
           ([Invoice Item Extended Price(CUST)]/[Exchange Rate]) * Conv_USD as [Invoice Item Extended Price(USD)],
           
           [Invoice Item Extended Cost(LOCAL)],
           [Invoice Item Extended Cost(LOCAL)] * [Exchange Rate] as [Invoice Item Extended Cost(CUST)],
           [Invoice Item Extended Cost(LOCAL)] * Conv_GBP as [Invoice Item Extended Cost(GBP)],
           [Invoice Item Extended Cost(LOCAL)] * Conv_USD as [Invoice Item Extended Cost(USD)]
        Resident InvoiceDetail;


       Store InvoiceDetail into [$(ENV_QV_FINAL_STAGE)MFGInvoiceDetailFact.qvd](qvd);
       Drop table InvoiceDetail;
       
End Sub;



Sub ItemWarehouseFactProcess

CurrentWarehouseInventory:
LOAD
    PrimaryKey,
    SiteCd as %Site,
    'Item-' & SiteCd & '-' & "itemwhse item" as %Item,
    SiteCd & '-' & "itemwhse whse"		 as %Warehouse,
    "itemwhse qty_on_hand" as "Quantity On Hand",    
    "itemwhse qty_wip" as "Quantity WIP",
    "itemwhse qty_alloc_co" as "Quantity Allocated To Customer Orders",
    "itemwhse qty_ordered"as "Quantity Ordered",
    
    
    
    "itemwhse qty_on_hand" * "itemwhse unit_cost" as "On Hand Amount(LOCAL)",    
    "itemwhse qty_wip" * "itemwhse unit_cost" as "WIP Amount(LOCAL)",
    "itemwhse qty_alloc_co" * "itemwhse unit_cost" as "Amount Allocated To Customer Orders(LOCAL)",
    "itemwhse qty_ordered" * "itemwhse unit_cost" as "Amount Ordered(LOCAL)",
    
    
     "itemwhse unit_cost" as "Unit Cost"
    
//     "itemwhse cycle_freq",
//     "itemwhse last_cycle",
//     "itemwhse cycle_flag",
//     "itemwhse cycle_type",



//     "itemwhse qty_reorder" as "Quantity Ordered",     
//     "itemwhse alloc_trn",
//     "itemwhse qty_trans",
    
//     "itemwhse qty_mrb",
//     "itemwhse qty_sold_ytd",
//     "itemwhse qty_pur_ytd",
//     "itemwhse trn_in_ytd",
//     "itemwhse trn_out_ytd",

//     "itemwhse sales_ytd",
//     "itemwhse sales_ptd",

//     "itemwhse cnt_in_proc",

//     "itemwhse phy_inv_qty",
//     "itemwhse phy_inv_dte",
//     "itemwhse qty_rsvd_co",
//     "itemwhse replen_po_num",
//     "itemwhse replen_ps_num",
//     "itemwhse replen_trn_num",
//     "itemwhse NoteExistsFlag",
//     "itemwhse RecordDate",
//     "itemwhse RowPointer",
//     "itemwhse CreatedBy",
//     "itemwhse UpdatedBy",
//     "itemwhse CreateDate",
//     "itemwhse InWorkflow",
//     "itemwhse fs_p_m_t_code",
//     "itemwhse fs_supply_whse",
//     "itemwhse fs_vend_num",
//     "itemwhse fs_order_min",
//     "itemwhse fs_order_max",
//     "itemwhse fs_order_mult",
//     "itemwhse fs_days_supply",
//     "itemwhse fs_consumable",
//     "itemwhse fs_drp_low_level",
//     "itemwhse fs_qty_for_rental",
    
//     "itemwhse lst_u_cost",
//     "itemwhse avg_u_cost",
//     "itemwhse asm_setup",
//     "itemwhse asm_run",
//     "itemwhse asm_matl",
//     "itemwhse asm_tool",
//     "itemwhse asm_fixture",
//     "itemwhse asm_other",
//     "itemwhse asm_fixed",
//     "itemwhse asm_var",
//     "itemwhse asm_outside",
//     "itemwhse comp_setup",
//     "itemwhse comp_run",
//     "itemwhse comp_matl",
//     "itemwhse comp_tool",
//     "itemwhse comp_fixture",
//     "itemwhse comp_other",
//     "itemwhse comp_fixed",
//     "itemwhse comp_var",
//     "itemwhse comp_outside",
//     "itemwhse sub_matl",
//     "itemwhse cur_u_cost",
//     "itemwhse unit_mat_cost",
//     "itemwhse unit_duty_cost",
//     "itemwhse unit_freight_cost",
//     "itemwhse unit_brokerage_cost",
//     "itemwhse unit_insurance_cost",
//     "itemwhse unit_loc_frt_cost",
//     "itemwhse cur_mat_cost",
//     "itemwhse cur_duty_cost",
//     "itemwhse cur_freight_cost",
//     "itemwhse cur_brokerage_cost",
//     "itemwhse cur_insurance_cost",
//     "itemwhse cur_loc_frt_cost",
//     "itemwhse matl_cost",
//     "itemwhse lbr_cost",
//     "itemwhse fovhd_cost",
//     "itemwhse vovhd_cost",
//     "itemwhse out_cost",
//     "itemwhse cur_matl_cost",
//     "itemwhse cur_lbr_cost",
//     "itemwhse cur_fovhd_cost",
//     "itemwhse cur_vovhd_cost",
//     "itemwhse cur_out_cost",
//     "itemwhse avg_matl_cost",
//     "itemwhse avg_lbr_cost",
//     "itemwhse avg_fovhd_cost",
//     "itemwhse avg_vovhd_cost",
//     "itemwhse avg_out_cost",
//     "itemwhse min_consignment_qty",
//     "itemwhse max_consignment_qty",
//     "itemwhse qty_contained",
//     "itemwhse Uf_Cook_Last_Mfgdate",
//     "itemwhse Uf_Cook_Last_MfgIssue",
//     "itemwhse Uf_Cook_Last_MfgSold",
//     "itemwhse Uf_Cook_Last_PurDate",
//     "itemwhse Uf_Cook_ItemHigh",
//     "itemwhse Uf_Cook_ItemLow",
//     "itemwhse UfMaxToOrder",
//     "itemwhse aps_sourcing_priority",
//     "itemwhse reserve_for_cust_num",
//     "itemwhse reserve_for_wc",
//     "itemwhse Uf_Cook_Last_mfgdate"
FROM [lib://QV-ProductionData/Data/Raw Stage/itemwhse.qvd]
(qvd);

Left Join (CurrentWarehouseInventory)
Load
	Site as %Site,
	Conv_USD,
	Conv_GBP
FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd](qvd)
Where CurrencyDate = today();

Left Join (CurrentWarehouseInventory)
Load PrimaryKey,
	"On Hand Amount(LOCAL)"* Conv_USD as "On Hand Amount(USD)",    
    "WIP Amount(LOCAL)"* Conv_USD as "WIP Amount(USD)",
    "Amount Allocated To Customer Orders(LOCAL)"* Conv_USD as "Amount Allocated To Customer Orders(USD)",
    "Amount Ordered(LOCAL)"* Conv_USD as "Amount Ordered(USD)",
    "On Hand Amount(LOCAL)"* Conv_GBP as "On Hand Amount(GBP)",    
    "WIP Amount(LOCAL)"* Conv_GBP as "WIP Amount(GBP)",
    "Amount Allocated To Customer Orders(LOCAL)"* Conv_GBP as "Amount Allocated To Customer Orders(GBP)",
    "Amount Ordered(LOCAL)"* Conv_GBP as  "Amount Ordered(GBP)"
Resident CurrentWarehouseInventory;

Store CurrentWarehouseInventory into [$(ENV_QV_FINAL_STAGE)CurrentWarehouseInventory.qvd](qvd);
Drop table CurrentWarehouseInventory;

End Sub;



Sub OWSProcess
/********************* Material ****************************************/

MATLInit:
LOAD
    sro_num,
    sro_line,
    sro_oper,
    extcost,
    item,
    matl_qty,
    post_date,
    trans_num,
    "type",
    DATE(FLOOR(CreateDate)) AS CreateDate
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_matl.qvd]
(qvd)
;


LEFT JOIN (MATLInit)
LOAD
//    PrimaryKey,
   SiteCd,
    "fs_sro cust_num" AS cust_num,
    "fs_sro cust_seq" AS cust_seq,
    "fs_sro description",
    "fs_sro sro_num" as sro_num,
    "fs_sro sro_stat",
    "fs_sro whse" AS whse
FROM [lib://QV-DevelopmentData/Data/Raw Stage/fs_sro.qvd]
(qvd)
;

LEFT JOIN(MATLInit)
LOAD
    description,
    sro_line,
    sro_line AS fs_sro_line_sro_line,
    sro_num,
    CreateDate AS fs_sro_line_CreateDate,
    UfSroLineQty
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_line.qvd]
(qvd)
;


LEFT JOIN(MATLInit)
LOAD
    "fs_sro_oper description",
    "fs_sro_oper sro_line" AS sro_line,
    "fs_sro_oper sro_num" AS sro_num,
    "fs_sro_oper sro_oper" AS sro_oper
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_oper.qvd]
(qvd);

LEFT JOIN(MATLInit)
LOAD
    "Item description",
    "Item Number" AS item
FROM [lib://QV-ProductionData/Data/Raw Stage/item.qvd]
(qvd);


LEFT JOIN(MATLInit)
LOAD
    cust_num,
    cust_seq,
    name AS custaddr_name
FROM [lib://QV-ProductionData/Data/Raw Stage/custaddr.qvd]
(qvd);

NOCONCATENATE
OWS:
LOAD *,
     'SRO_MATL' AS ReportGrouping
RESIDENT MATLInit
WHERE (("type" = 'A') AND ("fs_sro sro_stat" = 'C' OR "fs_sro sro_stat" = 'O') AND ((DATE(FLOOR(CreateDate))) >= (DATE('01/01/' & (YEAR(TODAY()) - 1)))))
;

DROP TABLE MATLInit;

/********************* Material ****************************************/




/********************* Miscellaneous************************************/

MISCInit:  
LOAD
    extcost,
    misc_code,
    post_date,
    qty,
    sro_line,
    sro_num,
    sro_oper,
    trans_num,
    "type",
    CreateDate
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_misc.qvd]
(qvd);

LEFT JOIN (MISCInit)
LOAD
    SiteCd,
    "fs_sro cust_num",
    "fs_sro cust_num" AS cust_num,
    "fs_sro cust_seq" AS cust_seq,
    "fs_sro description",
    "fs_sro sro_num" AS sro_num,
//     "fs_sro sro_seq",
    "fs_sro sro_stat",
    "fs_sro whse" AS whse
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro.qvd]
(qvd) 
;

LEFT JOIN (MISCInit)
LOAD
    description,
    sro_line,
    sro_line AS fs_sro_line_sro_line,
    sro_num,
    CreateDate AS fs_sro_line_CreateDate,
    UfSroLineQty
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_line.qvd]
(qvd);

LEFT JOIN(MISCInit)
LOAD
    "fs_sro_oper description",
    "fs_sro_oper sro_oper" AS sro_oper,
    "fs_sro_oper sro_line" AS sro_line,
    "fs_sro_oper sro_num" AS sro_num
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_oper.qvd]
(qvd);

LEFT JOIN(MISCInit)
LOAD
    "fs_misc_code description",
    "fs_misc_code misc_code" AS misc_code
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_misc_code.qvd]
(qvd);

LEFT JOIN(MISCInit)
LOAD
    cust_num,
    cust_seq,
    name AS custaddr_name    
FROM [lib://QV-ProductionData/Data/Raw Stage/custaddr.qvd]
(qvd);


NOCONCATENATE
MISCTemp:
LOAD *,
     'SRO_MISC' AS ReportGrouping
RESIDENT MISCInit
WHERE (("type" = 'A') AND ("fs_sro sro_stat" = 'C' OR "fs_sro sro_stat" = 'O') AND ((DATE(FLOOR(CreateDate))) >= (DATE('01/01/' & (YEAR(TODAY()) - 1)))))
;

DROP TABLE MISCInit;



CONCATENATE(OWS)
LOAD *
RESIDENT MISCTemp;

DROP TABLE MISCTemp;

/********************* Miscellaneous************************************/



/********************* Labor *******************************************/
LABORInit:
LOAD
    extcost,
    hrs_worked,
    sro_num,
    sro_line,
    sro_oper,
    trans_num,
    "type",
    work_code,
    CreateDate
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_labor.qvd]
(qvd) 
;

LEFT JOIN (LABORInit)
LOAD
//     PrimaryKey,
//     SiteCd,
    "fs_sro_oper description",
    "fs_sro_oper sro_line" AS sro_line,
    "fs_sro_oper sro_num" AS sro_num,
    "fs_sro_oper sro_oper" AS sro_oper
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_oper.qvd]
(qvd);
 
LEFT JOIN (LABORInit) 
LOAD
    description,
    sro_line,
    sro_line AS fs_sro_line_sro_line,
    sro_num,
    CreateDate AS fs_sro_line_CreateDate,
    UfSroLineQty
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_line.qvd]
(qvd);


LEFT JOIN(LABORInit)
LOAD
    SiteCd,
    "fs_sro cust_num",
    "fs_sro cust_num" AS cust_num,
    "fs_sro cust_seq" AS cust_seq,
    "fs_sro description",
    "fs_sro sro_num" AS sro_num,
    "fs_sro sro_stat",
    "fs_sro whse" AS whse
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro.qvd]
(qvd) 
;


LEFT JOIN(LABORInit)
LOAD
    "fs_work_code description",
    "fs_work_code work_code" AS work_code
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_work_code.qvd]
(qvd);


LEFT JOIN(LABORInit)
LOAD
    cust_num,
    cust_seq,
    name
FROM [lib://QV-ProductionData/Data/Raw Stage/custaddr.qvd]
(qvd);

CONCATENATE(OWS)
LOAD *,
     'SRO_LABOR' AS ReportGrouping
RESIDENT LABORInit
WHERE (("fs_sro sro_stat" = 'C' OR "fs_sro sro_stat" = 'O') AND ("type" = 'A' AND DATE(FLOOR(CreateDate)) >= DATE('01/01/' & (YEAR(TODAY()) - 1))) AND "type" = 'A') 
;

DROP TABLE LABORInit;
/********************* Labor *******************************************/



/********************* Job Data ****************************************/
JobTemp:
LOAD
//     PrimaryKey,
    SiteCd,
    "job site_ref",
    "type",
    job,
    suffix,
    cust_num,
    est_suf,
    item,
    qty_complete,
    qty_scrapped,
    stat,
    lst_trx_date,
    low_level,
    wip_complete,
    revision,
    whse,
    ps_num,
    description,
    CreateDate
FROM [lib://QV-ProductionData/Data/Raw Stage/job.qvd]
(qvd)
;

LEFT JOIN(JobTemp)
LOAD
    job,
    suffix,
    NoteExistsFlag,
    CreateDate AS job_sch_CreateDate
FROM [lib://QV-ProductionData/Data/Raw Stage/job_sch.qvd]
(qvd);

LEFT JOIN(JobTemp)
LOAD
   "Item Number" AS item,
   "Item description"
FROM [lib://QV-ProductionData/Data/Raw Stage/item.qvd]
(qvd);

CONCATENATE(OWS)
LOAD *,
     'JOB_DATA' AS ReportGrouping
RESIDENT JobTemp
WHERE ("type" = 'J' AND (stat = 'C' OR stat = 'H') AND DATE(FLOOR(lst_trx_date)) >= DATE('01/01' &  (YEAR(TODAY()) - 1)) AND qty_scrapped > 0)
;

DROP TABLE JobTemp;
/********************* Job Data ****************************************/


OWSTemp1:
LOAD
    *,
    IF(ReportGrouping LIKE '*JOB*', (extcost/matl_qty + UfSroLineQty)) * matl_qty, extcost AS [EXT COST],
    post_date AS MasterDate,
    description AS [LINE DESC],
    "fs_sro_oper description" AS [OPER DESC],
    post_date AS [POST DATE],
    "fs_sro description" AS [SRO DESC],
    sro_num & ' / ' & sro_line AS [SRO NUM / LINE],
    sro_num & ' / ' & sro_line & IF(ReportGrouping LIKE '*JOB*', '0', sro_oper) AS [SRO NUM / LINE / OPER],
    IF(whse = 'BTR', 'BATON ROUGE',
        IF(whse = 'SFS', 'CYPRESS',
            IF(whse = 'DEN', 'DENVER',
                IF(whse = 'GJN', 'GRAND JUNCTION',
                    IF(whse = 'LAP', 'LAPORTE',
                        IF(whse = 'ODE', 'ODESSA',
                            IF(whse = 'OKC', 'OKLAHOMA CITY',
                                IF(whse = 'PRL', 'PEARLAND',
                                    IF(whse = 'TLY', 'TYLER', 'UNDEFINED')
                                  )
                               )
                           )
                       )
                   )
               )
           )
       ) AS [WHSE]
RESIDENT OWS;
DROP TABLE OWS;

// LEFT JOIN(OWSTemp1)
// LOAD
//     "Item Number" AS item,
//     "Item description"
// FROM [lib://QV-ProductionData/Data/Raw Stage/item.qvd]
// (qvd);

OWSTemp:
LOAD
    *,
       IF(ReportGrouping LIKE '*JOB*', 'SCRAP/REWORK',
           IF(ISNULL("fs_sro description"), 'ORDER',
               IF(LEFT(sro_num,3) = 'WAR', 'WARRANTY',
                    IF(LEFT(sro_num,3) = 'NCR', 'SCRAP/REWORK',
                        IF("fs_sro description" LIKE '*WARRANTY*', 'WARRANTY',
                            IF(MATCH ("fs_sro cust_num", 'DP01781', 'DP01988', 'DP02015', 'DP02095', 'DP02096', 'DP02097', 'DP02098', 'DP02099', 'DP07391'), 'WARRANTY',
                                IF("fs_sro description" LIKE '*A1', 'WARRANTY',
                                    IF("fs_sro description" LIKE '*A2', 'WARRANTY',
                                        IF("fs_sro description" LIKE '*A3', 'WARRANTY',
                                            IF("fs_sro description" LIKE '*A4', 'WARRANTY',
                                                IF("fs_sro description" LIKE '*A5', 'WARRANTY',
                                                    IF("fs_sro description" LIKE '*A6', 'WARRANTY',
                                                        IF("fs_sro description" LIKE '*A7', 'WARRANTY',
                                                            IF("fs_sro description" LIKE '*A8', 'WARRANTY',
                                                                IF("fs_sro description" LIKE '*B1', 'WARRANTY',
                                                                    IF("fs_sro description" LIKE '*B2', 'WARRANTY',
                                                                        IF("fs_sro description" LIKE '*B3', 'WARRANTY',
                                                                            IF("fs_sro description" LIKE '*B4', 'WARRANTY',
                                                                                IF("fs_sro description" LIKE '*B5', 'WARRANTY',
                                                                                    IF("fs_sro description" LIKE '*B6', 'WARRANTY',
                                                                                        IF("fs_sro description" LIKE '*B7', 'WARRANTY',
                                                                                            IF("fs_sro description" LIKE '*B8', 'WARRANTY',
                                                                                                IF("fs_sro description" LIKE '*C2', 'WARRANTY',
                                                                                                    IF("fs_sro description" LIKE '*C3', 'WARRANTY',
                                                                                                        IF("fs_sro description" LIKE '*C4', 'WARRANTY',
                                                                                                            IF("fs_sro description" LIKE '*C5', 'WARRANTY',
                                                                                                                IF("fs_sro description" LIKE '*C6', 'WARRANTY',
                                                                                                                    IF("fs_sro description" LIKE '*C7', 'WARRANTY',
                                                                                                                        IF("fs_sro description" LIKE '*C8', 'WARRANTY',
                                                                                                                            IF("fs_sro description" LIKE '*D2', 'WARRANTY',
                                                                                                                                IF("fs_sro description" LIKE '*D4', 'WARRANTY',
                                                                                                                                    IF("fs_sro description" LIKE '*D7', 'WARRANTY',
                                                                                                                                        IF("fs_sro description" LIKE '*E4', 'WARRANTY',
                                                                                                                                            IF("fs_sro description" LIKE '*F4', 'WARRANTY',
                                                                                                                                                IF("fs_sro description" LIKE '*G4', 'WARRANTY',
                                                                                                                                                    IF("fs_sro description" LIKE '*H4', 'WARRANTY',
                                                                                                                                                        IF("fs_sro_oper description" LIKE '*NO CHARGE*' AND NOT("fs_sro_oper description" LIKE 'WARRANTY'), 'SCRAP/REWORK', 'ORDER')
                                                                                                                                                      )
                                                                                                                                                  )
                                                                                                                                              )
                                                                                                                                          )
                                                                                                                                      )
                                                                                                                                  )
                                                                                                                              )
                                                                                                                          )
                                                                                                                      )
                                                                                                                  )
                                                                                                              )
                                                                                                          )
                                                                                                      )
                                                                                                  )
                                                                                              )
                                                                                          )
                                                                                      )
                                                                                  )
                                                                              )
                                                                          )
                                                                      )
                                                                  )
                                                              )
                                                          )
                                                      )
                                                  )
                                              )
                                          )
                                      )
                                  )
                              )
                          )
                      )
                  )
              )
          ) AS [O/W/S]
RESIDENT OWSTemp1
;

DROP TABLE OWSTemp1;
                                                                                                                                                                                                    

OWS:
LOAD
//     PrimaryKey,
    SiteCd & '-' & whse AS %WarehouseKey,
//    whse AS [Warehouse Code],
    [WHSE],
    [O/W/S],
    ReportGrouping AS [SRO TAB],
    [POST DATE],
    YEAR([POST DATE]) AS PostDateYear,
    MONTH([POST DATE]) AS PostDateMonth,
    IF(NUM([POST DATE]) >= NUM(WeekStart(TODAY())) - 7 AND NUM([POST DATE]) <= NUM(WEEKSTART(TODAY())) - 1, 'YES for LFW', 'NO for LFW') AS LFW_FLAG,
    MasterDate,
    sro_num AS [SRO NUM],
    fs_sro_line_sro_line AS [SRO LINE],
    sro_oper AS [SRO OPER],
    [SRO DESC],
    [LINE DESC],
    [OPER DESC],
    [SRO NUM / LINE],
    [SRO NUM / LINE / OPER],
    item AS [ITEM],
    "Item description" AS [ITEM DESCRIPTION],
    matl_qty AS [QTY],
    [EXT COST],
    cust_num AS [CUST NUM],
    cust_seq AS [CUST SEQ],
    name AS [CUSTOMER],
    RELOADTIME() as WhenDidIReload
RESIDENT OWSTemp
WHERE (MATCH([O/W/S], 'SCRAP/REWORK', 'WARRANTY') AND NOT MATCH([WHSE], 'BATON ROUGE', 'GRAND JUNCTION'))
ORDER BY MasterDate ASC
;

DROP TABLE OWSTemp;


STORE OWS INTO [lib://QV-ProductionData/Data/Final Stage/SRO OWSFact.qvd](qvd);


DROP TABLE OWS;

End Sub;



Sub UtilizationProcess

LET trans_date_start = DATE('01/01/2019');
//LET trans_date_end = DATE('12/31/2020');
LET trans_date_end = DATE(TODAY());

UtilizationTemp1:
LOAD
    'JOB' AS ReportGrouping,
    SiteCd & '-' & whse AS %WarehouseKey,
    SiteCd & '-' & UPPER(job) AS [f_Job/SRO_Num_key],
    UPPER(job) AS [f_Job/SRO_Num],
    IF(trans_type = 'I', 'INDIRECT', 
       IF(trans_type = 'R', 'JOB RUN', 'SRO LABOR')
       ) AS [f_Trans_Type],
    SiteCd & '-' & suffix AS suffix_key,
    suffix,
    DATE(NUM(FLOOR(trans_date))) AS trans_date,
    a_hrs,
    SiteCd & '-' & emp_num AS emp_num_key,
    emp_num,
    start_time AS time_start_sec,
    TIME(start_time/86400, 'hh:mm:ss') AS time_start,
    TIME(end_time/86400, 'hh:mm:ss') AS time_end,
    RowPointer
FROM [lib://QV-ProductionData/Data/Raw Stage/jobtran.qvd]
(qvd)
WHERE (LEFT(emp_num, 1) <> 'P' AND (DATE(NUM(FLOOR(trans_date))) >= DATE('$(trans_date_start)') AND DATE(NUM(FLOOR(trans_date))) <= DATE('$(trans_date_end)')) AND LEFT(trans_type, 1) <> 'M'
      )
;


LEFT JOIN(UtilizationTemp1)
LOAD
    name,
    SiteCd & '-' & emp_num AS emp_num_key,
    SiteCd & '-' & dept AS dept_key,
    dept,
    IF(LEFT(dept, 1) = '0' OR LEFT(dept, 1) = '1', 'ODESSA',
       IF(LEFT(dept, 1) = '2', 'OKLAHOMA CITY',
          IF(LEFT(dept, 1) = '3', 'TYLER',
             IF(LEFT(dept, 1) = '4', 'CYPRESS',
                IF(LEFT(dept, 2) = '51', 'DENVER',
                   IF(LEFT(dept, 1) = '6', 'LAPORTE',
                      IF(LEFT(dept, 2) = '53', 'GRAND JUNCTION',
                         IF(LEFT(dept, 3) = '800', 'PEARLAND',
                            IF(LEFT(dept, 3) = '801', 'BATON ROUGE', 'UNDEFINED')
                            )
                         )
                      )
                   )
                )
             )
          )
       ) AS [f_Service_Center]
FROM [lib://QV-ProductionData/Data/Raw Stage/employee.qvd]
(qvd)
// WHERE ((NOT WILDMATCH(name, '*ernestina*', '*rosalio*', '*Barber, Gary*', '*Beaird, Mike W.*', '*Broussard, Chasity*', '*Pawlosky, James*', '*Saha, Russell*')) AND (MATCH(LEFT(dept, 4), '1361','1480','1481','1482','1662','2180','2182','2183','3180','3182','4160','4182','4183','5160','5180','5183','5182','6160','6180','6183','6182','8001','8011','8013')))
;


LEFT JOIN(UtilizationTemp1)
LOAD
    SiteCd & '-' & "dept dept" AS dept_key,
    "dept description" AS description
FROM [lib://QV-ProductionData/Data/Raw Stage/dept.qvd]
(qvd);


LEFT JOIN(UtilizationTemp1)
LOAD
    SiteCd & '-' & UPPER(job) AS [f_Job/SRO_Num_key],    
    SiteCd & '-' & suffix AS suffix_key,
    item
FROM [lib://QV-ProductionData/Data/Raw Stage/job.qvd]
(qvd);



UtilizationTemp2:
LOAD
    'SRO' AS ReportGrouping,
    SiteCd & '-' & whse AS %WarehouseKey,
    SiteCd & '-' & dept AS dept_key,
    dept,
    IF(LEFT(dept, 1) = '0' OR LEFT(dept, 1) = '1', 'ODESSA',
       IF(LEFT(dept, 1) = '2', 'OKLAHOMA CITY',
          IF(LEFT(dept, 1) = '3', 'TYLER',
             IF(LEFT(dept, 1) = '4', 'CYPRESS',
                IF(LEFT(dept, 2) = '51', 'DENVER',
                   IF(LEFT(dept, 1) = '6', 'LAPORTE',
                      IF(LEFT(dept, 2) = '53', 'GRAND JUNCTION',
                         IF(LEFT(dept, 3) = '800', 'PEARLAND',
                            IF(LEFT(dept, 3) = '801', 'BATON ROUGE', 'UNDEFINED')
                            )
                         )
                      )
                   )
                )
             )
          )
       ) AS [f_Service_Center],
    hrs_worked,
    SiteCd & '-' & partner_id AS partner_id_key,
    partner_id,
    DATE(NUM(FLOOR(post_date))) AS post_date,
    TIME(end_date, 'hh:mm:ss') AS time_end,
    TIME(start_date, 'hh:mm:ss') AS time_start,
    NUM(TIME#(TIME(start_date, 'hh:mm:ss'), 'hh:mm:ss')) * 86400 AS time_start_sec,
    SiteCd & '-' & sro_num AS sro_num_key,
    sro_num,
    UPPER(sro_num) AS [f_Job/SRO_Num],
    IF(work_code = 'I', 'INDIRECT',
       IF(work_code = 'R', 'JOB RUN', 'SRO LABOR')
       ) AS [f_Trans_Type],
    RowPointer,
    start_date,
    end_date
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro_labor.qvd]
(qvd)
WHERE ((LEFT(TRIM(partner_id), 1) <> 'P') AND (DATE(NUM(FLOOR(post_date))) >= DATE('$(trans_date_start)') AND DATE(NUM(FLOOR(trans_date))) <= DATE('$(trans_date_end)')) AND (work_code <> 'M') AND (MATCH(LEFT(dept, 4), '1361','1480','1481','1482','1662','2180','2182','2183','3180','3182','4160','4182','4183','5160','5180','5183','5182','6160','6180','6183','6182','8001','8011','8013')))
;

LEFT JOIN(UtilizationTemp2)
LOAD
    SiteCd & '-' & "dept dept" AS dept_key,
    "dept description" AS dept_description
FROM [lib://QV-ProductionData/Data/Raw Stage/dept.qvd]
(qvd);


LEFT JOIN(UtilizationTemp2)
LOAD
    "fs_partner name" AS name,
    SiteCd & '-' & "fs_partner partner_id" AS partner_id_key
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_partner.qvd]
(qvd);


LEFT JOIN(UtilizationTemp2)
LOAD
    "fs_sro description" AS description,
    SiteCd & '-' & "fs_sro sro_num" AS sro_num_key
FROM [lib://QV-ProductionData/Data/Raw Stage/fs_sro.qvd]
(qvd);


CONCATENATE(UtilizationTemp1)
LOAD
    *
RESIDENT UtilizationTemp2;

DROP TABLE UtilizationTemp2;

UtilizationTemp2:
LOAD
    *,
//     IF(LEFT(dept, 2) = '14', 'PLANT 4',
//        IF(LEFT(dept, 2) = '13', 'PLANT 3',
//           IF(LEFT(dept, 2) = '16', 'PLANT 6', [f_Service_Center])
//           )
//        ) AS [DEPARTMENT],
    trans_date AS [TRANS_DATE],
    IF([f_Trans_Type] = 'INDIRECT', a_hrs, 0) AS [f_IND_HRS],
    IF([f_Trans_Type] = 'JOB RUN', a_hrs, 0) AS [f_JOB_HRS],
    IF(MATCH(LEFT(dept, 4), '1361','1480','1481','1482','1662','2180','2182','2183','3180','3182','4160','4182','4183','5160','5180','5183','5182','6160','6180','6183','6182','8001','8011','8013'), 'DIR LBR DEPT', 'IND LBR DEPT') AS [DIR LBR DEPT/IND LBR DEPT],
    IF(LEFT(emp_num, 1) = 'T', 'T' & RIGHT(emp_num, 6), 
       IF(LEFT(emp_num, 1) = 'C', 'C' & RIGHT(emp_num, 6), RIGHT(emp_num, 10))
       ) AS [f_Employee_Number]
RESIDENT UtilizationTemp1
WHERE ((NOT WILDMATCH(name, '*ernestina*', '*rosalio*', '*Barber, Gary*', '*Beaird, Mike W.*', '*Broussard, Chasity*', '*Pawlosky, James*', '*Saha, Russell*')) AND (MATCH(LEFT(dept, 4), '1361','1480','1481','1482','1662','2180','2182','2183','3180','3182','4160','4182','4183','5160','5180','5183','5182','6160','6180','6183','6182','8001','8011','8013')))
 ;

DROP TABLE UtilizationTemp1;


UtilizationTemp3:
LOAD
    *,
    [TRANS_DATE] AS MasterDate,
    IF(NUM([TRANS_DATE]) >= NUM(WeekStart(TODAY())) - 7 AND NUM([TRANS_DATE]) <= NUM(WEEKSTART(TODAY())) - 1, 'YES', 'NO') AS UTIL_LFW_FLAG,
    IF(WILDMATCH([f_Job/SRO_Num], '*5S*', 'SM*', 'SCSR*', 'SCSCT*', '*MMR*', '*IND*'), 0, 
       IF([f_Trans_Type] = 'SRO LABOR', a_hrs, 0)
       ) AS [f_SRO_HOURS],
       dept & ' / ' & [f_Employee_Number] & ' / ' & name & ' / ' & YEAR(trans_date) AS [DEPT/EMP/NAME/YEAR]
RESIDENT UtilizationTemp2
;


DROP TABLE UtilizationTemp2;

NOCONCATENATE
Utilization:
LOAD
    *
RESIDENT UtilizationTemp3;

DROP TABLE UtilizationTemp3;

STORE Utilization INTO [lib://QV-ProductionData/Data/Final Stage/Utilization Fact.qvd](qvd);

DROP TABLE Utilization;

End Sub;







Sub ProcessSalesPerson
		call BuildMappingTable('EmployeeNameMap')
		call BuildMappingTable('SiteMap')
		
//Removing references to the InproSales person table as it is no longer in use.		
//		SalesPeople:
//		Load
//		SalesPersonKey, [Sales Person Name], Salesperson, Initials, SalesmanType, RegionalManager
//		From
//		[$(ENV_QV_RAW_STAGE)InproSalesPeople.qvd](qvd);
//		
//		Concatenate(SalesPeople)
//		Load * Inline [
//		SalesPersonKey, Sales Person Name, Salesperson, Initials, SalesmanType, RegionalManager
//		INPROUS-Undefined Manager|INPROUS-Undefined Manager, Undefined, INPROUS-Undefined Manager, Undefined, R, INPROUS-Undefined Manager
//		INPROUK-Undefined Manager|INPROUK-Undefined Manager, Undefined, INPROUK-Undefined Manager, Undefined, R, INPROUK-Undefined Manager
//		];
//		
//		Left Join(SalesPeople)
//		Load
//		Salesperson as RegionalManager,
//		[Sales Person Name] as [Manager Name]
//		Resident
//			SalesPeople;
//		Store SalesPeople into [$(ENV_QV_WORKING_DATA)InproSalesPeople.qvd](qvd);	
//		Drop Table SalesPeople;


        SalesPersonKAM:
		LOAD
		     If(len(Trim(slsman))=0,[Key Account Manager ID],[Salesperson ID]) as [Salesperson ID], 
		     [Key Account Manager ID]
		FROM
		[$(ENV_QV_RAW_STAGE)customer.qvd]
		(qvd)
		Where not exists([Salesperson ID],If(len(Trim(slsman))=0,[Key Account Manager ID],[Salesperson ID]));
		//this where clause is being removed to include salespeople from all sites.
		//Where Match(SiteCd, 'INPROUS','INPROUK') = 0;
		
		Concatenate(SalesPersonKAM)
		LOAD
		     [Key Account Manager ID] as [Salesperson ID],
		     [Key Account Manager ID]
		FROM
		[$(ENV_QV_RAW_STAGE)customer.qvd]
		(qvd)
		//Where Match(SiteCd, 'INPROUS','INPROUK') = 0
		Where not exists([Salesperson ID],[Key Account Manager ID]);
		
		Left Join(SalesPersonKAM)
		LOAD SiteCd & '-' & slsman as [Salesperson ID], 
		     //applyMap('EmployeeNameMap',SiteCd & '-' & ref_num,Null()) as LastName
             applyMap('EmployeeNameMap',SiteCd & '-' & ref_num,If(Len(Trim([slsman Uf_Cook_Slsman_Desc]))>0,[slsman Uf_Cook_Slsman_Desc],SiteCd & '-' & slsman)) as LastName
		FROM
		[$(ENV_QV_RAW_STAGE)slsman.qvd]		
		(qvd);
		
        
		SPKAM:
		Load
		1 as NoConcat,
        [Salesperson ID] & '|' & [Key Account Manager ID] as SalesPersonKey,
		[Salesperson ID],
		[Key Account Manager ID],
		If(Len(Trim(LastName))=0,ApplyMap('SiteMap',Replace([Salesperson ID],'-',''),'Unknown'),LastName) as [Sales Person Name]
		Resident SalesPersonKAM;
		//From [$(ENV_QV_WORKING_DATA)SalesPersonKAM.qvd](qvd);
		
        Drop table SalesPersonKAM;
        Drop Field NoConcat;
        
		Left Join(SPKAM)
		Load Distinct
			[Salesperson ID] as [Key Account Manager ID],
			[Sales Person Name] as [Key Account Manager Name]
		Resident SPKAM;
		
		store SPKAM into [$(ENV_QV_FINAL_STAGE)SalesPersonKAM.qvd](qvd);
		
		drop table SPKAM;
		

End Sub


Sub ChartOfAccounts

    ChartOfAccounts:
    LOAD
        SiteCd & '-' & "chartofaccounts acct" as %AccountKey,
        //PrimaryKey,
        SiteCd as [Account SiteCd],
        //"chart site_ref",
        "chartofaccounts type" as [Account Type],
        "chartofaccounts description" as [Accounts Desc],
        //"chart eff_date",
        //"chart obs_date",
        "chartofaccounts acct" as [Account Number],
        "chart reports_to_acct" as [Account Reports to Account],
        //"chart trans_method",
        //"chart use_buy_rate",
        "chart acct_class" as [Account Class],
        "chart ledger_dim_name" as [Account Ledger Dim Name],
        SiteCd & '-' & "chart access_unit1" as [Account UnitCode1Key],
        SiteCd & '-' & "chart access_unit2" as [Account UnitCode2Key],
        SiteCd & '-' & "chart access_unit3" as [Account UnitCode3Key],
        SiteCd & '-' & "chart access_unit4" as [Account UnitCode4Key],
        "chart access_unit1" as [Account Unit Code1],
        "chart access_unit2" as [Account Unit Code2],
        "chart access_unit3" as [Account Unit Code3],
        "chart access_unit4" as [Account Unit Code4],
        "chartofaccounts uf_DRS_Account" as [Account DRS Account]
    FROM [$(ENV_QV_RAW_STAGE)chart.qvd]
    (qvd);

    For i = 1 to 4

        Left Join(ChartOfAccounts)
        LOAD
            PrimaryKey as [Account UnitCode$(i)Key],
            [unit_code$(i) description] as [Account UnitCode$(i)Desc]
        FROM [$(ENV_QV_RAW_STAGE)unitcd$(i).qvd]
        (qvd);

    Next


    Store ChartOfAccounts into [$(ENV_QV_FINAL_STAGE)ChartOfAccounts.qvd](qvd);
    Drop Table ChartOfAccounts;



end sub



Sub CustomerAddressJoinProcess

		cust:
		LOAD SiteCd, 
		     cust_num, 
		     [Customer ID] as [%CustomerNumber], 
		     [Customer Seq ID], 
		     cust_seq, 
		     contact##1, 
		     contact##2, 
		     contact##3, 
		     phone##1, 
		     phone##2, 
		     phone##3, 
		     [Customer Type ID], 
		     cust_type, 
		     terms_code, 
		     ship_code, 
		     [Salesperson ID], 
		     slsman, 
		     state_cycle, 
		     fin_chg, 
		     last_inv, 
		     last_paid, 
		     sales_ytd, 
		     sales_lst_yr, 
		     disc_ytd, 
		     disc_lst_yr, 
		     last_fin_chg, 
		     sales_ptd, 
		     calc_date, 
		     num_periods, 
		     avg_days_os, 
		     num_invoices, 
		     hist_days_os, 
		     larg_days_os, 
		     last_days_os, 
		     avg_bal_os, 
		     large_bal_os, 
		     last_bal_os, 
		     whse, 
		     charfld1, 
		     charfld2, 
		     charfld3, 
		     decifld1, 
		     decifld2, 
		     decifld3, 
		     logifld, 
		     datefld, 
		     tax_reg_num1, 
		     bank_code, 
		     pay_type, 
		     tax_reg_num2, 
		     edi_cust, 
		     branch_id, 
		     trans_nat, 
		     delterm, 
		     process_ind, 
		     use_exch_rate, 
		     tax_code1, 
		     pricecode, 
		     tax_code2, 
		     ship_early, 
		     ship_partial, 
		     lang_code, 
		     end_user_type, 
		     ship_site, 
		     lcr_reqd, 
		     cust_bank, 
		     draft_print_flag, 
		     rcv_internal_email, 
		     customer_email_addr, 
		     send_customer_email, 
		     aps_pull_up, 
		     do_invoice, 
		     consolidate, 
		     inv_freq, 
		     summarize, 
		     //NoteExistsFlag, 
		     //RecordDate, 
		     //RowPointer, 
		     einvoice, 
		     order_bal, 
		     posted_bal, 
		     //CreatedBy, 
		     //UpdatedBy, 
		     //CreateDate, 
		     //InWorkflow, 
		     crm_guid, 
		     print_pack_inv, 
		     one_pack_inv, 
		     inv_category, 
		     include_tax_in_price, 
		     trans_nat_2, 
		     use_revision_pay_days, 
		     export_type, 
		     pay_day, 
		     pay_day_end_time##1, 
		     pay_day_end_time##2, 
		     pay_day_start_time##1, 
		     pay_day_start_time##2, 
		     revision_day, 
		     revision_day_end_time##1, 
		     revision_day_end_time##2, 
		     revision_day_start_time##1, 
		     revision_day_start_time##2, 
		     active_for_data_integration, 
		     show_in_ship_to_drop_down_list, 
		     show_in_drop_down_list, 
		     number_of_employees, 
		     sic_code, 
		     company_revenue, 
		     [Territory ID], 
		     territory_code, 
		     Uf_customerBillingEmail, 
		     Uf_customerBillingFax, 
		     Uf_customerEntity, 
		     Uf_customerFFCountry, 
		     Uf_customerIsFreightForwarded, 
		     Uf_customerIsNewOrExistingCust, 
		     Uf_CustomerShiptoFedexAcct, 
		     Uf_CustomerShiptoOTHERAcct, 
		     Uf_CustomerShiptoUPSAcct, 
		     Uf_customerZJobCust, 
		     Uf_LRM_Carrier, 
		     Uf_LRM_ClassOfService, 
		     Uf_LRM_FreightAccount, 
		     Uf_LRM_FreightTerms, 
		     Uf_CustomerExcludeFromShipBook, 
		     Uf_LRM_OnwardCarrier, 
		     Uf_LRM_OnwardClassOfService, 
		     days_shipped_after_due_date_tolerance, 
		     days_shipped_before_due_date_tolerance, 
		     default_ship_to, 
		     sales_team_id, 
		     shipped_over_ordered_qty_tolerance, 
		     shipped_under_ordered_qty_tolerance, 
		     Uf_CustomerEpilogMarkPref, 
		     [Key Account Manager ID], 
		     Uf_KeyAcctMngr, 
		     If(Len(Trim(Uf_ProductManufactured))=0,Null(),SiteCd & '-' & Uf_ProductManufactured) as Uf_ProductManufactured,
             If(Len(Trim(Uf_ProductSubManufactured))=0,Null(),SiteCd & '-' & Uf_ProductSubManufactured) as Uf_ProductSubManufactured,
		     [customer Uf_shipto_Carrier], 
		     [customer Uf_shipto_FreightAccount],
		     [customer Uf_MappedCustomerType],
             [customer Uf_DPC_Region],
             [customer Uf_DPC_SalesChannel]
		FROM
		[$(ENV_QV_RAW_STAGE)customer.qvd]
		(qvd);
		
		Left Join(cust)
		LOAD  
		     [Customer Seq ID], 
		     name, 
		     city, 
		     state, 
		     zip, 
		     county, 
		     country, 
		     fax_num, 
		     telex_num, 
		     bal_method, 
		     addr##1, 
		     addr##2, 
		     addr##3, 
		     addr##4, 
		     credit_hold, 
		     credit_hold_user, 
		     credit_hold_date, 
		     credit_hold_reason, 
		     credit_limit, 
		     curr_code, 
		     corp_cred, 
		     corp_cust, 
		     [Customer Address Corporate Customer ID], 
		     corp_address, 
		     amt_over_inv_amt, 
		     days_over_inv_due_date, 
		     ship_to_email, 
		     bill_to_email, 
		     internet_url, 
		     internal_email_addr, 
		     external_email_addr, 
		     //NoteExistsFlag, 
		     //RecordDate, 
		     //RowPointer, 
		     //CreatedBy, 
		     //UpdatedBy, 
		     //CreateDate, 
		     //InWorkflow, 
		     carrier_account, 
		     carrier_upcharge_pct, 
		     carrier_residential_indicator, 
		     carrier_bill_to_transportation,
		     [custaddr Uf_MappedShipToRegion]
		FROM
		[$(ENV_QV_RAW_STAGE)custaddr.qvd]
		(qvd);
		
		Store cust into [$(ENV_QV_FINAL_STAGE)customer_custaddr_join.qvd](qvd);
		Drop table cust;
		
End Sub		



Sub ProcessCustomers

	call BuildMappingTable('EndTypeMap')
	call BuildMappingTable('CustomerTypeMap')
	call BuildMappingTable('TerritoryMap')
	call BuildMappingTable('CORPORATE_CUSTOMER_MAP')
    call BuildMappingTable('SubProductManufacturedMap')
    Call BuildMappingTable('ProductManufacturedMap')

Customer:
//All bill to Customers
LOAD  
	 %CustomerNumber,
	 SiteCd as [Customer Site],
	//[Customer Seq ID] as [%Customer Seq ID],
	if(len(Trim(cust_type))=0,'UDF',SubField(ApplyMap('CustomerTypeMap',[Customer Type ID],'UNK|Unknown'),'|',1)) as [Customer Type Code],
	if(len(Trim(cust_type))=0,'Undefined',SubField(ApplyMap('CustomerTypeMap',[Customer Type ID],'UNK|Unknown'),'|',2)) as [Customer Type],
	'Customer' as [Customer Prospect/Customer],
//    SubField(ApplyMap('CustomerTypeMap',[Customer Type ID],'UNK|Unknown'),'|',1) as [Customer Type Code],
//    SubField(ApplyMap('CustomerTypeMap',[Customer Type ID],'UNK|Unknown'),'|',2) as [Customer Type],    
     name as [Customer Name],
     [Customer Address Corporate Customer ID] as CorporateCustomerGroup,
     Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|No Customer Group|No Customer Group'),'|',1) as [Corporate Customer Number(Sales)],
	 Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|No Customer Group|No Customer Group'),'|',2) as [Corporate Customer Name(Sales)],
	 Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|No Customer Group|No Customer Group'),'|',3) as [Corporate Customer Subordinate Short Name],
     If(credit_hold = 1,Dual('Yes',1),Dual('No',0)) as [Customer is on Credit Hold], 
     credit_hold_user as [Customer Credit Hold User], 
     Date(Floor(Num(credit_hold_date))) as [Customer Credit Hold Date], 
     credit_hold_reason as [Customer Credit Hold Reason], 
     credit_limit as [Customer Credit Limit],
     curr_code as [Customer Currrecy Code],
    //SiteCd as Site,
    //[Salesperson ID] as Salesperson,
    cust_num as CustomerNumber,
    //ApplyMap('MagneticsIntercompanyMap',cust_num,'Non-Mag/Non-Intercompany') as [Customer Magnetics/Intercompany Type],
    If(Len(Trim(slsman))>0,[Salesperson ID],SiteCd & '-Undefined') as %SalespersonId,
    If(Len(Trim(Uf_KeyAcctMngr))>0,[Key Account Manager ID],SiteCd & '-Undefined') as [%KeyAccountManager],
    [Territory ID] as [%Territory],
    territory_code,
    If(Len(Trim(territory_code))=0,'Undefined',ApplyMap('TerritoryMap',[Territory ID],'Unknown')) as [Customer Territory],
    If(Len(Trim(end_user_type))=0,'Undefined', end_user_type) as [Customer End User Type Code],
    If(Len(Trim(end_user_type))=0,'Undefined', ApplyMap('EndTypeMap', SiteCd & '-' & end_user_type,'Unknown')) as [Customer End User Type],
    county as [Bill Country Code],
    SiteCd & '-' & If(isnull(country) = -1,'Undefined', country) as [Bill %Country],
    Capitalize(country) as [Customer Bill Country],
    [customer Uf_MappedCustomerType] as [Customer Mapped Customer Type],
    Subfield(applyMap('ProductManufacturedMap',Uf_ProductManufactured),'|',1) as [Customer Market Segment Code],
    Subfield(applyMap('ProductManufacturedMap',Uf_ProductManufactured),'|',2) as [Customer Market Segment],
    Subfield(applyMap('SubProductManufacturedMap',Uf_ProductSubManufactured),'|',1) as [Customer Market Sub Segment Code],
    Subfield(applyMap('SubProductManufacturedMap',Uf_ProductSubManufactured),'|',2) as [Customer Market Sub Segment]
FROM
[$(ENV_QV_FINAL_STAGE)customer_custaddr_join.qvd]
(qvd)
Where cust_seq = 0;// and $(vStandardSiteCondition);



Left Join(Customer)
//add the ship to information
LOAD 
    %CustomerNumber,
    [Customer Seq ID] as [%Customer Seq ID],
    name as [Customer Ship To Name],
	//Moving territory to come from the bill to record
    //[Territory ID] as [%Territory],
    //territory_code,
    //If(Len(Trim(territory_code))=0,'Undefined',ApplyMap('TerritoryMap',[Territory ID],'Unknown')) as [Customer Territory],
    city as ShiptoCity,
    city,
    state,
    zip,
    county as [Ship Country Code],
    [custaddr Uf_MappedShipToRegion] as [Custaddr Mapped Ship To Region],
    SiteCd & '-' & If(isnull(country) = -1,'Undefined', country) as [Ship %Country];
//SQL SELECT *
//FROM $(vDb).dbo.custaddr
Load * from 
[$(ENV_QV_FINAL_STAGE)customer_custaddr_join.qvd](qvd);
//[$(ENV_QV_FINAL_STAGE)custaddr Combined.qvd](qvd);
//and $(vStandardSiteCondition);



Concatenate(Customer)
//Add Prospects
LOAD [SiteCd] & '-Prospect-' & [prospect prospect_id] as [%Customer Seq ID],
	 [SiteCd] & '-Prospect-' & [prospect prospect_id] as [%CustomerNumber],
	 SiteCd as [Customer Site],
	 'P' as [Customer Type Code],
	 'Prospect' as [Customer Type],
	 [prospect prospect_id] as [CustomerNumber],
	 //'Non-Mag/Non-Intercompany' as [Customer Magnetics/Intercompany Type], 
	 If(Len(Trim([prospect slsman]))>0,[SiteCd] & '-' & [prospect slsman],[SiteCd] & '-Undefined') as %SalespersonId,
	 If(Len(Trim([prospect Uf_KeyAcctMngr]))>0,[SiteCd] & '-' & [prospect Uf_KeyAcctMngr],[SiteCd] & '-Undefined') as [%KeyAccountManager],
	 [prospect territory_code] as territory_code,
	 ApplyMap('TerritoryMap', [SiteCd] & '-' & [prospect territory_code],'Undefined') as [Customer Territory],
	 //SiteCd & '-' & [slsman] as Salesperson, 
     [prospect company] as [Customer Name],
     [prospect company] as [Customer Ship To Name],
     [prospect city] as [ShiptoCity],
     [prospect city] as city, 
     [prospect state] as state, 
     [prospect zip] as zip, 
     If(Len(Trim([prospect country]))>0,[SiteCd] & '-' & [prospect country]) as [Ship %Country],
     'P' as [Customer End User Type Code],
    'Prospect' as [Customer End User Type],
    'Prospect' as [Customer Prospect/Customer]
//     [prospect phone], 
//     [prospect corp_cust], 
//     [prospect internet_url], 
//     [prospect slsman], 
//     [prospect lang_code], 
//     [prospect curr_code], 
//     [prospect sic_code], 
//     [prospect territory_code], 
//     [prospect number_of_employees], 
//     [prospect company_revenue], 
//     [prospect NoteExistsFlag], 
//     [prospect CreatedBy], 
//     [prospect UpdatedBy], 
//     [prospect CreateDate], 
//     [prospect RecordDate], 
//     [prospect InWorkflow], 
//     [prospect RowPointer], 
//     [prospect Uf_KeyAcctMngr], 
//     [prospect sales_team_id]
FROM
[$(ENV_QV_RAW_STAGE)prospect.qvd]
(qvd);

Store Customer into [$(ENV_QV_WORKING_DATA)CustomerTemp.qvd](qvd);
Drop Table Customer;


Customer:
//add corporate customer definitions and refine the customer types
LOAD [%Customer Seq ID], 
     %CustomerNumber,
     [Customer Site], 
     [Customer Type Code], 
//     [Customer Type], 
     //Site, 
     CustomerNumber, 
//     [Customer Magnetics/Intercompany Type],
     %SalespersonId,
     %KeyAccountManager, 
     //%Territory, 
     If(Len(Trim(territory_code))=0,'Undefined',territory_code) as territory_code,
     [Customer Territory],
     [Customer Currrecy Code],
     //Salesperson, 
     [Customer Name], 
     CorporateCustomerGroup, 
     [Customer is on Credit Hold], 
     [Customer Credit Hold User], 
     [Customer Credit Hold Date], 
     [Customer Credit Hold Reason], 
     [Customer Credit Limit], 
     [Customer Ship To Name],
     [Customer Prospect/Customer], 
     ShiptoCity, 
     city, 
     state, 
     zip, 
     //country as country_orig,
     //Capitalize(country) as country,
     //Capitalize(country) as CountryName,
     If(Len(Trim([Ship %Country]))>0,[Ship %Country],If(Len(Trim([Bill %Country]))>0,[Bill %Country],'Undefined')) as %Country,
     [Customer Bill Country],
	[Customer Name] & ', ' & If(Len(Trim(ShiptoCity))>0,ShiptoCity,city) as [Customer Primary Ship To],
	If(Len(Trim(ShiptoCity))>0,ShiptoCity,city) as [Customer Primary Ship To City],
	[Corporate Customer Number(Sales)],
	[Corporate Customer Name(Sales)],
	[Corporate Customer Subordinate Short Name],
	Capitalize([Customer Type]) as [Customer Type],
    Trim(Replace(Replace(Capitalize([Customer Type]),'Aftermarket',''),'Pewaukee','')) as [Customer Type Group],
    If(WildMatch([Customer Type],'*Aftermarket')>0,'Aftermarket','Non-Aftermarket') as [Customer Class],
    [Customer End User Type Code],
	[Customer End User Type],
	[Customer Mapped Customer Type],
	[Custaddr Mapped Ship To Region],
    [Customer Market Segment Code],
    [Customer Market Segment],
    [Customer Market Sub Segment Code],
    [Customer Market Sub Segment]
	
From [$(ENV_QV_WORKING_DATA)CustomerTemp.qvd](qvd);
	


//exit script;		


Left Join(Customer)
LOAD SiteCd & '-' & country as %Country,
    country as country_orig,
    Capitalize(country) as country,
    Capitalize(country) as CountryName,
    "ec_code",
    "ssd_ec_code";
//SQL SELECT *
//FROM $(vDb).dbo.country;
Load *
From [$(ENV_QV_RAW_STAGE)country.qvd](qvd);
//Where $(vStandardSiteCondition);

Left Join(Customer)
LOAD Trim(@9:11) as ec_code,
     trim( @6:8) as ContinentCode, 
     Trim(@12:15) as CountryCode3, 
     Trim(@16:19) as CountryCodeNum
     //Trim(@20:n) as CountryName,
     //Trim(@1:5) as DoverRegion
FROM
[$(ENV_QV_EXTERNAL_DATA)CountryContinentMap.txt]
(fix, codepage is 1252, record is 1 lines);


Left Join (Customer)
Load * INLINE [
   ContinentCode, Continent
   AF, Africa
   AS, Asia
   EU, Europe
   NA, North America
   SA, South America
   OC, Oceania
   AN, Antarctic
];   

    
Drop field ShiptoCity from Customer;
Store Customer into [$(ENV_QV_WORKING_DATA)CustomerDim.qvd](qvd);
Drop Table Customer;

Customer:
LOAD [%Customer Seq ID], 
     %CustomerNumber,
     [Customer Site], 
     [Customer Type Code], 
     CustomerNumber,
     %SalespersonId, 
     %KeyAccountManager, 
     territory_code, 
     [Customer Territory], 
     [Customer Name], 
     CorporateCustomerGroup, 
     [Customer is on Credit Hold], 
     [Customer Credit Hold User], 
     [Customer Credit Hold Date], 
     [Customer Credit Hold Reason], 
     [Customer Credit Limit], 
     [Customer Ship To Name], 
     [Customer Prospect/Customer], 
     city, 
     state, 
     zip, 
     [Customer Primary Ship To], 
     [Customer Primary Ship To City], 
     [Corporate Customer Number(Sales)], 
     [Corporate Customer Name(Sales)], 
     [Corporate Customer Subordinate Short Name], 
     [Customer Type], 
     //[Customer Type Group], 
     [Customer Class], 
     [Customer End User Type Code], 
     [Customer End User Type], 
     country_orig, 
     country, 
     If(Len(Trim(CountryName))>0,CountryName,'Unknown') as CountryName, 
     ssd_ec_code, 
     CountryCode3, 
     CountryCodeNum, 
     Continent,
     ContinentCode, 
     ec_code, 
     %Country,
     [Customer Bill Country],
     [Customer Currrecy Code],
     [Customer Mapped Customer Type],
     [Custaddr Mapped Ship To Region],
     [Customer Market Segment Code],
     [Customer Market Segment],
     [Customer Market Sub Segment Code],
     [Customer Market Sub Segment]
FROM
[$(ENV_QV_WORKING_DATA)CustomerDim.qvd]
(qvd);

For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaCustomer.qvd')

	Concatenate(Customer)
	Load * 
	FROM
	[$(File)]
	(qvd);
	
Next File


Store Customer into [$(ENV_QV_FINAL_STAGE)CustomerDim.qvd](qvd);

Drop Table Customer;

End Sub



Sub CombinedCustomerDim




    
    call BuildMappingTable('EndTypeMap')
	call BuildMappingTable('CustomerTypeMap')
	call BuildMappingTable('TerritoryMap')
	call BuildMappingTable('CORPORATE_CUSTOMER_MAP')
    call BuildMappingTable('SubProductManufacturedMap')
    Call BuildMappingTable('ProductManufacturedMap')
    Call BuildMappingTable('MostGrowableCustomerMap')
    Call BuildMappingTable('EndTypeScrapMap')
    Call BuildMappingTable('MapYesNo')

    CustomerTemp:
    //All bill to Customers
    LOAD  
        %CustomerNumber,
        SiteCd as [Customer Site],
        if(len(Trim(cust_type))=0,'UDF',SubField(ApplyMap('CustomerTypeMap',[Customer Type ID],'UNK|Unknown'),'|',1)) as [Customer Type Code],
        if(len(Trim(cust_type))=0,'Undefined',SubField(ApplyMap('CustomerTypeMap',[Customer Type ID],'UNK|Unknown'),'|',2)) as [Customer Type],
        [customer Uf_MappedCustomerType] as [Customer Mapped Customer Type],
        Coalesce(name,'Undefined') as [Customer Name],
        addr##1 & '||' & addr##2 & '||' & addr##3 & '||' & addr##4 as [Customer Bill to Address],
        state as [Customer Bill to State],
        county as [Customer Bill to County],
        zip as [Customer Bill to Postal Code],
        country as [Customer Bill to Country],
        [Customer Address Corporate Customer ID] as [Customer Corporate Group],
        Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|No Customer Group|No Customer Group'),'|',1) as [Customer Corporate Customer Number],
        Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|No Customer Group|No Customer Group'),'|',2) as [Customer Corporate Customer Name],
        Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|No Customer Group|No Customer Group'),'|',3) as [Customer Corporate Customer Short Name],
        //If(Len(Trim(corp_cust))>0,[Customer Address Corporate Customer ID],[%CustomerNumber]) as [Customer Corporate Group],
        //If(
        //   Len(Trim(corp_cust))>0,
        //   corp_cust,
        //   cust_num
        //)as [Customer Corporate Customer Number],
        If(
           Len(Trim(corp_cust))>0,
           corp_cust,
           cust_num
        )as [CombinedCorpAndCustomerNumber],
        //If(
        //   Len(Trim(corp_cust))>0,
        //   Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|' & corp_cust & '- Corp Name Not Found|No Customer Group'),'|',2),
        //   If(Len(Trim(name))=0, 'Undefined',name)
        //)as [Customer Corporate Customer Name],
        //If(
        //   Len(Trim(corp_cust))>0,
        //   Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|No Customer Group|No Customer Group'),'|',3),
        //   If(Len(Trim(name))=0, 'Undefined',name)
        //) as [Customer Corporate Customer Short Name],
        If(
           Len(Trim(corp_cust))>0,
           Subfield(ApplyMap('CORPORATE_CUSTOMER_MAP',[Customer Address Corporate Customer ID], 'No Customer Group|'  & corp_cust & '-Corp Name Not Found|No Customer Group|No Customer Group'),'|',2),
           name
        ) as [CombinedCorpAndCustomer],
        
        If(credit_hold = 1,Dual('Yes',1),Dual('No',0)) as [Customer is on Credit Hold], 
        credit_hold_user as [Customer Credit Hold User], 
        Date(Floor(Num(credit_hold_date))) as [Customer Credit Hold Date], 
        credit_hold_reason as [Customer Credit Hold Reason], 
        credit_limit as [Customer Credit Limit],
        curr_code as [Customer Currrecy Code],
        cust_num as [Customer Number],
        If(Len(Trim(slsman))>0,[Salesperson ID],SiteCd & '-Undefined') as %SalespersonId,
        If(Len(Trim(Uf_KeyAcctMngr))>0,[Key Account Manager ID],SiteCd & '-Undefined') as [%KeyAccountManager],
        territory_code as [Customer Territory Code],
        If(Len(Trim(territory_code))=0,'Undefined',ApplyMap('TerritoryMap',[Territory ID],'Unknown')) as [Customer Territory],
        If(Len(Trim(end_user_type))=0,'Undefined', end_user_type) as [Customer End User Type Code],
        If(Len(Trim(end_user_type))=0,'Undefined', ApplyMap('EndTypeMap', SiteCd & '-' & end_user_type,'Unknown')) as [Customer End User Type],
        ApplyMap('MapYesNo',
        	If((Subfield(applyMap('ProductManufacturedMap',Uf_ProductManufactured),'|',2) OR SubField(ApplyMap('CustomerTypeMap',[Customer Type ID]),'|',2) = 'Intercompany'), 0,
        		If(SiteCd = 'Cook_UK' or 'INPROUK', 
            		If(cust_num = 'DP01134' or 'DP02545', 1, 0),
            	If(Len(Trim(end_user_type))=0,0,
					ApplyMap('EndTypeScrapMap', SiteCd & '-' & end_user_type,0)))),
		Dual('No',0))																								as [Customer Is Scrap User],
        country as [Customer Country Code],
        SiteCd & '-' & If(isnull(country) = -1,'Undefined', country) as [%CountryKey],
        Subfield(applyMap('ProductManufacturedMap',Uf_ProductManufactured),'|',1) as [Customer Market Segment Code],
    	Subfield(applyMap('ProductManufacturedMap',Uf_ProductManufactured),'|',2) as [Customer Market Segment],
    	Subfield(applyMap('SubProductManufacturedMap',Uf_ProductSubManufactured),'|',1) as [Customer Market Sub Segment Code],
    	Subfield(applyMap('SubProductManufacturedMap',Uf_ProductSubManufactured),'|',2) as [Customer Market Sub Segment]
    FROM
    [$(ENV_QV_FINAL_STAGE)customer_custaddr_join.qvd]
    (qvd)
    Where cust_seq = 0;




    Left Join(CustomerTemp)
    //add the ship to information
    LOAD 
        %CustomerNumber,
        [Customer Seq ID] as [%CustomerKey],
        cust_seq as [Customer Sequence],
        name as [Customer Detail Name],
        addr##1 & '||' & addr##2 & '||' & addr##3 & '||' & addr##4 as [Customer Detail Address],
        city as [Customer Detail City],
        state as [Customer Detail State],
        county as [Customer Detail County],
        zip as [Customer Detail Zip],
        country as [Customer Detail Country],
        [custaddr Uf_MappedShipToRegion] as [Customer Detail Mapped Ship To Region],
        SiteCd & '-' & If(isnull(country) = -1,'Undefined', country) as [%DetailCountryKey],
        If(Len(Trim(slsman))>0,[Salesperson ID],SiteCd & '-Undefined') as %ShipToSalespersonId,
        If(Len(Trim( [customer Uf_DPC_Region]))=0,'Undefined',[customer Uf_DPC_Region]) as [Customer Region],
        If(Len(Trim([customer Uf_DPC_SalesChannel]))=0,'Undefined',[customer Uf_DPC_SalesChannel]) as [Customer Sales Channel]
    from 
    [$(ENV_QV_FINAL_STAGE)customer_custaddr_join.qvd](qvd);

    Customer:
    LOAD  
        [%CustomerKey],
        %CustomerNumber,
        %SalespersonId,
        %ShipToSalespersonId,
        [%KeyAccountManager],
        [%CountryKey],
        [Customer Site],
        [Customer Type Code],
        [Customer Type],
        [Customer Mapped Customer Type],
        [Customer Name],
        [Customer Bill to Address],
        [Customer Bill to State],
        [Customer Bill to County],
        [Customer Bill to Postal Code],
        [Customer Bill to Country],
        [Customer Corporate Group],
        [Customer is on Credit Hold], 
        [Customer Credit Hold User], 
        [Customer Credit Hold Date], 
        [Customer Credit Hold Reason], 
        [Customer Credit Limit],
        [Customer Currrecy Code],
        [Customer Number],
        [Customer Sequence],
        If(Len(Trim([Customer Territory Code]))=0,'Undefined',[Customer Territory Code]) as [Customer Territory Code],
        If(Len(Trim([Customer Territory]))=0,'Undefined',[Customer Territory]) as [Customer Territory],
        [Customer End User Type Code],
        [Customer Is Scrap User],
        [Customer End User Type],
        [Customer Country Code],
        [Customer Detail Name],
        [Customer Detail Address],
        [Customer Detail City],
        [Customer Detail County],
        [Customer Detail State],
        [Customer Detail Zip],
        [Customer Detail Country],
        [Customer Detail Mapped Ship To Region],
        [Customer Market Segment Code],
    	[Customer Market Segment],
    	[Customer Market Sub Segment Code],
    	[Customer Market Sub Segment],
        [Customer Corporate Customer Number],
        [Customer Corporate Customer Name],
        [Customer Corporate Customer Short Name],
        [CombinedCorpAndCustomer],
        CombinedCorpAndCustomerNumber,
        [Customer Region],
        [Customer Sales Channel],
        ApplyMap('MostGrowableCustomerMap',[Customer Site] & '||' & [Customer Region] & '||' & [Customer Number],0) as [Customer isMostGrowable]
    Resident CustomerTemp;
    //Where [Customer Is Scrap User] = 'No';

	Drop table CustomerTemp;

    Left Join(Customer)
    LOAD 
    	SiteCd & '-' & country as %CountryKey,
    	Capitalize(country) as CountryName,
    	"ec_code" as [Customer EC Code]
    From [$(ENV_QV_RAW_STAGE)country.qvd](qvd);

    Left Join(Customer)
    LOAD 
    	Trim(@9:11) as [Customer EC Code],
    	trim(@6:8) as [Customer Continent Code]
    FROM
    [$(ENV_QV_EXTERNAL_DATA)CountryContinentMap.txt]
    (fix, codepage is 1252, record is 1 lines);


    Left Join (Customer)
    Load * INLINE [
    Customer Continent Code, Customer Continent
    AF, Africa
    AS, Asia
    EU, Europe
    NA, North America
    SA, South America
    OC, Oceania
    AN, Antarctic
    ];   

Concatenate(Customer)
////Add Prospects
LOAD 
       [SiteCd] & '-Prospect-' & [prospect prospect_id] AS %CustomerKey,
//       [SiteCd] & '-Prospect-' & [prospect prospect_id] as %ShipToCustomerId
     [SiteCd] & '-Prospect-' & [prospect prospect_id] as [%CustomerNumber],
     SiteCd as [Customer Site],
     'P' as [Customer Type Code],
     'Prospect' as [Customer Type],
     [prospect prospect_id] as [CustomerNumber],
//     'Non-Mag/Non-Intercompany' as [Customer Magnetics/Intercompany Type], 
     If(Len(Trim([prospect slsman]))>0,[SiteCd] & '-' & [prospect slsman],[SiteCd] & '-Undefined') as %SalespersonId,
     If(Len(Trim([prospect Uf_KeyAcctMngr]))>0,[SiteCd] & '-' & [prospect Uf_KeyAcctMngr],[SiteCd] & '-Undefined') as [%KeyAccountManager],
     [prospect territory_code] as territory_code,
//     ApplyMap('TerritoryMap', [SiteCd] & '-' & [prospect territory_code],'Undefined') as [Customer Territory],
//     SiteCd & '-' & [slsman] as Salesperson, 
     [prospect company] as [Customer Name],
     [prospect company] as [Prospect Name],
     [prospect city] as [ShiptoCity],
     [prospect city] as [Customer Bill to Address], 
     [prospect state] as [Customer Bill to State], 
     [prospect zip] as [Customer Bill to Postal Code], 
     If(Len(Trim([prospect country]))>0,[SiteCd] & '-' & [prospect country]) as [Customer Bill to Country],
     'P' as [Customer End User Type Code],
    'Prospect' as [Customer End User Type],
    'Prospect' as [Customer Prospect/Customer]
//     [prospect phone], 
//     [prospect corp_cust], 
//     [prospect internet_url], 
//     [prospect slsman], 
//     [prospect lang_code], 
//     [prospect curr_code], 
//     [prospect sic_code], 
//     [prospect territory_code] AS [Customer Territory Code] 
//     [prospect number_of_employees], 
//     [prospect company_revenue], 
//     [prospect NoteExistsFlag], 
//     [prospect CreatedBy], 
//     [prospect UpdatedBy], 
//     [prospect CreateDate], 
//     [prospect RecordDate], 
//     [prospect InWorkflow], 
//     [prospect RowPointer], 
//     [prospect Uf_KeyAcctMngr], 
//     [prospect sales_team_id]
FROM
[$(ENV_QV_RAW_STAGE)prospect.qvd]
(qvd);

    Store Customer into [$(ENV_QV_FINAL_STAGE)NewCustomerDim.qvd](qvd);

    Drop Table Customer;

End Sub



Sub BuildTransferCustomer

		call BuildMappingTable('SYSTEM_SITE_TERRITORY_MAP')
		Call BuildMappingTable('TerritoryMap')
		Call BuildMappingTable('SystemSiteNameMap')
		Call BuildMappingTable('WarehouseNameMap')
		Call BuildMappingTable('SystemSiteKAMMap')
		Call BuildMappingTable('WarehouseCountryMap')
		Call BuildMappingTable('SiteCurrencyCodeMap')
		
		
		TransferCustomer:
		LOAD SiteCd, 
		     SiteCd & '-' & [transfer to_site] & '-'  & [transfer to_whse] as [%Customer Seq ID],
		     'TRANSFER' as [Customer Type Code], 
		     SiteCd & '-' & [transfer to_site] as [site],
		     SiteCd & '-' & [transfer to_whse] as whse, 
		     ApplyMap('SYSTEM_SITE_TERRITORY_MAP',SiteCd & '-' & [transfer to_site],'Unknown') as [Customer Territory Code],
		     ApplyMap('TerritoryMap',ApplyMap('SYSTEM_SITE_TERRITORY_MAP',SiteCd & '-' & [transfer to_site],'Unknown'),'Unknown') as [Customer Territory],
		     ApplyMap('SystemSiteKAMMap',SiteCd & '-' & [transfer to_site],'Unknown') as %KeyAccountManager,
		    [transfer to_site] as [CustomerNumber],
		     ApplyMap('SystemSiteNameMap',SiteCd & '-' & [transfer to_site],'Unknown')  as [Customer Name],
		     'Transfer' as [Corporate Customer Group],
		     ApplyMap('SystemSiteNameMap',SiteCd & '-' & [transfer to_site],'Unknown') & '-' & ApplyMap('WarehouseNameMap',SiteCd & '-' & [transfer to_whse],'Unknown') as [Customer Ship To Name],
		     //[transfer to_whse], 
		     //[transfer to_site]
		     SubField(applyMap('WarehouseCountryMap',SiteCd & '-' & [transfer to_whse],Null()),'|',1) as [Customer City],
		     SubField(applyMap('WarehouseCountryMap',SiteCd & '-' & [transfer to_whse],Null()),'|',2) as [Customer State],
		    SubField(applyMap('WarehouseCountryMap',SiteCd & '-' & [transfer to_whse],Null()),'|',3) as [Customer Zip],
		     ApplyMap('SystemSiteNameMap',SiteCd & '-' & [transfer to_site],'Unknown') as [Customer Primary Ship To],
		     SubField(applyMap('WarehouseCountryMap',SiteCd & '-' & [transfer to_whse],Null()),'|',1) as [Customer Primary Ship To City],
		     'Transfer' as [Corporate Customer Number(Sales)],
		     'Transfer' as [Corporate Customer Name(Sales)],
		     'Transfer' as [Corporate Customer Subordinate Short Name],
		     'Internal' as [Customer Prospect/Customer],
		     'Inter Company' as [Customer Type],
		     'Inter Company' as [Customer Type Group],
		     'Inter Company' as [Customer End User Type Code],
		     'Inter Company' as [Customer End User Type],
		     SubField(applyMap('WarehouseCountryMap',SiteCd & '-' & [transfer to_whse],Null()),'|',4) as %Country,
		     SubField(SubField(applyMap('WarehouseCountryMap',SiteCd & '-' & [transfer to_whse],Null()),'|',4),'-',2) as [Customer Original Country],
		     applymap('SiteCurrencyCodeMap',SiteCd & '-' & [transfer to_site],Null()) as [Customer Currrecy Code]
		FROM
		[$(ENV_QV_RAW_STAGE)transfer.qvd]
		(qvd)
		Where not exists([%Customer Seq ID], SiteCd & '-' & [transfer to_site] & '-'  & [transfer to_whse]);
		
		Left Join(TransferCustomer)
		LOAD SiteCd & '-' & country as %Country,
		     Capitalize(country) as [Customer Country],
		    Capitalize(country) as  [Customer Country Name],
		    Capitalize(country) as [Customer Bill Country],
		    "ec_code" as [Customer ec Code];
		//SQL SELECT *
		//FROM $(vDb).dbo.country;
		Load *
		From [$(ENV_QV_RAW_STAGE)country.qvd](qvd);
		//Where $(vStandardSiteCondition);
		
		Left Join(TransferCustomer)
		LOAD Trim(@9:11) as [Customer ec Code],
		     trim( @6:8) as [Customer Continent Code] 
		     //Trim(@12:15) as CountryCode3, 
		     //Trim(@16:19) as CountryCodeNum
		     //Trim(@20:n) as CountryName,
		     //Trim(@1:5) as DoverRegion
		FROM
		[$(ENV_QV_EXTERNAL_DATA)CountryContinentMap.txt]
		(fix, codepage is 1252, record is 1 lines);
		
		
		Left Join (TransferCustomer)
		Load * INLINE [
		   Customer Continent Code, Customer Continent
		   AF, Africa
		   AS, Asia
		   EU, Europe
		   NA, North America
		   SA, South America
		   OC, Oceania
		   AN, Antarctic
		];   
		
		
		
		Store TransferCustomer into [$(ENV_QV_FINAL_STAGE)TransferCustomer.qvd](qvd);
		Drop Table TransferCustomer;
		

End Sub



sub BuildTransferOrderDim
	
	call BuildMappingTable('SystemSiteNameMap')
	Call BuildMappingTable('WarehouseNameMap')  
  
  
		TransferOrderDim:
		Load
		   PrimaryKey as [%OrderNumber],
		   'T' as [Order Type],
		   [transfer trn_num] as [Order Number],
		   //Null() as [Order Estimate Number(Not connected to quotes)],
		   [transfer uf_Cust_po] as [Order Customer PO],
		   Date(Floor(Num([transfer order_date]))) as [Order Date],
		   //Null() as [Order Terms Code],
		   [transfer ship_code]as [Order Ship Code],
		   [transfer stat] as [Order Status],
		   ApplyMap('SystemSiteNameMap',SiteCd & '-' & [transfer from_site],'Unknown') as [Order Transfer From Site],
		   ApplyMap('WarehouseNameMap',SiteCd & '-' & [transfer from_whse],'Unknown') as [Order Transfer From Warehouse],
		   ApplyMap('SystemSiteNameMap',SiteCd & '-' & [transfer to_site],'Unknown') as [Order Transfer to Site],
		   ApplyMap('WarehouseNameMap',SiteCd & '-' & [transfer to_whse],'Unknown') as [Order Transfer to Warehouse],
		   //Null() as [Order Close Date],
		   //Null() as [Order Won Lost Group Code],
		   //Null() as [Order Won Lost Group],
		   //Null() as [Order Won Lost Code],
		   //Null() as [Order Won Lost],
		   //Null() as [Application],
		   //Null() as [LeadTime],
		   //Null() as [EngineeringInput],
		   //Null() as [Complexity],
		   //Null() as [Competitors],
		   //Null() as [PossibleRepeats],
		   //Null() as [ItemType],
		   //Null() as [ProductDesign],
		   //Null() as [QuoteNotes],
		   //Null() as [WonLostEstimatedCloseDate],
		   Date(Floor(Num([transfer order_date]))) as [Order Receipt Date],
		   //Null() as [Order Taken By],
		   [transfer CreatedBy] as [Order Created By]
		   //Null() as [Order Delivery Terms]
		FROM
		[$(ENV_QV_RAW_STAGE)transfer.qvd]
		(qvd);
		
		
		Store TransferOrderDim into [$(ENV_QV_FINAL_STAGE)TransferOrderDim.qvd](qvd);
		Drop Table TransferOrderDim;

end sub



sub BuildTransferOrderLineDim
		TransferOrderLineDim:
		Load
		   PrimaryKey as [%OrderLineKey],
		   [trnitem trn_line] as [Order Line Number],
		   'TRN' as [Order Line Hold Code],
		   'Transfer' as [Order Line Hold Code Desc],
		   0 as [?Order Line Estimated GP],
		   0 as [Order Line Estimated GP],
		   Null() as [Order Line New/Repeat Business],
		   Null() as [Order Line Desc],
		   [trnitem stat] as [Order Line Status],
		   Date(Floor(Num([trnitem projected_date]))) as [Order Line Projected Date],
		   Date(Floor(Num([trnitem sch_ship_date]))) as [Order Line Due Date],
		   Date(Floor(Num([trnitem ship_date]))) as [Order Line Release Date],
		   Date(Floor(Num([trnitem sch_rcv_date]))) as [Order Line Promise Date],
		   Null() as [Order Line Ref Number],
		   Null() as [Order Line New/Repeat],
		   Date(Floor(Num([trnitem sch_rcv_date]))) as [Order Line Promise Date WBUET],
		   [trnitem uf_WB_Label_CustItem] as [Order Line Cust Item] 
		FROM
		[$(ENV_QV_RAW_STAGE)trnitem.qvd]
		(qvd);
		
		
		Store TransferOrderLineDim into [$(ENV_QV_FINAL_STAGE)TransferOrderLineDim.qvd](qvd);
		Drop Table TransferOrderLineDim;
		
End Sub



Sub BuildTransferOpenOrders
		Call BuildMappingTable('SystemSiteKAMMap')
		Call BuildMappingTable('TransferHeaderExchangeRateMap')
		
		TransferOpenOrders:
		Load
		PrimaryKey as [%ComplaintOrderLinkKey],
		[transfer exch_rate] as [Conv_CUST]
		FROM
		[$(ENV_QV_RAW_STAGE)transfer.qvd]
		(qvd);
		
		Inner Join(TransferOpenOrders)
		Load
		   SiteCd & '-' & [trnitem trn_num] as [%ComplaintOrderLinkKey],
		   SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] as [%Customer Seq ID],
		   //Null() as [%CustomerComplaintID],
		   SiteCd & '-' & [trnitem item] as [%item],
		   PrimaryKey as [%OrderLineKey],
		   ApplyMap('SystemSiteKAMMap',SiteCd & '-' & [trnitem to_site],'Unknown') as [%Salesman],
		   SiteCd as [%Site],
		   Date(Floor(Num([trnitem sch_ship_date]))) as [MasterDate],
		   'Transfer Open Orders' as [FactType],
		   1 as [Open Order Line Count],
		   Date(Floor(Num([trnitem ship_date]))) as [Ship Date],
		   -(Date(Floor(Num([trnitem sch_ship_date]))) <= Date(Floor(Num('$(vToday)')))) as [IsLate],
		   -(Date(Floor(Num([trnitem sch_ship_date]))) <= Date(Floor(Num('$(vToday)')))) as [IsSPromisePast],
		   [trnitem qty_req] as [Open Order Remaining Units],
		   [trnitem qty_req] * ([trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1)) as [Open Order Remaining Value],
		   [trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1) as [Open Order Unit Price],
		   [trnitem unit_cost] * [trnitem qty_req] as [Open Order Remaining Extended Cost]
		FROM
		[$(ENV_QV_RAW_STAGE)trnitem.qvd]
		(qvd)
		Where [trnitem stat] = 'O'; 
		
		
		   
		   
		Left Join(TransferOpenOrders)
		LOAD Date(Floor(Num(CurrencyDate))) as [MasterDate], 
		     Site as %Site, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM
		[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
		(qvd); 	
		
		Store TransferOpenOrders into [$(ENV_QV_FINAL_STAGE)TransferOpenOrders.qvd](qvd);
		Drop Table TransferOpenOrders;
End sub



Sub BuildTransferBookings
		Call BuildMappingTable('SystemSiteKAMMap')
		Call BuildMappingTable('TransferHeaderExchangeRateMap')
		
		TransferBookings:
		Load
		   PrimaryKey as [%ComplaintOrderLinkKey],
		   Date(Floor(Num([transfer order_date]))) as [MasterDate],
           Year(Date(Floor(Num([transfer order_date])))) & ' Actuals'  as %ForecastVersion,
           'TA' & Date(Floor(Num([transfer order_date])),'YYMM')  as %ForecastPeriod,
		   [transfer exch_rate] as [Conv_CUST]
		FROM
		[$(ENV_QV_RAW_STAGE)transfer.qvd]
		(qvd);
		
		Inner Join(TransferBookings)
		Load
		   SiteCd & '-' & [trnitem trn_num] as [%ComplaintOrderLinkKey],
		   SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] as [%Customer Seq ID],
		   //Null() as [%CustomerComplaintID],
		   SiteCd & '-' & [trnitem item] as [%item],
		   PrimaryKey as [%OrderLineKey],
		   ApplyMap('SystemSiteKAMMap',SiteCd & '-' & [trnitem to_site],'Unknown') as [%Salesman],
		   SiteCd as [%Site],
		   'Transfer Bookings' as [FactType],
		   [trnitem qty_req] as [Booking Qty],
		   [trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1) as [Booking Unit Price],
		   [trnitem qty_shipped] * ([trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1)) as [Booking Extended Amt]
		FROM
		[$(ENV_QV_RAW_STAGE)trnitem.qvd]
		(qvd);
		   
		   
		Left Join(TransferBookings)
		LOAD Date(Floor(Num(CurrencyDate))) as [MasterDate], 
		     Site as %Site, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM
		[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
		(qvd); 
				
		
		
		Store TransferBookings into [$(ENV_QV_FINAL_STAGE)TransferBookings.qvd](qvd);
		Drop Table TransferBookings;
		
End Sub



sub BuildTransferShipments
		
		Call BuildMappingTable('SystemSiteKAMMap')
		Call BuildMappingTable('TransferHeaderExchangeRateMap')
		
		TransferShipments:
		Load
		PrimaryKey as [%ComplaintOrderLinkKey],
		[transfer exch_rate] as [Conv_CUST]
		FROM
		[$(ENV_QV_RAW_STAGE)transfer.qvd]
		(qvd);
		
		Inner Join(TransferShipments)
		Load
		   SiteCd & '-' & [trnitem trn_num] as [%ComplaintOrderLinkKey],
		   SiteCd & '-' & [trnitem to_site] & '-' & [trnitem to_whse] as [%Customer Seq ID],
		   //Null() as [%CustomerComplaintID],
		   SiteCd & '-' & [trnitem item] as [%item],
		   PrimaryKey as [%OrderLineKey],
		   ApplyMap('SystemSiteKAMMap',SiteCd & '-' & [trnitem to_site],'Unknown') as [%Salesman],
		   SiteCd as [%Site],
		   Date(Floor(Num([trnitem ship_date]))) as [MasterDate],
		   'Transfer Shipments' as [FactType],
		   1 as [ShipCounter],
		   Date(Floor(Num([trnitem ship_date]))) as [Ship Date],
		   -(Date(Floor(Num([trnitem ship_date]))) <= Date(Floor(Num([trnitem sch_ship_date])))) as [IsShipOnTime],
		   -(Date(Floor(Num([trnitem ship_date]))) <= Date(Floor(Num([trnitem sch_ship_date])))) as [IsShipOnTime(Promise Date)],
		   [trnitem qty_shipped] as [Shipping Qty],
		   [trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1) as [Ship Unit Price],
		   [trnitem qty_shipped] * ([trnitem unit_price]/Applymap('TransferHeaderExchangeRateMap',SiteCd & '-' & [trnitem trn_num],1)) as [Ship Extended Price],
		   [trnitem unit_cost] * [trnitem qty_shipped] as [Ship Extended Cost],
		   [trnitem unit_cost] as [Ship Unit Cost],
		   [trnitem matl_cost] as [Ship Unit Material Cost],
		   [trnitem lbr_cost] as [Ship Unit Labor Cost],
		   Rangesum([trnitem fovhd_cost],[trnitem vovhd_cost])as [Ship Unit Overhead Cost],
		   [trnitem fovhd_cost] as [Ship Unit Fixed Overhead Cost],
		   [trnitem vovhd_cost] as [Ship Unit Variable Overhead Cost],
		   [trnitem out_cost] as [Ship Unit Outside Cost]
		FROM
		[$(ENV_QV_RAW_STAGE)trnitem.qvd]
		(qvd)
		Where [trnitem stat] <> 'O';   
		   
		   
		Left Join(TransferShipments)
		LOAD Date(Floor(Num(CurrencyDate))) as [MasterDate], 
		     Site as %Site, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM
		[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
		(qvd); 	
		
		
		
		Store TransferShipments into [$(ENV_QV_FINAL_STAGE)TransferShipments.qvd](qvd);
		Drop Table TransferShipments;

End Sub



Sub SROInvoiceFacts

		call BuildMappingTable('INVOICE_DISC_MAP')
		
		FSSites:
		CrossTable('FSSites','FSInclude',1)
		LOAD *
		FROM
		[$(ENV_QV_EXTERNAL_DATA)SiteTableInfo.xlsx]
		(ooxml, embedded labels, table is SiteApps)
		Where AppName = 'Field Service Toolkit';
		
		slsman:       
		LOAD PrimaryKey as %SalesPersonId, 
		     slsman as [Salesperson Code], 
		     //If(Len(Trim([slsman Uf_Cook_Slsman_Desc]))=0,[slsman UF_Cook_Slsman_Desc],[slsman Uf_Cook_Slsman_Desc]) as [Salesperson Name],
		     [slsman Uf_Cook_Slsman_Desc] as [Salesperson Name],
		     SiteCd & '-' & If(Len(Trim(slsmangr))=0,SiteCd,slsmangr) as [%SalespersonManagerId]

		FROM
		[$(ENV_QV_RAW_STAGE)slsman.qvd]
		(qvd)
		Where exists(FSSites,SiteCd);
		
		Concatenate(slsman)
		Load
		FSSites & '-' & FSSites as %SalesPersonId,
		FSSites as [Salesperson Code],
		FSSites as [Salesperson Name],
		'Cook' as [%SalespersonManagerId]
		Resident
		   FSSites;

		Concatenate(slsman)
		Load * Inline [
		%SalesPersonId,Salesperson Code,Salesperson Name
		Cook,Cook,Cook
		];		
		
		
		//Hierarchy(Salesperson, "Sales Manager", "SalespersonName",'Supervisor',"SalespersonName",'SalespersonTreeView','/')
		FSSalesHierarchy:
		Hierarchy(%SalesPersonId,[%SalespersonManagerId],[Salesperson Name],'Supervisor',[Salesperson Name],'Path','\','Depth')
		Load
		    %SalesPersonId,[%SalespersonManagerId],[Salesperson Name]
		Resident slsman;
		
		Left Join (FSSalesHierarchy)
		Load
		   %SalesPersonId,[Salesperson Code]
		resident slsman;
		
		Store FSSalesHierarchy into [$(ENV_QV_FINAL_STAGE)FSSalesHierarchy.qvd](qvd); 
		Drop table FSSalesHierarchy;
		
		FSSalesHierarchyBelongsTo:
		HierarchyBelongsTo(%SalesPersonId,[%SalespersonManagerId],[Salesperson Name],'Supervisor','Supervisor Name','DepthDiff')
		Load
		    %SalesPersonId,[%SalespersonManagerId],[Salesperson Name]
		Resident slsman;
		
		Left Join (FSSalesHierarchyBelongsTo)
		Load
		   %SalesPersonId,[Salesperson Code]
		resident slsman;
		
		Store FSSalesHierarchyBelongsTo into [$(ENV_QV_FINAL_STAGE)FSSalesHierarchyBelongsTo.qvd](qvd); 
		Drop table FSSalesHierarchyBelongsTo;  
		
		Drop table slsman;
				
		
		SROHeaderFact:
		LOAD SiteCd as %SiteID,
		     [Invoice ID] as %InvoiceID,
		     //relationship between invoice header and fs_sro_inv_item does not include the invoice sequence number
		     SiteCd & '-' & [Invoice Header Number] as %FSSROInvoiceID,
		     SiteCd & '-' & [Invoice Header slsman] as %SlsmanId,
		     'Invoice Header' as FactType,
		     //[Invoice Header Number], 
		     //[Invoice Header inv_seq],
		     [Invoice Customer ID] as %ShipToCustomerID,
		     SiteCd & '-' &  [Invoice Customer Number] as %BillToCustomerID,
		     //[Invoice Header cust_seq], 
		     SiteCd & '-' & [Invoice Header co_num] as [%OrderID], 
		     [Invoice Header Invoice Date] as MasterDate,
		     [Invoice Header Terms ID] as %TermsID,
		     [Invoice Header misc_charges] as [Misc Charges], 
		     [Invoice Header prepaid_amt] as [Prepaid Amount], 
		     [Invoice Header freight] as [Freight Amount], 
		     [Invoice Header cost] as [Total Cost Amount], 
		     [Invoice Header price] as [Total Price], 
		
		     [Invoice Header exch_rate] as [Exchange Rate]
		FROM
		[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
		(qvd)
		Where exists(FSSites,SiteCd);
		
		Left Join(SROHeaderFact)
		LOAD 
		      [inv_stax InvoiceId] as [%InvoiceID], 
		     Sum([inv_stax sales_tax]) as [Sales Tax Amount]
		FROM
		[$(ENV_QV_RAW_STAGE)inv_stax.qvd]
		(qvd)
		Group by [inv_stax InvoiceId];
		
		Store SROHeaderFact into [$(ENV_QV_FINAL_STAGE)FSInvoiceHeaderFact.qvd](QVD);
		Drop table SROHeaderFact;
		//Left Join(SROHeaderFact)
		//LOAD PrimaryKey as [%OrderID],
		//   [fs_sro CreateDate] as sro_CreateDate
		//FROM
		//[$(ENV_QV_RAW_STAGE)fs_sro.qvd]
		//(qvd);
		
		
		InvoiceItem:
		Load
		     %SiteID,
		     %InvoiceID,
		     %FSSROInvoiceID,
		     %SlsmanId,
		     %ShipToCustomerID,
		     %BillToCustomerID, 
		     [%OrderID], 
		     MasterDate,
		     %TermsID,
		     'Invoice Line' as FactType
		from [$(ENV_QV_FINAL_STAGE)FSInvoiceHeaderFact.qvd](QVD);
		
		
		inner Join(InvoiceItem)
		load
		    [Invoice ID] as %FSSROInvoiceID,
		    SROOperId as %SROOperID,
		    "inv_num",
		    //inv_seq,
		    "inv_line",
		    sro_num,
		    "sro_line",
		    "sro_oper",
		    line_cost as [Item Cost],
            [Oper Product Description],
		    line_disc/100 as [Line Discount],
		    hdr_disc/100 as [Header Discount],
		    ItemId,
		    [Item No],
		    line_dtl_price as [Standard Price],
		    ((line_dtl_price *(1-(line_disc/100))) *(1-(hdr_disc/100))) as [Net Price],
		    ((line_dtl_price *(1-(line_disc/100))) *(1-(hdr_disc/100))) * line_qty_to_bill as [Extended Amount],
		    line_qty_to_bill as [Quantity];
		LOAD 
		    SiteCd & '-' & [fs_sro_inv_item sro_line]  & '-' & [fs_sro_inv_item sro_num] & '-' &  [fs_sro_inv_item sro_oper] as SROOperId,
		    [fs_sro_inv_item Site-InvoiceNum] as [Invoice ID],
		    [fs_sro_inv_item inv_line] as inv_line, 
		    [fs_sro_inv_item inv_num] as inv_num,
		    [fs_sro_inv_item sro_num] as sro_num,
		    [fs_sro_inv_item sro_line] as sro_line,
		    [fs_sro_inv_item sro_oper] as sro_oper,
		    [fs_sro_inv_item cost] as line_cost,
		    [fs_sro_inv_item description] as [Oper Product Description],
		    [fs_sro_inv_item disc] as line_disc,
		    applymap('INVOICE_DISC_MAP',[fs_sro_inv_item Site-InvoiceNum],0) as hdr_disc,
		    If(isnull([fs_sro_inv_item item]),'Project Fixed or Misc',SiteCd & '-' & [fs_sro_inv_item item]) as ItemId,
		    If(isnull([fs_sro_inv_item item]),'Project Fixed or Misc',[fs_sro_inv_item item]) as [Item No],
		    [fs_sro_inv_item price] as line_price,
		    [fs_sro_inv_item proj_price] as line_proj_price,
		    If([fs_sro_inv_item price] = 0,If([fs_sro_inv_item proj_price] = 0,0,[fs_sro_inv_item proj_price]),[fs_sro_inv_item price]) as line_dtl_price,
		    [fs_sro_inv_item qty_to_bill] as line_qty_to_bill
		FROM
		[$(ENV_QV_RAW_STAGE)fs_sro_inv_item.qvd]
		(qvd)
		Where exists(FSSites,SiteCd);
		
		Left Join(InvoiceItem)
		LOAD PrimaryKey as %SROOperID,
		     [fs_sro_oper description] as [Oper Description],
		     [fs_sro_oper product_code] as [Oper Product Code]  
		FROM
		[$(ENV_QV_RAW_STAGE)fs_sro_oper.qvd]
		(qvd);
		
		
		
		
		Left Join(InvoiceItem)
		LOAD PrimaryKey as ItemId, 
		     [Item description] as item_description, 
		     [Item product_code] as item_product_code
		FROM
		[$(ENV_QV_RAW_STAGE)item.qvd]
		(qvd);
		

		
		Left Join(InvoiceItem)
		Load
		   %InvoiceID,
		    "inv_line",
		    If(isnull(item_product_code),[Oper Product Code] ,item_product_code) as [Product Code],
		    If(isnull(item_product_code),[Oper Description] ,item_description) as [Product Description]
		Resident
		   InvoiceItem;
		
		Drop Fields item_description, item_product_code, [Oper Description], [Oper Product Code];
		
		
		Store InvoiceItem into [$(ENV_QV_FINAL_STAGE)FSInvoiceLineFact.qvd](QVD);
		Drop table InvoiceItem;


End Sub



Sub ProcessCurrencyRates

        //UAE Rates Only
        //Get the rates for AED to USD from syteline
		CurrencyRateTemp:
		Load
			'Cook_UAE' as SiteCd,
			//curr_code,
			EffDate,
			//Max(eff_date) as eff_date,
			subfield(concat(buy_rate,'|',1000000 - eff_date),'|',1) as Conv_USD			
		Group by EffDate;
		Load
			from_curr_code as curr_code,
			Date(Floor(Num(eff_date))) as EffDate,
			eff_date,
			buy_rate,
			sell_rate
		From
		[$(ENV_QV_RAW_STAGE)currate.qvd]
		(qvd)
		Where (SiteCd = 'Cook_UAE' and from_curr_code = 'USD' and to_curr_code = 'AED');
		


		
		//What is the earliest effdate for the rates
		MinEffDate:
		Load
		   Date(Min(FieldValue('EffDate',Recno()))) as MinEffDate
		AutoGenerate FieldValueCount('EffDate');
		
		Let vMinEffDate  = FieldValue('MinEffDate',1);
		drop table MinEffDate;
		
		//Add historical rates from an external source
		Concatenate(CurrencyRateTemp)
		LOAD 'Cook_UAE' as SiteCd, 
		     FileDate as EffDate,
		     ExchRate as Conv_USD 
		FROM
		[$(ENV_QV_FS_CURRENCY)ExchangeRates.qvd]
		(qvd)
		Where Symbol = 'AED' and TargetCode = 'USD' and FileDate < date(Num('$(vMinEffDate)'));
		
		



		//Sort the rates by the effdate and determine the end dates based on the next effdate
        CurrencyRateTemp2:
        Load 
        	RowNo() as RowNumber,
            SiteCd,
        	EffDate,
        	Conv_USD
        Resident CurrencyRateTemp
        Order by EffDate;
        
        Drop Table CurrencyRateTemp;
        
        Left Join(CurrencyRateTemp2)
        Load
            RowNumber - 1 as RowNumber,
            Date(EffDate - 1) as TempEndDate
        Resident CurrencyRateTemp2;
        
        //Resolve backfill the nulls on the end dates presumably this would only be the latest record
        Left Join(CurrencyRateTemp2)
        Load
           RowNumber,
           If(Isnull(TempEndDate),Date(Num('12/31/2025')),TempEndDate) as EndDate
        Resident CurrencyRateTemp2;
        
        //Get the date ranges
        DateRange:
        Load
           Min(EffDate) as MinDate,
           Max(EndDate) as MaxDate
        Resident
           CurrencyRateTemp2;
           
         Let vMinDate = FieldValue('MinDate',1);
         Let vMaxDate = FieldValue('MaxDate',1);
         Drop Table DateRange;

        //Blow out the rows so there is one rate per day.         
         Left Join(CurrencyRateTemp2)
         Load
            Date(RecNo() + $(vMinDate) -1) as CurrencyDate
         AutoGenerate
            $(vMaxDate) - $(vMinDate) + 1;
            
          Inner Join(CurrencyRateTemp2)
          Load
             EffDate, CurrencyDate
          Resident CurrencyRateTemp2
          Where CurrencyDate >= EffDate and CurrencyDate <= EndDate;
          
          drop fields EffDate, RowNumber, EndDate, TempEndDate from CurrencyRateTemp2;
          
          //Determine the AED to GBP Rate based on the AED to USD and USD to GBP rates
          //This is needed becase the GBP rate does not exist in the data



        AEDToGBPTemp:
        Load
        	EffDate as BeginDate,
			//Max(eff_date) as eff_date,
			//subfield(concat(buy_rate,'|',1000000 - eff_date),'|',1) as buy_rate,
			subfield(concat(sell_rate,'|',1000000 - eff_date),'|',1) as Conv_USD_GBP			
		Group by curr_code, EffDate;
		Load
			from_curr_code as curr_code,
			Date(Floor(Num(eff_date))) as EffDate,
			eff_date,
			buy_rate,
			sell_rate
		From
		[$(ENV_QV_RAW_STAGE)currate.qvd]
		(qvd)
		Where (SiteCd = 'US' and from_curr_code = 'GBP' and to_curr_code = 'USD');
		
		MinBegin:
		Load
		   Min(BeginDate) as MinDate
		Resident
		   AEDToGBPTemp;
		
		Let vMinEffDate = FieldValue('MinDate',1);   
        Drop Table MinBegin;
		//Add historical rates from an external source		
		Concatenate(AEDToGBPTemp)
		LOAD 
		     FileDate as BeginDate,
		     ExchRate as Conv_USD_GBP 
		FROM
		[$(ENV_QV_FS_CURRENCY)ExchangeRates.qvd]
		(qvd)
		Where Symbol = 'USD' and TargetCode = 'GBP' and FileDate < date(Num('$(vMinEffDate)'));
		
		//Sort the Results
		SortedRates:
		Load
		   RowNo() as RecordNumber,
		   BeginDate,
		   Conv_USD_GBP
		Resident AEDToGBPTemp
		Order by BeginDate;
		
		Drop Table AEDToGBPTemp;
		
		Left Join(SortedRates)
		Load
		   RecordNumber - 1 as RecordNumber,
		   Date(BeginDate - 1) as TempEndDate
		 Resident SortedRates;
		
		//Resolve backfill the nulls on the end dates presumably this would only be the latest record
        Left Join(SortedRates)
        Load
           RecordNumber,
           If(Isnull(TempEndDate),Date(Num('12/31/2025')),TempEndDate) as EndDate
        Resident SortedRates; 
		 
		//Get the date ranges
        DateRange:
        Load
           Min(BeginDate) as MinDate,
           Max(EndDate) as MaxDate
        Resident
           SortedRates;
           
         Let vMinDate = FieldValue('MinDate',1);
         Let vMaxDate = FieldValue('MaxDate',1);
         Drop Table DateRange;

        //Blow out the rows so there is one rate per day.         
         Left Join(SortedRates)
         Load
            Date(RecNo() + $(vMinDate) -1) as CurrencyDate
         AutoGenerate
            $(vMaxDate) - $(vMinDate) + 1;
            
          Inner Join(SortedRates)
          Load
             BeginDate, CurrencyDate
          Resident SortedRates
          Where CurrencyDate >= BeginDate and CurrencyDate <= EndDate;
          
          Left Join(CurrencyRateTemp2)
          Load CurrencyDate, Conv_USD_GBP
          Resident SortedRates;
          
          Drop table SortedRates;
          
          Left Join(CurrencyRateTemp2)
          LOAD CurrencyDate, Conv_USD * Conv_USD_GBP as Conv_GBP
          Resident
          CurrencyRateTemp2;
		
		  Drop Field Conv_USD_GBP from CurrencyRateTemp2;
		  Store CurrencyRateTemp2 into [$(ENV_QV_FS_CURRENCY)UAE Daily Rates.qvd](qvd);
		  
		  Drop Table CurrencyRateTemp2;
		
		//Standard Site Currency conversion  
		SiteRateDefinition:
		LOAD
		   RowNo() as RateDefRecordNum,
		   SiteCd as RateSite, 
           [USD Conv Exp], 
           [GBP Conv Exp]
		FROM
		[$(ENV_QV_EXTERNAL_DATA)SiteTableInfo.xlsx]
		(ooxml, embedded labels, table is Sites)
		Where Len(Trim([USD Conv Exp]))>0 and Len(Trim([GBP Conv Exp]))>0;

 
 		Let vRateCount = FieldValueCount('RateDefRecordNum');
 		
		For rate.i = 1 to $(vRateCount)
			let vRec = FieldValue('RateDefRecordNum',$(rate.i));
			Let vRateSite = Lookup('RateSite','RateDefRecordNum','$(vRec)','SiteRateDefinition'); 
		    Let vUSDExpr = Lookup('USD Conv Exp','RateDefRecordNum','$(vRec)','SiteRateDefinition');
		    Let vGBPExpr = Lookup('GBP Conv Exp','RateDefRecordNum','$(vRec)','SiteRateDefinition');
		    
			CurrencyRateTemp:
			Load
			   SiteCd,
			   EffDate,
			   $(vUSDExpr),
			   $(vGBPExpr);
			Load
				'$(vRateSite)' as SiteCd,
				//curr_code,
				EffDate,
				//Max(eff_date) as eff_date,
				subfield(concat(buy_rate,'|',1000000 - eff_date),'|',1) as buy_rate,
				subfield(concat(sell_rate,'|',1000000 - eff_date),'|',1) as sell_rate				
			Group by EffDate;
			Load
				from_curr_code as curr_code,
				Date(Floor(Num(eff_date))) as EffDate,
				eff_date,
				buy_rate,
				sell_rate
			From
			[$(ENV_QV_RAW_STAGE)currate.qvd]
			(qvd)
			Where (SiteCd = 'US' and from_curr_code = 'GBP' and to_curr_code = 'USD');
			
		
		Next
		
		Drop Table SiteRateDefinition;
		
		//Sort the rows and Define the end dates
		CurrencyRateSorted:
		Load
		   RowNo() as RowNumber, *
		Resident CurrencyRateTemp
		Order By SiteCd, EffDate;
		
		Drop Table CurrencyRateTemp;
		
		Left Join(CurrencyRateSorted)
		Load
		   SiteCd,
		   RowNumber - 1 as RowNumber,
		   Date(EffDate - 1) as EndDateTemp
		Resident
		   CurrencyRateSorted;
		
		//Resolve the Null End Dates
		Left Join(CurrencyRateSorted)
		Load
		   RowNumber,
		   If(Isnull(EndDateTemp),Date(Num('12/31/2025')),EndDateTemp) as EndDate
		Resident
		CurrencyRateSorted;
		   
		//Determine the Range of dates in the table
		Range:
		Load
		   Min(EffDate) as MinDate,
		   Max(EndDate) as MaxDate
		 Resident CurrencyRateSorted;
		 
		Drop fields RowNumber,EndDateTemp from CurrencyRateSorted;
		 
		Let vMinDate = FieldValue('MinDate',1);
		Let vMaxDate = FieldValue('MaxDate',1);
		Drop Table Range;
		
		Left Join(CurrencyRateSorted)
		Load
		   Date($(vMinDate) + RecNo() - 1) as CurrencyDate
		AutoGenerate
		   $(vMaxDate) - $(vMinDate) + 1;
		   
		//Limit the results to only the days that the rate is effective.
		Inner Join(CurrencyRateSorted)
		Load
		   SiteCd, EffDate, CurrencyDate
		Resident CurrencyRateSorted
		Where CurrencyDate >= EffDate and CurrencyDate <= EndDate;
		
		Drop Fields EffDate, EndDate from CurrencyRateSorted;
		 		   
		//Add the UAE Rates
		Concatenate(CurrencyRateSorted)
		Load SiteCd, CurrencyDate,Conv_USD,Conv_GBP
		From
		[$(ENV_QV_FS_CURRENCY)UAE Daily Rates.qvd](qvd);
		
		Left Join(CurrencyRateSorted)
		Load 
		   1 as Conv_LOCAL
		AutoGenerate 1;
		
		Rename Field SiteCd to Site;
		
		Store CurrencyRateSorted into [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd];
		Drop Table CurrencyRateSorted;
		
        DailyCurrencyRates:
        LOAD
            Site,
            CurrencyDate,
            Conv_USD,
            Conv_GBP,
            Conv_LOCAL
        FROM [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
        (qvd);


        BeginDates:
        Load
          Site,
          Min(CurrencyDate) - 1 as EndDate,
          Num('1/1/2000') as BeginDate,
          FirstSortedValue(Conv_USD,CurrencyDate) as USDRate,
          FirstSortedValue(Conv_GBP,CurrencyDate) as GBPRate,
          FirstSortedValue(Conv_LOCAL,CurrencyDate) as LOCALRate
        Resident DailyCurrencyRates
        Group by Site;

        Let vSiteCount = FieldValueCount('Site');

        For i = 1 to $(vSiteCount)

            Let vSite = FieldValue('Site',$(i));
            Let vBeginDate = Lookup('BeginDate','Site','$(vSite)','BeginDates');
            Let vEndDate = Lookup('EndDate','Site','$(vSite)','BeginDates');
            Let vUSDRate = Lookup('USDRate','Site','$(vSite)','BeginDates');
            Let vGBPRate = Lookup('GBPRate','Site','$(vSite)','BeginDates');
            Let vLOCALRate = Lookup('LOCALRate','Site','$(vSite)','BeginDates');

            Concatenate(DailyCurrencyRates)
            LOAD
                '$(vSite)' as Site,
                Date($(vBeginDate) + Recno() - 1) as CurrencyDate,
                $(vUSDRate) as Conv_USD,
                $(vGBPRate) as Conv_GBP,
                $(vLOCALRate) as Conv_LOCAL
            AutoGenerate
                $(vEndDate) - $(vBeginDate) + 1;



        Next

        Drop Table BeginDates;
        
		Store DailyCurrencyRates into [$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd];
		Drop Table DailyCurrencyRates;
        
        
End Sub



sub ProcessInvoiceHeader
		[Invoice Header]:
		LOAD SiteCd, 
		     PrimaryKey, 
		     [Invoice ID], 
		     [Invoice Header Site-Invoice Number], 
		     [Invoice Header Number], 
		     [Invoice Header inv_seq], 
		     [Invoice Customer ID], 
		     [Invoice Customer Number], 
		     [Invoice Header cust_seq], 
		     [Invoice Header co_num], 
		     [Invoice Header Invoice Date], 
		     [Invoice Header Terms ID], 
		     [Invoice Header Terms Code], 
		     [Invoice Header ship_code], 
		     [Invoice Header cust_po], 
		     [Invoice Header weight], 
		     [Invoice Header qty_packages], 
		     [Invoice Header Ship Date], 
		     [Invoice Header misc_charges], 
		     [Invoice Header prepaid_amt], 
		     [Invoice Header freight], 
		     [Invoice Header cost], 
		     [Invoice Header price], 
		     [Invoice Header slsman], 
		     [Invoice Header comm_calc], 
		     [Invoice Header comm_due], 
		     [Invoice Header comm_paid], 
		     [Invoice Header comm_base], 
		     [Invoice Header state], 
		     [Invoice Header misc_acct], 
		     [Invoice Header freight_acct], 
		     [Invoice Header tot_comm_due], 
		     [Invoice Header tot_comm_pd], 
		     [Invoice Header mgr_comm_cal], 
		     [Invoice Header mgr_comm_bse], 
		     [Invoice Header bill_type], 
		     [Invoice Header exch_rate], 
		     [Invoice Header use_exch_rate], 
		     [Invoice Header tax_code1], 
		     [Invoice Header tax_code2], 
		     [Invoice Header Tax Date], 
		     [Invoice Header ec_code], 
		     [Invoice Header frt_tax_code1], 
		     [Invoice Header frt_tax_code2], 
		     [Invoice Header msc_tax_code1], 
		     [Invoice Header msc_tax_code2], 
		     [Invoice Header disc], 
		     [Invoice Header misc_acct_unit1], 
		     [Invoice Header misc_acct_unit2], 
		     [Invoice Header misc_acct_unit3], 
		     [Invoice Header misc_acct_unit4], 
		     [Invoice Header freight_acct_unit1], 
		     [Invoice Header freight_acct_unit2], 
		     [Invoice Header freight_acct_unit3], 
		     [Invoice Header freight_acct_unit4], 
		     [Invoice Header do_num], 
		     [Invoice Header NoteExistsFlag], 
		     [Invoice Header RecordDate], 
		     [Invoice Header RowPointer], 
		     [Invoice Header CreatedBy], 
		     [Invoice Header UpdatedBy], 
		     [Invoice Header CreateDate], 
		     [Invoice Header InWorkflow], 
		     [Invoice Header disc_amount], 
		     [Invoice Header shipment_id]
		FROM
		[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
		(qvd);
		
		Store [Invoice Header] into [$(ENV_QV_FINAL_STAGE)Invoice Header.qvd](qvd);
		Drop Table [Invoice Header];
		
End Sub



sub ProcessInvoiceBalance
	call BuildMappingTable('INVOICE_DUE_DATE_MAP')
	call BuildMappingTable('INVOICE_EXCHANGE_RATE')
	call BuildMappingTable('INVOICE_LAST_PAYMENT_MAP')
	call BuildMappingTable('ORDER_CUST_SEQ_ID')
	Call BuildMappingTable('INVOICE_DATE_MAP')

		[Invoice Balance]:
		Load
			[ARTransaction SiteCd] as %Site,
			[ARTransaction Apply To Invoice ID] as [%Invoice ID],
			//[ARTransaction Customer ID],
			//[ARTransaction Order ID],
			//[ARTransaction Invoice Due Date],
			[Invoice Due Date],
			[Invoice Date],
			[Invoice Last Payment Date],
			If([Invoice Is Paid]='Yes',[Invoice Last Payment Date] - [Invoice Due Date],Null()) as [Invoice Paid Late Days],
			If([Invoice Is Paid]='No',If([Invoice Due Date] < Date(Num('$(vToday)')),Date(Num('$(vToday)'))-[Invoice Due Date],0)) as [Invoice Days Past Due],
			[Invoice Is Paid],
			[Invoice Is Not Paid],
			[Invoice Is Over Paid],
			[Invoice Balance],
			[Invoice Amount],
			CONV_Cust,
			[Invoice Balance Status];
		Load
			[ARTransaction SiteCd],
			[ARTransaction Apply To Invoice ID],
			[ARTransaction Customer ID],
			//[ARTransaction Invoice Due Date],
			ApplyMap('INVOICE_DUE_DATE_MAP',[ARTransaction Apply To Invoice ID],Null()) as [Invoice Due Date],
			Date(Floor(Num(ApplyMap('INVOICE_DATE_MAP',[ARTransaction Apply To Invoice ID],Null())))) as [Invoice Date],
			ApplyMap('INVOICE_LAST_PAYMENT_MAP',[ARTransaction Apply To Invoice ID],Null()) as [Invoice Last Payment Date],	
			[Invoice Is Paid],
			[Invoice Is Not Paid],
			[Invoice Is Over Paid],
			[Invoice Balance],
			[Invoice Amount],
			CONV_Cust,
			If([ARTransaction Is Unallocated to Invoice] = 'Yes','Unallocated Transactions',If([Invoice Balance] = 0,'Paid',If([Invoice Balance]>0,'Unpaid','Overpaid'))) as [Invoice Balance Status];
		Load
			 SiteCd as [ARTransaction SiteCd],
			 [ARTransaction Apply To Invoice ID],
			 [ARTransaction Customer ID],
			 [ARTransaction Is Unallocated to Invoice],
			 applymap('INVOICE_EXCHANGE_RATE',[ARTransaction Apply To Invoice ID],[ARTransaction exch_rate]) as CONV_Cust,
		//     [ARTransaction Invoice Date], 
		//     date(Min(If([ARTransaction inv_seq] = 0,[ARTransaction Due Date],Null()))) as [ARTransaction Invoice Due Date], 
			 If(Sum([ARTransaction Total Transaction Amount])<=0 and [ARTransaction Is Unallocated to Invoice] = 'No' ,Dual('Yes',1),Dual('No',0)) as [Invoice Is Paid],
			 If(Sum([ARTransaction Total Transaction Amount])>0  and [ARTransaction Is Unallocated to Invoice] = 'No',Dual('Yes',1),Dual('No',0)) as [Invoice Is Not Paid],
			 If(Sum([ARTransaction Total Transaction Amount])<0 and [ARTransaction Is Unallocated to Invoice] = 'No',Dual('Yes',1),Dual('No',0)) as [Invoice Is Over Paid],
			 Sum(If([ARTransaction type] = 'I',[ARTransaction Total Transaction Amount]/applymap('INVOICE_EXCHANGE_RATE',[ARTransaction Apply To Invoice ID],[ARTransaction exch_rate]))) as [Invoice Amount],
			 Sum([ARTransaction Total Transaction Amount]/applymap('INVOICE_EXCHANGE_RATE',[ARTransaction Apply To Invoice ID],[ARTransaction exch_rate])) as [Invoice Balance]
		FROM
		[$(ENV_QV_RAW_STAGE)artran.qvd]
		(qvd)
		group by
		SiteCd,
		[ARTransaction Apply To Invoice ID],
		[ARTransaction Customer ID],
		[ARTransaction Is Unallocated to Invoice],
		applymap('INVOICE_EXCHANGE_RATE',[ARTransaction Apply To Invoice ID],[ARTransaction exch_rate]);
		//[ARTransaction Invoice Date], 
		//[ARTransaction Due Date] ;
		
		
		
		Left Join([Invoice Balance])
		LOAD //[Invoice Header SiteCd] as %Site, 
		     [Invoice Header Site-Invoice Number] as [%Invoice ID], 
		     [Invoice Customer ID] as [%Customer Seq ID],
		     [SiteCd] & '-' & [Invoice Header co_num] as [%OrderNumber]
		FROM
		[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
		(qvd);
		
		
		Left Join([Invoice Balance])
		LOAD 
			 [%OrderNumber],
		     Salesman as %Salesman, 
		     [Salesman Contribution Percent]
		FROM
		[$(ENV_QV_FINAL_STAGE)OrderPayMatrix_Splits.qvd]
		(qvd);
		
		Left Join([Invoice Balance])
		LOAD Date(Floor(Num(CurrencyDate))) as [Invoice Date], 
		     Site as %Site, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM
		[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
		(qvd);
		
		Left Join([Invoice Balance])
		IntervalMatch([Invoice Days Past Due])
		LOAD //[Range Group], 
		     //[Range Description], 
		     [Begin Days], 
		     [End Days]
		     //[Range Rank]
		FROM
		[$(ENV_SHAREPOINT_FINANCE)AR Supporting Tables.xlsx]
		(ooxml, embedded labels, table is Sheet1)
		Where [Range Group] = 'Standard';
		
		Left Join([Invoice Balance])
		//IntervalMatch([Invoice Days Past Due])
		LOAD //[Range Group], 
		     Dual([Range Description],[Range Rank]) as [Invoice Days Past Due Bucket], 
		     [Begin Days], 
		     [End Days]
		     //[Range Rank]
		FROM
		[$(ENV_SHAREPOINT_FINANCE)AR Supporting Tables.xlsx]
		(ooxml, embedded labels, table is Sheet1)
		Where [Range Group] = 'Standard';
		
		Drop fields [Begin Days], [End Days];
		
		
		
		Store [Invoice Balance] into [$(ENV_QV_WORKING_DATA)InvoiceBalanceTemp.qvd](qvd);
		Drop Table [Invoice Balance];
		
		[Invoice Balance]:
		LOAD %OrderNumber, 
		     [%Invoice ID], 
		     'INVOICE-' & [%Invoice ID] as [Order Invoice Link Key], 
		     [Invoice Due Date], 
		     [Invoice Date], 
		     [Invoice Last Payment Date], 
		     [Invoice Paid Late Days], 
		     [Invoice Days Past Due],
		     [Invoice Days Past Due Bucket], 
		     [Invoice Is Paid], 
		     [Invoice Is Not Paid], 
		     [Invoice Is Over Paid], 
		     [Invoice Balance] * If(Len(Trim([Salesman Contribution Percent]))=0,1,[Salesman Contribution Percent]) as [Invoice Balance], 
		     [Invoice Amount]  * If(Len(Trim([Salesman Contribution Percent]))=0,1,[Salesman Contribution Percent]) as [Invoice Amount],
		     CONV_Cust as Conv_CUST,
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP,
		     [Invoice Balance Status], 
		     %Site, 
		     [%Customer Seq ID], 
		     %Salesman, 
		     [Salesman Contribution Percent]
		FROM
		 [$(ENV_QV_WORKING_DATA)InvoiceBalanceTemp.qvd]
		(qvd);
		
		Store [Invoice Balance] into [$(ENV_QV_FINAL_STAGE)InvoiceBalanceFact.qvd](qvd);
		Drop Table [Invoice Balance];

End Sub



Sub ProcessVendor

		[Vendor]:
		Load * from 
		[$(ENV_QV_RAW_STAGE)vendor.qvd](qvd);
		


		Store [Vendor] into [$(ENV_QV_FINAL_STAGE)Vendor.qvd](qvd);
		
		Drop Table [Vendor];

End Sub



Sub BuildARBalance(ArBalance.MonthBeginDate,ArBalance.MonthEndDate)
    call BuildMappingTable('INVOICE_CUSTOMER_MAP')
    call BuildMappingTable('INVOICE_DATE_MAP')
    call BuildMappingTable('INVOICE_EXCHANGE_RATE')
    call BuildMappingTable('INVOICE_DUE_DATE_MAP')
    call BuildMappingTable('INVOICE_LAST_PAYMENT_MAP')
    
	
	Let ArBalance.MonthName = Date(Num('$(ArBalance.MonthBeginDate)'),'YYYYMM');
	
	//Let vMonthEndDate = FieldValue('Month End Date',$(Month.i));
	//Let vMonthBeginDate = Lookup('Month Begin Date','Month End Date','$(vMonthEndDate)','MasterCalendar');
	//Let vCalendarBegin = Lookup('Calendar Begin Date','Month End Date','$(vMonthEndDate)','MasterCalendar');
 
		MonthlyARBalance:
//		//Intervalmatch([ARTransaction Transaction Date])
//		//Load [Calendar Begin Date], [Month End Date] resident [MasterCalendar];
//
//		//Left Join (InvoicePointInTimeTemp)
//		//Load [Month End Date], [Month Begin Date] Resident MasterCalendar;
//
//		////Drop Table MasterCalendar;
//
//		//Left Join(InvoicePointInTimeTemp)
		Load
			[As Of Month End Date],
			[As Of SiteCd],
			[As Of Invoice ID] as [ARTransaction Apply To Invoice ID],
			[Invoice Date],
			ApplyMap('INVOICE_CUSTOMER_MAP',[As Of Invoice ID],[ARTransaction Customer Seq ID]) as [Customer Seq ID],
            [ARTransaction Customer Number],
            [ARTransaction Apply to Invoice Number],
			[As Of Invoice Due Date],
            [As Of Invoice Beginning Balance],
			[As Of Invoice Balance],
			[As Of Invoice Unallocated Transaction Amount],
			[As Of Invoice Credit Amount],
			[As Of Invoice Payment Amount],
			[As Of Current Payment Amount],
			[As Of Past Due Payment Amount],
			[As Of Invoice Amount Invoiced],
			[As Of Invoice Debit Amount],
			[As Of Invoice Transaction Count],
			[As Of Invoice CONV_CUST],
            IsUnallocatedTransaction,
			//[As Of Invoice CONV_GBP],
			//[As Of Invoice CONV_USD],
			If([As Of Invoice Balance]=0,[As Of Invoice Last Payment Date]-[Invoice Date],Null())as [As Of Days From Invoice to Payment],
			//If([As Of Invoice Last Payment Date] <= [As Of Invoice Due Date],[As Of Invoice Last Payment Date]-
			If([As Of Month End Date]>[As Of Invoice Due Date],[As Of Invoice Balance],0) as [As Of Past Due Amt],
			If([As Of Month End Date]<=[As Of Invoice Due Date],[As Of Invoice Balance],0) as [As Of Current Amt],
			If([As Of Month End Date]>=[As Of Invoice Due Date],[As Of Month End Date]-[As Of Invoice Due Date],-1) as [As Of Invoice Past Due Days],
			If([As Of Month End Date]<=[As Of Invoice Due Date],[As Of Invoice Due Date]-[As Of Month End Date],0) as [As Of Invoice Days Prior To Due Date]
		Where 
            [As Of Invoice Balance] <> 0 
            or [As Of Invoice Unallocated Transaction Amount] <> 0 
            OR [As Of Invoice Transaction Count]>0;
		Load
			[Month End Date] as [As Of Month End Date],
			[ARTransaction SiteCd] as [As Of SiteCd],
            [ARTransaction Customer Seq ID],
            [ARTransaction Customer Number],
            [ARTransaction Apply to Invoice Number],
			[Invoice Point In Time Invoice ID] as [As Of Invoice ID],
			//[ARTransaction Transaction Date] as [],
			//[ARTransaction type],
			[Invoice Date],
			[ARTransaction Invoice Due Date] as [As Of Invoice Due Date],
			[Invoice Last Payment Date] as [As Of Invoice Last Payment Date],
			[ARTransaction CONV_CUST] as [As Of Invoice CONV_CUST],
            IsUnallocatedTransaction,
            //[ARTransaction CONV_GBP] as [As Of Invoice CONV_GBP],
			//[ARTransaction CONV_USD] as [As Of Invoice CONV_USD],
            Sum(If([ARTransaction Transaction Date] < [Month Begin Date],[ARTransaction Total Transaction Amount])) as [As Of Invoice Beginning Balance],
			Sum([ARTransaction Total Transaction Amount]) as [As Of Invoice Balance],
			Sum(If(([ARTransaction Transaction Date] >= [Month Begin Date] AND [ARTransaction Transaction Date] <= [Month End Date]) OR [ARTransaction Apply to Invoice Number]='0', 1,0)) as [As Of Invoice Transaction Count],
			Sum(If([ARTransaction Apply to Invoice Number]='0' and [ARTransaction Transaction Date] <= [Month End Date],[ARTransaction Total Transaction Amount],0)) as [As Of Invoice Unallocated Transaction Amount],
			Sum(If([ARTransaction type] = 'C',
				   If([ARTransaction Apply to Invoice Number]='0',
				      [ARTransaction Total Transaction Amount],
				      If([ARTransaction Transaction Date] >= [Month Begin Date] AND [ARTransaction Transaction Date] <= [Month End Date],
				       [ARTransaction Total Transaction Amount],
				       0)))) as [As Of Invoice Credit Amount],
			Sum(If([ARTransaction type] = 'P' and [ARTransaction Transaction Date] >= [Month Begin Date] AND [ARTransaction Transaction Date] <= [Month End Date], [ARTransaction Total Transaction Amount],0)) as [As Of Invoice Payment Amount],
			Sum(If([ARTransaction type] = 'P' 
					and [ARTransaction Transaction Date] >= [Month Begin Date]
					AND [ARTransaction Transaction Date] <= [Month End Date]
					,If([ARTransaction Transaction Date] > [ARTransaction Invoice Due Date]
						,[ARTransaction Total Transaction Amount]
						,0)
					,0)
				) as [As Of Past Due Payment Amount],
			Sum(If([ARTransaction type] = 'P' 
					and [ARTransaction Transaction Date] >= [Month Begin Date]
					AND [ARTransaction Transaction Date] <= [Month End Date]
					,If([ARTransaction Transaction Date] <= [ARTransaction Invoice Due Date]
						,[ARTransaction Total Transaction Amount]
						,0)
					,0)
				) as [As Of Current Payment Amount],
			Sum(If([ARTransaction type] = 'I' and [ARTransaction Transaction Date] >= [Month Begin Date] AND [ARTransaction Transaction Date] <= [Month End Date], [ARTransaction Total Transaction Amount],0)) as [As Of Invoice Amount Invoiced],
			Sum(If([ARTransaction type] = 'D' and [ARTransaction Transaction Date] >= [Month Begin Date] AND [ARTransaction Transaction Date] <= [Month End Date], [ARTransaction Total Transaction Amount],0)) as [As Of Invoice Debit Amount]
		Group by
			[Month End Date],
			[ARTransaction SiteCd],
			[ARTransaction Customer Seq ID],
            [ARTransaction Customer Number],
            [ARTransaction Apply to Invoice Number],
            [Invoice Point In Time Invoice ID],
			[Invoice Date],
			[ARTransaction Invoice Due Date],
			[Invoice Last Payment Date],
			[ARTransaction CONV_CUST],
            IsUnallocatedTransaction
            ;
		Load
			Date(Num('$(ArBalance.MonthEndDate)')) as [Month End Date],
			Date(Num('$(ArBalance.MonthBeginDate)')) as [Month Begin Date],
			//Date(Num('$(vCalendarBegin)')) as [Calendar Begin Date],
            SiteCd & '-' & [ARTransaction Customer Number] & '-0' as [ARTransaction Customer Seq ID],
            [ARTransaction Customer Number],
            [ARTransaction Apply to Invoice Number],
			[ARTransaction Apply To Invoice ID] as [Invoice Point In Time Invoice ID],
			-([ARTransaction Apply to Invoice Number]='0') as IsUnallocatedTransaction, 
            [ARTransaction Apply to Invoice Number],
			[ARTransaction Invoice Date] as [ARTransaction Transaction Date],
			[ARTransaction type],
			If([ARTransaction Apply to Invoice Number]='0',[ARTransaction Invoice Date],ApplyMap('INVOICE_DUE_DATE_MAP',[ARTransaction Apply To Invoice ID],[ARTransaction Due Date])) as [ARTransaction Invoice Due Date],
			SiteCd as [ARTransaction SiteCd],
			ApplyMap('INVOICE_LAST_PAYMENT_MAP',[ARTransaction Apply To Invoice ID]) as [Invoice Last Payment Date],
			applymap('INVOICE_DATE_MAP',[ARTransaction Apply To Invoice ID],[ARTransaction Invoice Date]) as [Invoice Date],
			[ARTransaction Total Transaction Amount]/applymap('INVOICE_EXCHANGE_RATE',[ARTransaction Apply To Invoice ID],[ARTransaction exch_rate]) as [ARTransaction Total Transaction Amount],
			applymap('INVOICE_EXCHANGE_RATE',[ARTransaction Apply To Invoice ID],[ARTransaction exch_rate]) as [ARTransaction CONV_CUST]
		From [$(ENV_QV_RAW_STAGE)artran.qvd](qvd)
        Where 
        //([ARTransaction type] = 'P' and Timestamp(Num([artran recpt_date])) <= Timestamp(Num('8/19/2021 1:10:44 PM')))
        //or ([ARTransaction type] = 'I' and Timestamp(Num([ARTransaction Invoice Date])) <= Timestamp(Num('8/19/2021 1:10:44 PM')))
        //or (Match([ARTransaction type],'C','D')>0 and Timestamp(Num([ARTransaction Invoice Date])) <= Timestamp(Num('8/19/2021 1:10:44 PM')));
        
        //Timestamp(Num([ARTransaction CreateDate])) <= Timestamp(Num('8/19/2021 1:10:44 PM'));
        //and [ARTransaction Invoice Date] <= Date(Num('$(ArBalance.MonthEndDate)'));
		//Where Date(Floor(Num([ARTransaction CreateDate]))) <= Date(Num('$(ArBalance.MonthEndDate)'))
        [ARTransaction Invoice Date] <= Date(Num('$(ArBalance.MonthEndDate)'));
		
		Left Join (MonthlyARBalance)
		Load
			CurrencyDate as [Invoice Date],
			Site as [As Of SiteCd],
			Conv_USD as [As Of Invoice CONV_USD],
			Conv_GBP as [As Of Invoice CONV_GBP]
		FROM
		[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
		(qvd);

        Drop Field [Invoice Date] from MonthlyARBalance;
		
		
		
		Store MonthlyARBalance into [$(ENV_QV_FINAL_STAGE)MonthlyARBalance_$(ArBalance.MonthName).qvd](qvd);
		Drop table MonthlyARBalance;

End Sub

Sub ProcessARMonthlyBalances(subNumMonths,subEndDate)
//default number of months should be 2. this will force the system
//to process the current month and the most recent completed month based on the 
//latest transaction date in the ARtran file.
//Not processing both months may cause transactions to be left out of the 
//most recent completed month when the transactions begin to appear on the first of the month
	DateRange:
	Load
		Min([ARTransaction Invoice Date]) as MinDate,
		//Max([ARTransaction Invoice Date]) as MaxDate
		Num(Date(Floor(Num(MonthEnd(Date(Num('$(subEndDate)'))))))) as MaxDate
	FROM
	[$(ENV_QV_RAW_STAGE)artran.qvd]
	(qvd);

	Let vMinDate = FieldValue('MinDate',1);
	Let vMaxDate = FieldValue('MaxDate',1);
	
	Drop table DateRange;
	
	ProcessingCalendar:
	Load
		Date(Recno() + $(vMinDate) - 1) as MasterDate,
		Date($(vMinDate)) as [Calendar Begin Date],
		If(Date(Floor(Num(Monthend(Recno() + $(vMinDate) - 1) )))>Date('$(subEndDate)'),Date('$(subEndDate)'),Date(Floor(Num(Monthend(Recno() + $(vMinDate) - 1) )))) as [Month End Date],
		Date(Floor(Num(MonthStart(Recno() + $(vMinDate) - 1)))) as [Month Begin Date]
	AutoGenerate
		$(vMaxDate) - $(vMinDate) + 1
	Where Date(Floor(Num(MonthStart(Recno() + $(vMinDate) - 1)))) = Date(Recno() + $(vMinDate) - 1)
		and Date(Floor(Num(MonthStart(Recno() + $(vMinDate) - 1)))) >= Date(Floor(MonthStart(Num('$(subEndDate)'),-$(subNumMonths))));
	
	
	Let subMonthEndCount = FieldValueCount('Month End Date');
	
	For mnth.i = 1 to $(subMonthEndCount)
	
		Let subMonthEndDate = FieldValue('Month End Date',$(mnth.i));
		Let subMonthBeginDate = Lookup('Month Begin Date','Month End Date','$(subMonthEndDate)','ProcessingCalendar');
		
		Call BuildARBalance('$(subMonthBeginDate)', '$(subMonthEndDate)')
	
	Next mnth.i
	
	Drop table ProcessingCalendar;
	
end Sub



Sub ProcessSite

Site:
LOAD 
	 SiteCd as [%Site Id],
	 SiteCd as [Site Code], 
     SiteDb as [Site Database], 
     Site as [Site Name], 
     [Site Business Segment],
     [USD Conv Exp],
     [GBP Conv Exp]
FROM
[$(ENV_QV_RAW_STAGE)Site.qvd]
(qvd);

LIB CONNECT TO 'K4_PnL';
Left Join(Site)
LOAD
//    SiteName,
    QlikSiteCd as [%Site Id],
//    SytelineSiteRef,
//    "K4_USER",
//    "K4_CREATED",
//    "K4_MODIFIED",
//     IncludeForecastBeginDate,
//     IncludeForecastEndDate,
//     RPU,
    "Business Segment"
    Where Len(Trim([QlikSiteCd])) > 0;
SQL SELECT 
    QlikSiteCd,
    "Business Segment"
FROM K4Forecasting.dbo.Sites;



Store [Site] into [$(ENV_QV_FINAL_STAGE)Site.qvd](qvd);

Drop Table Site;

End Sub



sub ProcessDefects
	
	Defect:
	Load * 
	From 
	[$(ENV_QV_RAW_STAGE)RS_QCCar.qvd](qvd)
	Where [Defect Dept] = '104';
	


	Store [Defect] into [$(ENV_QV_FINAL_STAGE)Defect.qvd](qvd);
	drop Table Defect;

End Sub



Sub ProcessItemDim
		Call BuildMappingTable('PRODUCT_CODE_MAP')
		Call BuildMappingTable('FOCUS_PRODUCT_MAP')
		
		
		ItemDim:
		LOAD PrimaryKey as %item,
		    item as [Item Number],
		    description as ItemDesc,
		    SiteCd & '-' & "family_code" as %family_code,
		    If(Len(Trim(Uf_WB_inventory_code))=0,Null(),SiteCd & '-' & Uf_WB_inventory_code) as [%Item Inventory Code],
		    product_code as [Item Product Code],
		    If(Len(Trim(product_code))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & product_code,'Unknown|Unknown|Unknown'),'|',1)) as [Item Product Code Description],
            If(Len(Trim(product_code))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & product_code,'Unknown|Unknown|Unknown'),'|',2)) as [Item Product Code Category],
            If(Len(Trim(product_code))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & product_code,'Unknown|Unknown|Unknown'),'|',3)) as [Item Product Code Sub Category],
		    applymap('FOCUS_PRODUCT_MAP',SiteCd & '-' & item, Null()) as [Item Focus Group],
		    If(Len(Trim(applymap('FOCUS_PRODUCT_MAP',SiteCd & '-' & item, Null())))>0,Dual('Yes',1),Dual('No',0)) as [Item Is In Focus Group],
		    cur_matl_cost as [Item Current Material Cost],
			cur_lbr_cost as [Item Current Labor Cost],
			cur_fovhd_cost as [Item Current Fixed Overhead Cost],
			cur_vovhd_cost as [Item Current Variable Overhead Cost],
			cur_out_cost as  [Item Current Outside Cost],
			If(Match(SiteCd,'INPROUS','INPROUK')>0,Left(item,4)) as [Item Design Code],
			Rangesum(cur_matl_cost,cur_lbr_cost,cur_fovhd_cost,cur_vovhd_cost,cur_out_cost) as [Item Current Cost],
			[Item Lot Size];
		//SQL SELECT 
		//    item,
		//    description,
		//    Coalesce("family_code", 'UDF') as family_code,
		//    Uf_WB_inventory_code,
		//    cur_matl_cost,
		//	cur_lbr_cost,
		//	cur_fovhd_cost,
		//	cur_vovhd_cost,
		//	cur_out_cost
		//FROM $(vDb).dbo.item;
		Load 
			 PrimaryKey,
			 [SiteCd] as SiteCd,
			 [Item Number] as item,
			 [Item description] as description,
			 [Item product_code] as product_code,
		     If(Len(Trim([Item Item Family Code]))=0,'UDF',[Item Item Family Code]) as family_code,
		     [Item Uf_WB_inventory_code] as Uf_WB_inventory_code,
			 [Item cur_matl_cost] as cur_matl_cost,
			 [Item cur_lbr_cost] as cur_lbr_cost,
			 [Item cur_fovhd_cost] as cur_fovhd_cost,
			 [Item cur_vovhd_cost] as cur_vovhd_cost,
			 [Item cur_out_cost] as cur_out_cost,
			 [Item lot_size] as [Item Lot Size]
		From
		[$(ENV_QV_RAW_STAGE)Item.qvd]
		(qvd);
		
		
		Left Join(ItemDim)
		LOAD PrimaryKey as %family_code, 
		     [Item Family Code], 
		     [Item Family description] as [Item Product Family]
		FROM
		[$(ENV_QV_RAW_STAGE)famcode.qvd]
		(qvd);
		
		
		
		
		Left Join(ItemDim)
		Load
		SiteCd & '-' & [inventory_code] as [%Item Inventory Code],
		[inventory_code] as [Item Inventory Code],
		[description] as [Item Inventory Code Desc],
		[inventory_class] as [Item Inventory Class];
		//Select
		//	inventory_code,
		//	description,
		//	inventory_class
		//from $(vDb).dbo.WB_inventoryCode;
		Load 
		*
		From
		[$(ENV_QV_RAW_STAGE)WB_inventoryCode.qvd]
		(qvd);
		
            
//		LOAD PrimaryKey as [%Item Inventory Code], 
//		     inventory_code as [Item Inventory Code],
//		     description as [Item Inventory Code Desc],
//			 inventory_class as [Item Inventory Class]
//		FROM
//		[$(ENV_QV_RAW_STAGE)WB_inventoryCode.qvd]
//		(qvd);
		
		Drop fields [%Item Inventory Code], %family_code;
		
		If subProcessingMode = 'Incremental' then 
			Join(ItemDim)
			Load * From
			[$(ENV_QV_FINAL_STAGE)ItemDim.qvd](qvd)
			Where not exists(%item);
		End if
		
		Concatenate(ItemDim) 
		LOAD distinct SiteCd & '-' & item as %item, 
		     item as [Item Number], 
		     'Unknown' as ItemDesc, 
		     'Unknown' as [Item Product Code], 
		     'Unknown' as [Item Product Code Description],
		     'Unknown' as [Item Focus Group], 
		     null() as [Item Is In Focus Group], 
		     Null() as [Item Current Material Cost], 
		     Null() as [Item Current Labor Cost], 
		     Null() as [Item Current Fixed Overhead Cost], 
		     Null() as [Item Current Variable Overhead Cost], 
		     Null() as [Item Current Outside Cost], 
		     'Unknown' as [Item Design Code], 
		     Null() as [Item Current Cost], 
		     'Unknown' as [Item Family Code], 
		     'Unknown' as [Item Product Family], 
		     'Unknown' as [Item Inventory Code], 
		     'Unknown' as [Item Inventory Code Desc], 
		     'Unknown' as [Item Inventory Class]
		FROM
		[$(ENV_QV_RAW_STAGE)coitem.qvd]
		(qvd)
		Where not exists(%item, SiteCd & '-' & item);
		
		
		//add external Data for Brazil and China
		//Moving this code to the Sales toolkit Data Model
		For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaItem.qvd')
		
			Concatenate(ItemDim)
			LOAD %item, 
			     [Item Number], 
			     ItemDesc, 
			     [Item Design Code], 
			     [Item Focus Group], 
			     [Item Is In Focus Group], 
			     [Item Current Material Cost], 
			     [Item Current Labor Cost], 
			     [Item Current Fixed Overhead Cost], 
			     [Item Current Variable Overhead Cost], 
			     [Item Current Outside Cost], 
			     [Item Current Cost], 
			     [Item Family Code], 
			     [Item Product Family], 
			     [Item Inventory Code], 
			     [Item Inventory Code Desc], 
			     [Item Inventory Class]
			FROM
			[$(File)]
			(qvd)
			Where not Exists(%item);
			
		Next File
		
		
		
		
		
		
		Store ItemDim into [$(ENV_QV_FINAL_STAGE)ItemDim.qvd](qvd);
		Drop Table ItemDim;

End sub



Sub ProcessItemFamily
   
   [Item Family]:
   Load *
   From 
   [$(ENV_QV_RAW_STAGE)famcode.qvd](qvd);

	store [Item Family] into [$(ENV_QV_FINAL_STAGE)ItemFamily.qvd](qvd);
	
	Drop Table [Item Family];

End sub



Sub CombinedSalesItemDim

      Call BuildMappingTable('PRODUCT_CODE_MAP')
	  Call BuildMappingTable('FOCUS_PRODUCT_MAP')
      Call BuildMappingTable('FAMILY_CODE_MAP')

      
      
      
      NewItemDim:        
      LOAD
          [%SROItemKey] as %ItemKey,
          'SRO' as [Item Source],
          [Item No] as [Item Number],
          [Product Description] as [Item Description],
          'Service Item' as [Item Family Code],
          'Service Item' as [Item Family Description],
          [Product Code] as [Item Product Code],
          [Product Code Description] as [Item Product Code Description],
          'NA' as [Item Focus Group],
          Dual('No',0) as [Item Is In Focus Group],
          Null() as [Item Design Code],
          item_lot_size as [Item Lot Size]
      FROM [$(ENV_QV_FINAL_STAGE)NewFSInvoiceLineFact.qvd]
      (qvd);
      
      
	
		Concatenate(NewItemDim)
		Load 
			 'MFG-' & PrimaryKey as %ItemKey,
             'MFG' as [Item Source],
			 [Item Number],
			 [Item description] as [Item Description],
			 If(Len(Trim([Item Item Family Code]))=0,'UDF',[Item Item Family Code]) as [Item Family Code],
             ApplyMap('FAMILY_CODE_MAP',SiteCd & '-' & [Item Item Family Code],'Unknown') as [Item Family Description],
		     If(Len(Trim([Item Uf_WB_inventory_code]))=0,Null(),SiteCd & '-' & [Item Uf_WB_inventory_code]) as [%Item Inventory Code],
		     [Item product_code] as [Item Product Code],
		     If(Len(Trim([Item product_code]))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & [Item product_code],'Unknown|Unknown|Unknown'),'|',1)) as [Item Product Code Description],
             If(Len(Trim([Item product_code]))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & [Item product_code],'Unknown|Unknown|Unknown'),'|',2)) as [Item Product Code Category],
             If(Len(Trim([Item product_code]))=0,'Undefined',Subfield(applymap('PRODUCT_CODE_MAP', SiteCd & '-' & [Item product_code],'Unknown|Unknown|Unknown'),'|',3)) as [Item Product Code Sub Category],
             applymap('FOCUS_PRODUCT_MAP',PrimaryKey, Null()) as [Item Focus Group],
		     If(Len(Trim(applymap('FOCUS_PRODUCT_MAP',PrimaryKey, Null())))>0,Dual('Yes',1),Dual('No',0)) as [Item Is In Focus Group],
			 If(Match(SiteCd,'INPROUS','INPROUK')>0,Left([Item Number],4)) as [Item Design Code],
			 [Item lot_size] as [Item Lot Size]
		From
		[$(ENV_QV_RAW_STAGE)Item.qvd]
		(qvd);
		
		
		Store NewItemDim into [$(ENV_QV_FINAL_STAGE)NewItemDim.qvd](qvd);
		Drop Table NewItemDim;
      

End Sub



Sub ProcessInvoiceOrderLink

	OrderInvoiceLink:
	LOAD  distinct
	     [Invoice Header Site-Invoice Number], 
	     'ORDER-' & [SiteCd] & '-' & [Invoice Header co_num] as [Order Invoice Link Key]
	FROM
	[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
	(qvd)
	Where Len(Trim([Invoice Header co_num]))>0;
	
	Concatenate(OrderInvoiceLink)
	LOAD  distinct
	     [Invoice Header Site-Invoice Number], 
	     'INVOICE-' & [Invoice Header Site-Invoice Number] as [Order Invoice Link Key]
	FROM
	[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
	(qvd);
	
	Store OrderInvoiceLink into [$(ENV_QV_FINAL_STAGE)OrderInvoiceLink.qvd](qvd);
	Drop Table OrderInvoiceLink;

end sub



Sub ProcessPurchaseOrder
		Call BuildMappingTable('PURCHASE_ORDER_STAT')
		Call BuildMappingTable('SHIP_CODE_MAP')
		Call BuildMappingTable('TERMS_CODE_MAP')
		
        PurchaseOrder:
		LOAD SiteCd, 
		     PrimaryKey,
             SiteCd & '-' & "Purchase Order Number" AS POKey,
		     [%Purchase Order Id], 
		     [Purchase Order Number], 
		     [Purchase Order Prefix], 
		     [Purchase Order vend_num], 
		     [Purchase Order Date],
             DATE("Purchase Order Date", 'MM-DD-YYYY') AS "MasterDate",
		     [Purchase Order po_cost], 
		     [Purchase Order Ship Code],
		     Applymap('SHIP_CODE_MAP', SiteCd & '-' & [Purchase Order Ship Code], 'Unknown - ' & [Purchase Order Ship Code]) as [Purchase Order Ship Method],
		     [Purchase Order terms_code],
		     Applymap('TERMS_CODE_MAP', SiteCd & '-' & [Purchase Order terms_code], 'Unknown - ' & [Purchase Order terms_code]) as [Purchase Order Terms],
		     [Purchase Order fob], 
		     [Purchase Order print_price], 
		     [Purchase Order vend_order], 
		     [Purchase Order misc_charges], 
		     [Purchase Order sales_tax], 
		     [Purchase Order freight], 
		     [Purchas Order stat],
		      applyMap('PURCHASE_ORDER_STAT',SiteCd & '-' & [Purchas Order stat],'Unknown - ' & [Purchas Order stat]) as [Purchase Order Status],
		     [Purchase Order Invoice Date], 
		     [Purchase Order inv_num], 
		     [Purchase Order dist_date], 
		     [Purchase Order type], 
		     [Purchase Order drop_ship_no], 
		     [Purchase Order drop_seq], 
		     [Purchase Order eff_date], 
		     [Purchase Order exp_date], 
		     [Purchase Order ship_addr], 
		     [Purchase Order m_charges_t], 
		     [Purchase Order sales_tax_t], 
		     [Purchase Order freight_t], 
		     [Purchase Order whse], 
		     [Purchase Order sales_tax_2], 
		     [Purchase Order sales_tax_t2], 
		     [Purchase Order charfld1], 
		     [Purchase Order charfld2], 
		     [Purchase Order charfld3], 
		     [Purchase Order datefld], 
		     [Purchase Order decifld1], 
		     [Purchase Order decifld2], 
		     [Purchase Order decifld3], 
		     [Purchase Order logifld], 
		     [Purchase Order duty_amt_t], 
		     [Purchase Order duty_amt], 
		     [Purchase Order brokerage_amt], 
		     [Purchase Order brokerage_amt_t], 
		     [Purchase Order trans_nat], 
		     [Purchase Order process_ind], 
		     [Purchase Order delterm], 
		     [Purchase Order tax_code1], 
		     [Purchase Order tax_code2], 
		     [Purchase Order frt_tax_code1], 
		     [Purchase Order frt_tax_code2], 
		     [Purchase Order msc_tax_code1], 
		     [Purchase Order msc_tax_code2], 
		     [Purchase Order prepaid_amt], 
		     [Purchase Order prepaid_t], 
		     [Purchase Order exch_rate], 
		     [Purchase Order fixed_rate], 
		     [Purchase Order freight_vend_num], 
		     [Purchase Order duty_vend_num], 
		     [Purchase Order brokerage_vend_num], 
		     [Purchase Order frt_alloc_percent], 
		     [Purchase Order duty_alloc_percent], 
		     [Purchase Order brk_alloc_percent], 
		     [Purchase Order est_freight], 
		     [Purchase Order act_freight], 
		     [Purchase Order est_brokerage], 
		     [Purchase Order act_brokerage], 
		     [Purchase Order est_duty], 
		     [Purchase Order act_duty], 
		     [Purchase Order duty_alloc_meth], 
		     [Purchase Order frt_alloc_meth], 
		     [Purchase Order brk_alloc_meth], 
		     [Purchase Order duty_alloc_type], 
		     [Purchase Order frt_alloc_type], 
		     [Purchase Order brk_alloc_type], 
		     [Purchase Order vend_lcr_num], 
		     [Purchase Order received], 
		     [Purchase Order NoteExistsFlag], 
		     [Purchase Order  Record Date], 
		     [Purchase Order Record Time], 
		     [Purchase Order RowPointer], 
		     Upper("Purchase Order buyer") as [Purchase Order Buyer],
		     [Purchase Order CreatedBy], 
		     [Purchase Order UpdatedBy], 
		     [Purchase Order Create Date], 
		     [Purchase Order Create Time], 
		     [Purchase Order InWorkflow], 
		     [Purchase Order ins_vend_num], 
		     [Purchase Order ins_alloc_percent], 
		     [Purchase Order ins_alloc_type], 
		     [Purchase Order est_insurance], 
		     [Purchase Order ins_alloc_meth], 
		     [Purchase Order act_insurance], 
		     [Purchase Order insurance_amt], 
		     [Purchase Order insurance_amt_t], 
		     [Purchase Order loc_frt_vend_num], 
		     [Purchase Order loc_frt_alloc_percent], 
		     [Purchase Order loc_frt_alloc_type], 
		     [Purchase Order est_local_freight], 
		     [Purchase Order loc_frt_alloc_meth], 
		     [Purchase Order act_local_freight], 
		     [Purchase Order local_freight_amt], 
		     [Purchase Order local_freight_amt_t], 
		     [Purchase Order include_tax_in_cost], 
		     [Purchase Order trans_nat_2], 
		     [Purchase Order contains_only_tax_free_matls], 
		     [Purchase Order supply_web_po_stat], 
		     [Purchase Order builder_po_orig_site], 
		     [Purchase Order builder_po_num], 
		     [Purchase Order builder_po_printed], 
		     [Purchase Order synchronized_to_bus], 
		     [po auto_voucher], 
		     [po auto_receive_demanding_site_po], 
		     [po auto_ship_demanding_site_co], 
		     [po source_site_co_num],
             [po Uf_Acknowledged] as "Purchase Order Acknowledged"
		FROM
		[$(ENV_QV_RAW_STAGE)po.qvd]
		(qvd)
        WHERE "Purchas Order stat" = 'O'; 		
		
		Store PurchaseOrder into [$(ENV_QV_FINAL_STAGE)PurchaseOrder.qvd](qvd);
		
		Drop Table PurchaseOrder;

End sub



Sub ProcessPurchaseOrderItem
	Call BuildMappingTable('SiteTimeZoneMap')
    Call BuildMappingTable('SupplierOTD_Map')

		PurchaseOrderItem:
        Load
		*,
        If(len(trim([Purchase Order Received Date])) > 0,
              If(num([Purchase Order Received Date]) > (Num("Purchase Order Line due_date")+3),
                  Dual('No', 0), Dual('Yes', 1)),
              If(Num([Purchase Order Line due_date])+3 > ConvertToLocalTime(UTC(), ApplyMap('SiteTimeZoneMap',SiteCd)),
                  Dual('No', 0)))																						 as isSupplierOTDontime,
          If(len(trim([Purchase Order Received Date])) > 0, 1,       
              If(Num([Purchase Order Line due_date])+3 <= ConvertToLocalTime(UTC(), ApplyMap('SiteTimeZoneMap',SiteCd)), 1, 0))    as Supplier_OTDOrderLineCount;
         LOAD
            SiteCd & '-' & "Purchase Order Line PO Number" AS POKey,
            PrimaryKey,
            SiteCd,
            "poitem site_ref",
            "%Purchase Order Line Id",
            "Purchase Order Line Lkup PO Line Num",
            SUBFIELD("Purchase Order Line Lkup PO Line Num", '-' , -1) AS PO_Line_Num,
            "Purchase Order Line PO Number",
            "Purchase Order Line Purchase Order Id",
            "Purchase Order Line po_line",
            "Purchase Order Line item",
            "Purchase Order Line po_release",
            'Item' & '-' & SiteCd & '-' & "Purchase Order Line item" AS %Item,
            'Item' & '-' & SiteCd & '-' & "Purchase Order Line item" AS PO%Item,
            "Purchase Order Line Item Id",
            "Purchase Order Line stat",
            "Purchase Order Line qty_ordered",
            "Purchase Order Line qty_received",
            "Purchase Order Line qty_rejected",
            "Purchase Order Line qty_voucher",
            "Purchase Order Line qty_returned",
            "Purchase Order Line item_cost",
            "Purchase Order Line Extended Price",
            "Purchase Order Line ref_type",
            "Purchase Order Line ref_num",
            "Purchase Order Line ref_line_suf",
            "Purchase Order Line ref_release",
            "Purchase Order Line due_date",
            IF(TODAY() > DATE("Purchase Order Line due_date"), 1, 0) AS past_due_flag,
            "Purchase Order Line rcvd_date",
            "Purchase Order Line vend_item",
            "Purchase Order Line root_job",
            "Purchase Order Line root_suf",
            "Purchase Order Line plan_cost",
            "Purchase Order Line voucher_cost",
            "Purchase Order Line non_inv_acct",
            "Purchase Order Line drop_ship_no",
            "Purchase Order Line drop_seq",
            "Purchase Order Line ship_addr",
            "Purchase Order Line promise_date",
            "Purchase Order Line Delivery Deadline",
            "Purchase Order Line release_date",
            "Purchase Order Line whse",
            "Purchase Order Line item_type",
            "Purchase Order Line cost_type",
            "Purchase Order Line comm_code",
            "Purchase Order Line trans_nat",
            "Purchase Order Line process_ind",
            "Purchase Order Line unit_weight",
            "Purchase Order Line delterm",
            "Purchase Order Line origin",
            "Purchase Order Line cons_num",
            "Purchase Order Line unit_mat_cost",
            "Purchase Order Line unit_duty_cost",
            "Purchase Order Line unit_freight_cost",
            "Purchase Order Line unit_brokerage_cost",
            "Purchase Order Line tax_code1",
            "Purchase Order Line tax_code2",
            "Purchase Order Line export_value",
            "Purchase Order Line ec_code",
            "Purchase Order Line transport",
            "Purchase Order Line req_num",
            "Purchase Order Line req_line",
            "Purchase Order Line u_m",
            "Purchase Order Line qty_ordered_conv",
            "Purchase Order Line item_cost_conv",
            "Purchase Order Line plan_cost_conv",
            "Purchase Order Line unit_mat_cost_conv",
            "Purchase Order Line unit_duty_cost_conv",
            "Purchase Order Line unit_freight_cost_conv",
            "Purchase Order Line unit_brokerage_cost_conv",
            "Purchase Order Line non_inv_acct_unit1",
            "Purchase Order Line non_inv_acct_unit2",
            "Purchase Order Line non_inv_acct_unit3",
            "Purchase Order Line non_inv_acct_unit4",
            "Purchase Order Line lc_override",
            "Purchase Order Line revision",
            "Purchase Order Line drawing_nbr",
            "Purchase Order Line po_vend_num",
            "Purchase Order Line Vendor Id" AS "%Vendor Id",
            "Purchase Order Line NoteExistsFlag",
            "Purchase Order Line RecordDate",
            "Purchase Order Line RecordTime",
            "Purchase Order Line RowPointer",
            "Purchase Order Line description",
            "Purchase Order Line CreatedBy",
            "Purchase Order Line UpdatedBy",
            "Purchase Order Line Create Date",
            "Purchase Order Line Create Time",
            "Purchase Order Line InWorkflow",
            "Purchase Order Line expedited",
            "Purchase Order Line rcpt_rqmt",
            "Purchase Order Line unit_insurance_cost",
            "Purchase Order Line unit_insurance_cost_conv",
            "Purchase Order Line unit_loc_frt_cost",
            "Purchase Order Line unit_loc_frt_cost_conv",
            "Purchase Order Line trans_nat_2",
            "Purchase Order Line suppl_qty_conv_factor",
            "Purchase Order Line unlinked_xref",
            "Purchase Order Line Uf_MachineNum",
            "Purchase Order Line Uf_WB_ExtraItemDescription1",
            "Purchase Order Line Uf_WB_ExtraItemDescription2",
            "Purchase Order Line Uf_WB_ExtraItemDescription3",
            "Purchase Order Line due_date_day",
            "poitem preassign_lots",
            "poitem preassign_serials",
            "poitem ipr_id",
            "poitem ipr_seq",
            "poitem manufacturer_id",
            "poitem manufacturer_item",
            "Purchase Order Line WB_SNPreAllocationRequired",
            "Purchase Order Line WB_SNPAReady",
            "Purchase Order Line Uf_WBA_RevisionDate",
            "poitem uf_WB_Label_CustItem",
            "poitem uf_WB_Label_CustPO",
            "poitem uf_WB_Label_Description",
            "poitem uf_WB_Label_Item",
            "poitem uf_WB_Label_JobPONo",
            "poitem uf_WB_Label_OrderNo",
            "poitem uf_WB_Label_SerialNo",
            "poitem uf_WB_Label_Text",
            "poitem uf_WB_Marking_CustItem",
            "poitem uf_WB_Marking_CustPO",
            "poitem uf_WB_Marking_Description",
            "poitem uf_WB_Marking_Item",
            "poitem uf_WB_Marking_JobPONo",
            "poitem uf_WB_Marking_OrderNo",
            "poitem uf_WB_Marking_SerialNo",
            "poitem uf_WB_Marking_Text",
            "poitem uf_WB_PrintLabelingInPO",
            "poitem uf_WB_PrintMarkingInPO",
            "poitem fa_num",
            "poitem fa_class",
            "poitem dept",
            "Purchase Order Line uf_WB_ExtraItemDescription1",
            "Purchase Order Line uf_WB_ExtraItemDescription2",
            "Purchase Order Line uf_WB_ExtraItemDescription3",
             ApplyMap('SupplierOTD_Map',SiteCd & '-' & "Purchase Order Line PO Number", Null()) as "Purchase Order Received Date"
             FROM [$(ENV_QV_RAW_STAGE)poitem.qvd](qvd); 	
             //Due date has a +3 buffer, as they have Covid cleaning procedures
		


		Store PurchaseOrderItem into [$(ENV_QV_FINAL_STAGE)PurchaseOrderItem.qvd](qvd);
		
		Drop Table PurchaseOrderItem;
        
End Sub



Sub ProcessVendorAddress

		[Vendor Address]:
		Load * from 
		[$(ENV_QV_RAW_STAGE)vendaddr.qvd](qvd);
		


		Store [Vendor Address] into [$(ENV_QV_FINAL_STAGE)VendorAddress.qvd](qvd);
		
		Drop Table [Vendor Address];

End Sub



Sub ProcessVendorCat

		[Vendor Category]:
		Load * from 
		[$(ENV_QV_RAW_STAGE)vendcat.qvd](qvd);
		


		Store [Vendor Category] into [$(ENV_QV_FINAL_STAGE)VendorCategory.qvd](qvd);
		
		Drop Table [Vendor Category];

End Sub



Sub ProcessPayMatrix

		PayMatrix:
		LOAD Distinct 
		     If(Len(Trim([co Uf_coCommSalePaymatrix]))=0,If(Len(Trim(slsman))=0,'Undefined',slsman) & '-100',[co Uf_coCommSalePaymatrix]) as  [co Uf_coCommSalePaymatrix],
		     Subfield(If(Len(Trim([co Uf_coCommSalePaymatrix]))=0,If(Len(Trim(slsman))=0,'Undefined',slsman) & '-100',[co Uf_coCommSalePaymatrix]),',/DIV-',1) as [Salesman Array],
		     Subfield(If(Len(Trim([co Uf_coCommSalePaymatrix]))=0,If(Len(Trim(slsman))=0,'Undefined',slsman) & '-100',[co Uf_coCommSalePaymatrix]),',/DIV-',2) as [Remainder Splits],
		     SubStringCount(Subfield(If(Len(Trim([co Uf_coCommSalePaymatrix]))=0,If(Len(Trim(slsman))=0,'Undefined',slsman) & '-100',[co Uf_coCommSalePaymatrix]),',/DIV-',1),'-') as [Percent Splits];
		Load
		replace(slsman,'-','~') as slsman,
		[co Uf_coCommSalePaymatrix]
		FROM
		[$(ENV_QV_RAW_STAGE)co.qvd]
		(qvd)
		;
		
		

		Splits:
		Load
			Max(FieldValue('Remainder Splits',RecNo())) + 0 as NumSplits
		AutoGenerate FieldValueCount('Remainder Splits');
		
		Let vMaxSplits = FieldValue('NumSplits',1);
		Drop table Splits;
		
		Splits:
		Load
			Max(FieldValue('Percent Splits',RecNo())) + 0 as NumSplits
		AutoGenerate FieldValueCount('Percent Splits');
		
		Store PayMatrix into [$(ENV_QV_WORKING_DATA)PayMatrix.qvd](qvd);
		Drop table PayMatrix;
		
		Let vMaxSplits = vMaxSplits + FieldValue('NumSplits',1);
		Drop table Splits;
		
		Let vFieldStatement = '';
		let vCrossFieldSalesman = '';
		Let vCrossFieldPercent = '';
		For i = 1 to $(vMaxSplits)
		 set vFieldStatement = $(vFieldStatement),
			subfield(subfield([Salesman Array],',',$(i)),'-',1) as [Salesman $(i)],
			subfield(subfield([Salesman Array],',',$(i)),'-',2) as [Split Percent $(i)];
			set vCrossFieldSalesman = $(vCrossFieldSalesman), [Salesman $(i)] as [$(i)];
			set vCrossFieldPercent = $(vCrossFieldPercent), [Split Percent $(i)] as [$(i)];	
		 Trace do something awesome!;
		Next
		
		let vFieldStatement = right(vFieldStatement,Len(vFieldStatement) - 2);
		let vCrossFieldSalesman = right(vCrossFieldSalesman,Len(vCrossFieldSalesman) - 2);
		let vCrossFieldPercent = right(vCrossFieldPercent,Len(vCrossFieldPercent) - 2);
		
		SplitSplits:
		Load
			[co Uf_coCommSalePaymatrix],
		    [Remainder Splits],
		    [Percent Splits],
		    $(vFieldStatement)
		from [$(ENV_QV_WORKING_DATA)PayMatrix.qvd](qvd);
		
		Store SplitSplits into [$(ENV_QV_WORKING_DATA)SplitSplits.qvd](qvd);
		Drop table SplitSplits;
		
		SplitCross:
		CrossTable('Salesman Position', 'Salesman',3)
		Load
			[co Uf_coCommSalePaymatrix],
		    [Remainder Splits],
		    [Percent Splits],
			$(vCrossFieldSalesman)
		from [$(ENV_QV_WORKING_DATA)SplitSplits.qvd](qvd)
		where 1=1;
		
		store SplitCross into [$(ENV_QV_WORKING_DATA)SplitCrossSalesman.qvd](qvd);
		Drop Table SplitCross;
		
		SplitCross:
		CrossTable('Salesman Position', 'Split Percent',1)
		Load
			[co Uf_coCommSalePaymatrix],
			$(vCrossFieldPercent)
		from [$(ENV_QV_WORKING_DATA)SplitSplits.qvd](qvd)
		where 1=1;
		
		store SplitCross into [$(ENV_QV_WORKING_DATA)SplitCrossPercents.qvd](qvd);
		Drop Table SplitCross;
		
		Split:
		Load
			[co Uf_coCommSalePaymatrix],
		    [Remainder Splits],
		    [Percent Splits],
			[Salesman Position],
			[Salesman]
		from [$(ENV_QV_WORKING_DATA)SplitCrossSalesman.qvd](qvd);
		
		
		Left Join(Split)
		Load
			[co Uf_coCommSalePaymatrix],
			[Salesman Position],
			[Split Percent]
		From
			[$(ENV_QV_WORKING_DATA)SplitCrossPercents.qvd](qvd);
			
		Left Join(Split)
		Load
			[co Uf_coCommSalePaymatrix],
			Sum([Split Percent]) as [Total Split Percent],
			100 - Sum([Split Percent]) as [Remaining Split Percent]
		resident
			Split
		Group by [co Uf_coCommSalePaymatrix];
		
		Left Join(Split)
		Load
			[co Uf_coCommSalePaymatrix],
			[Salesman Position],
			If(Len(Trim([Split Percent]))>0,[Split Percent]/100,([Remaining Split Percent]/100)/[Remainder Splits]) as [Salesman Contribution Percent]
		resident
			Split;
		
		Left Join(Split)
		LOAD 
		     If(Len(Trim([co Uf_coCommSalePaymatrix]))=0,If(Len(Trim(slsman))=0,'Undefined',slsman) & '-100',[co Uf_coCommSalePaymatrix]) as  [co Uf_coCommSalePaymatrix],
		     SiteCd & '-' & co_num as %OrderNumber,
		     SiteCd;
		Load
		[co Uf_coCommSalePaymatrix],
		replace(slsman,'-','~') as slsman,
		SiteCd,
		co_num
		FROM
		[$(ENV_QV_RAW_STAGE)co.qvd]
		(qvd);
		
		Store Split into [$(ENV_QV_WORKING_DATA)SplitTemp.qvd](qvd);
		Drop Table Split;
		
		Split:
		LOAD 
			 %OrderNumber & '-' & SiteCd & '-' & replace(Salesman,'~','-') as PrimaryKey,
			 SiteCd,
			 [co Uf_coCommSalePaymatrix], 
		     [Salesman Position], 
		     [Remainder Splits], 
		     [Percent Splits], 
		     SiteCd & '-' & replace(Salesman,'~','-') as Salesman, 
		     [Split Percent], 
		     [Total Split Percent], 
		     [Remaining Split Percent], 
		     [Salesman Contribution Percent], 
		     %OrderNumber
		FROM
		[$(ENV_QV_WORKING_DATA)SplitTemp.qvd](qvd);
		

		Store Split into [$(ENV_QV_FINAL_STAGE)OrderPayMatrix_Splits.qvd](qvd);
		drop table Split;


End sub



sub ProcessOrderDim

	call BuildMappingTable('WLPrefixMap')
    call BuildMappingTable('WonLostMap')
	OrderDim:
	LOAD 
	     SiteCd & '-' & co_num as %OrderNumber,
	     type as [Order Type], 
	     co_num as [Order Number], 
	     SiteCd & '-' & cust_num as %CustomerId,
	     est_num as [Order Estimate Number(Not connected to quotes)], 
	     cust_po as [Order Customer PO], 
	     Date(Floor(Num(order_date))) as [Order Date], 
	     terms_code as [Order Terms Code], 
	     ship_code as [Order Ship Code], 
	     stat as [Order Status],
	     slsman as [Order Salesperson Code], 
	     Date(Floor(Num(close_date))) as [Order Close Date], 
	     Left(If(type = 'E',If(Len(Trim(Uf_WonLost))=0,'UDF',Uf_WonLost)),1) as [Order Won Lost Group Code],
	     Applymap('WLPrefixMap',Left(If(type = 'E',If(Len(Trim(Uf_WonLost))=0,'UDF',Uf_WonLost)),1)) as [Order Won Lost Group],
	     If(type = 'E',If(Len(Trim(Uf_WonLost))=0,'UDF',Uf_WonLost)) as [Order Won Lost Code],
		 If(type = 'E',ApplyMap('WonLostMap',If(Len(Trim(Uf_WonLost))=0,'UDF',SiteCd & '-' & Uf_WonLost),'Unknown' & '-' & Uf_WonLost)) as [Order Won Lost],
	     //If(type = 'E',If(Len(Trim(Uf_WonLost))=0,'UDF',SiteCd & '-' & Uf_WonLost) & '-' & ApplyMap('WonLostMap',If(Len(Trim(Uf_WonLost))=0,'UDF',SiteCd & '-' & Uf_WonLost),'Unknown')) as [Order Won Lost],
	     "Uf_Application" as Application,
	     "Uf_DelTime" as LeadTime,
	     "Uf_EngInput" as EngineeringInput,
	     "Uf_ManuComp" as Complexity,
	     "Uf_NoComps" as Competitors,
	     "Uf_OpForRepeat" as PossibleRepeats,
	     "Uf_PIItem" as ItemType,
	     "Uf_ProdDesign" as ProductDesign,
	     "Uf_Notes" as QuoteNotes,
	     Date(Floor(Num("co UF_WonLostEstimatedCloseDate"))) as WonLostEstimatedCloseDate,
	     Date(Floor(Num(datefld))) as [Order Receipt Date],
	     taken_by as [Order Taken By],
	     CreatedBy as [Order Created By],
	     delterm as [Order Delivery Terms]
	FROM
	[$(ENV_QV_RAW_STAGE)co.qvd]
	(qvd);
	
	Join(OrderDim)
	LOAD 
	     SiteCd & '-RMA-' & rma_num as %OrderNumber,
	     'RMA' as [Order Type], 
	     rma_num as [Order Number],
	     SiteCd & '-' & cust_num as %CustomerId, 
	     //cust_po as [Order Customer PO], 
		 Date(Floor(Num(rma_date))) as OrderDate,
	     stat as [Order Status], 
	     Date(Floor(Num(rma_date))) as [Order Receipt Date],
	     taken_by as [Order Taken By],
	     CreatedBy as [Order Created By]
	From
	[$(ENV_QV_RAW_STAGE)rma.qvd]
	(qvd);
	

	



	
//moving this to the data model China and brazil	
	For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaOrderHeader.qvd')
	
		Concatenate(OrderDim)
			LOAD *
			FROM
				[$(File)]
				(qvd);
		
	Next File


	Store OrderDim into [$(ENV_QV_FINAL_STAGE)OrderDim.qvd](qvd);
	
	Drop Table OrderDim;


End Sub


Sub ProcessOrderLineDim
        call BuildMappingTable('HoldCodeMap')

		//Order Line Dimension for sales toolkit
		OrderLineDim:
		LOAD SiteCd & '-' & co_num  & '--' & co_line  & '-' & co_release as %OrderLineKey, 
			 co_line as [Order Line Number],
			 Uf_HoldCode as [Order Line Hold Code],
		     If(Len(Trim(Uf_HoldCode))>0,ApplyMap('HoldCodeMap',SiteCd & '-' & Uf_HoldCode,'Unknown-' & Uf_HoldCode),'Undefined') as [Order Line Hold Code Desc],
		     Uf_EstGP as [?Order Line Estimated GP], 
		     Uf_EST_VP as [Order Line Estimated GP],
		     If(Len(Trim(Uf_NewBusiness))=0,'Undefined',Uf_NewBusiness) as [Order Line New/Repeat Business],
		     description as [Order Line Desc],
		     stat as [Order Line Status],
		     Date(Floor(Num(projected_date))) as [Order Line Projected Date],
		     Date(Floor(Num(due_date))) as [Order Line Due Date], 
		     Date(Floor(Num(release_date))) as [Order Line Release Date], 
		     Date(Floor(Num(promise_date))) as [Order Line Promise Date],
		     ref_num as [Order Line Ref Number], 
		     Uf_JobType as [Order Line New/Repeat],
		     Date(CreateDate) as [Order Line Record Create Date],
		     Time(CreateDate) as [Order Line Record Create Time],
		     Date(Floor(Num([coitem Uf_PromiseDate]))) as [Order Line Promise Date WBUET],
		     cust_item as [Order Line Cust Item],
             [Order Line uf_PriceIncrP] as [Order Line Price Increase Percent]
		FROM
		[$(ENV_QV_RAW_STAGE)coitem.qvd]
		(qvd);
		
		Concatenate(OrderLineDim)
		LOAD SiteCd & '-RMA-' & "rma_num" & '--' & "rma_line" as %OrderLineKey, 
			 rma_line as [Order Line Number],
			 Uf_HoldCode as [Order Line Hold Code],
		     description as [Order Line Desc],
		     stat as [Order Line Status]
		From
		[$(ENV_QV_RAW_STAGE)rmaitem.qvd](qvd); 
		


		    
		

// code to be added to data model china and brazil data
		For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaOrderLine.qvd')
		
			Concatenate(OrderLineDim)
				LOAD *
				FROM
					[$(File)]
					(qvd);
			
		Next File


		
		Store OrderLineDim Into [$(ENV_QV_FINAL_STAGE)OrderLineDim.qvd](qvd);
		
		Drop table OrderLineDim;

end sub



sub ProcessQuoteFact
		QuoteTypes:
		Load * Inline [
		QuoteType
		E
		];
		
		//Load
		//   %OrderNumber,
		//   [%Customer Seq ID],
		//   Autonumber([%Customer Seq ID] & '-' & OrderDate, 'CustDateKey') as CustomerDateKey,
		//   OrderDate as MasterDate,
		//   OrderDate as FactDate,
		//   networkdays(ReceiptDate, OrderDate) as DaysToQuote
		
		QuoteFact:
		Load 
			%Site,
			'Quotes' as FactType,
			[%OrderNumber],
			If(len(Trim(prospect_id))>0,%Site & '-Prospect-' & prospect_id,[%Customer Seq ID]) as [%Customer Seq ID],
			[Quote Date],
			[Quote Receipt Date],
			%Salesman,
			Status,
			exch_rate as ExchangeRate,
			//WonLost,
			//Networkdays returns 1 when the dates are equal, subtracting 1 to jive with reality
			If(Status = 'Q',NetWorkDays([Quote Receipt Date], [Quote Date]) - 1) as [DaysToQuote]; 
		LOAD SiteCd as %Site, 
		     SiteCd & '-' & co_num as [%OrderNumber], 
		     SiteCd & '-' & cust_num & '-' & cust_seq as [%Customer Seq ID], 
		     Date(Floor(Num(order_date))) as [Quote Date],
		     Date(Floor(Num(If(Len(trim(datefld))=0,order_date,datefld)))) as [Quote Receipt Date],
		     If(Len(Trim(slsman))=0,SiteCd & '-Undefined',SiteCd & '-' & slsman) as %Salesman,
		     exch_rate,
		     stat as Status,
		     If(Len(Trim(Uf_WonLost))=0,'UDF',Uf_WonLost)  as WonLost,
		     prospect_id
		FROM
		[$(ENV_QV_RAW_STAGE)co.qvd]
		(qvd)
		Where exists(QuoteType,type);
		
		
		Drop Table QuoteTypes;
		
		//Calculate Days to Quote Targets.
		
		
		
		
		inner Join(QuoteFact)
		LOAD 
			 SiteCd as %Site, 
		     SiteCd & '-' & co_num as [%OrderNumber],
		     SiteCd & '-' & co_num  & '--' & co_line & '-' & co_release as [%OrderLineKey],
			 SiteCd & '-' & item as [%item],
			 If(Len(Trim(Uf_NewBusiness))=0,'Undefined', Uf_NewBusiness) as NewBusiness,
		     qty_ordered as QuantityQuoted,
		     price as Price
		FROM
		[$(ENV_QV_RAW_STAGE)coitem.qvd]
		(qvd);
		
		DaysToQuoteTargets:
		Load NewBusiness, BeginRange, EndRange, Dual([y/n],MeetsTarget) as MeetsTarget 
		From [$(ENV_SHAREPOINT_SALES)DaysToQuoteTargets.xlsx]
		(ooxml, embedded labels, table is [Days To Quote Targets]);
		
		
		
		//Inline [
		//NewBusiness, BeginRange, EndRange, MeetsTarget, y/n
		//New Business, 0, 7, 1 ,Yes
		//Repeat Business, 0, 2, 1,Yes
		//Undefined, 0, 2, 1,Yes
		//New Business, 8, 99999, 0,No
		//Repeat Business, 3, 99999, 0,No
		//Undefined, 3, 99999, 0,No
		//];
		
		
		
		Left Join(QuoteFact)
		IntervalMatch(DaysToQuote, NewBusiness)
		Load BeginRange, EndRange, NewBusiness Resident DaysToQuoteTargets;
		
		Left Join(QuoteFact)
		Load
			NewBusiness,
			BeginRange,
			EndRange,
			MeetsTarget as MeetsDaysToQuoteTarget
		Resident
			DaysToQuoteTargets;
			
		Drop Table DaysToQuoteTargets;
		Drop Fields BeginRange, EndRange from QuoteFact;
		
		Left Join(QuoteFact)
		LOAD Date(floor(Num(CurrencyDate))) as [Quote Date], 
		     Site as %Site, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM
		[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
		(qvd);
		
		
		Store QuoteFact into [$(ENV_QV_WORKING_DATA)QuoteFactTemp.qvd](qvd);
		Drop Table QuoteFact;
		
		QuoteFact:
		Load 
			FactType,
			%Site,
			%OrderNumber,
			'ORDER-' & %OrderNumber as [Order Invoice Link Key],
			[%Customer Seq ID],
			[Quote Date],
			[Quote Receipt Date],
			%Salesman,
			%OrderLineKey,
			%item,
			DaysToQuote,
			MeetsDaysToQuoteTarget,	
			ExchangeRate,
			1 as [Quote Line Count],	
			QuantityQuoted as EstimatedQuantity,
			Price/ExchangeRate as EstimatedPrice,
			QuantityQuoted * (Price/ExchangeRate) as EstimatedAmount,
			ExchangeRate as Conv_CUST,
			Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		From [$(ENV_QV_WORKING_DATA)QuoteFactTemp.qvd](qvd);
		
		
		Store QuoteFact into [$(ENV_QV_FINAL_STAGE)QuoteFact.qvd](qvd);
		
		Drop Table QuoteFact;

end sub



sub ProcessBookingFact

		BookingFact:
		Load 
			'Sales' as FactType,
			%Site,
			[OrderType],
			[%OrderNumber],
			[%Customer Seq ID],
			OrderStatus,
			exch_rate as Conv_CUST,
			%PayMatrix; 
		LOAD SiteCd as %Site, 
		     SiteCd & '-' & co_num as [%OrderNumber],
		     SiteCd & '-' & cust_num & '-' & cust_seq as [%Customer Seq ID], 
		     Date(Floor(Num(order_date))) as [Order Date],
		     exch_rate,
		     stat as OrderStatus,
		     type as OrderType,
		     If(Len(Trim([co Uf_coCommSalePaymatrix]))=0,If(Len(Trim(slsman))=0,'UNDEFINED',slsman) & '-100',[co Uf_coCommSalePaymatrix]) as  [%PayMatrix]
		FROM
		[$(ENV_QV_RAW_STAGE)co.qvd]
		(qvd)
		Where type <> 'E';
		
		
		Left Join(BookingFact)
		LOAD SiteCd & '-' & "co_num" as %OrderNumber,
		     SiteCd & '-' & "co_num" & '--' & "co_line"  & '-' & co_release as %OrderLineKey,
		    SiteCd & '-' & item as %item
		//    "qty_ordered" as QtyOrdered
		From
		[$(ENV_QV_RAW_STAGE)coitem.qvd]
		(qvd);
		//Where $(vStandardSiteCondition);
		
		//booking transaction details
		Left Join(BookingFact)
		LOAD 
			 SiteCd & '-' & "co_num" & '--' & "co_line"  & '-' & co_release as %OrderLineKey,
		     activity_seq, 
		     Date(Floor(Num(activity_date))) as MasterDate,
             Year(Date(Floor(Num(activity_date)))) & ' Actuals'  as %ForecastVersion,
             'TA' & Date(Floor(Num(activity_date)),'YYMM')  as %ForecastPeriod,
		     Date(Floor(Num(activity_date))) as FactDate,
		     Time(Floor(frac(activity_date)/$(vTimestampRoundingFactor))*$(vTimestampRoundingFactor)) as [Sales Transaction Time],
		     qty_chg as QtySold, 
		     trans_amt as TransAmt
		FROM
		[$(ENV_QV_RAW_STAGE)coitem_log.qvd]
		(qvd);
		
		Left Join(BookingFact)
		LOAD 
			%OrderNumber,
			Salesman as %Salesman, 
		    [Salesman Contribution Percent]
		FROM
		[$(ENV_QV_FINAL_STAGE)OrderPayMatrix_Splits.qvd]
		(qvd);
		
		
		Store BookingFact into [$(ENV_QV_WORKING_DATA)BookingFactTemp.qvd](qvd);
		Drop Table BookingFact;
		
		
		
		BookingFact:
		LOAD %OrderNumber, 
			 'ORDER-' & %OrderNumber as [Order Invoice Link Key],
		     %OrderLineKey, 
             [%ForecastVersion],
             %ForecastPeriod,
		     FactType, 
		     %Site, 
		     [%Customer Seq ID], 
		     OrderStatus, 
		     Conv_CUST, 
		     %item, 
		     activity_seq, 
		     MasterDate, 
		     FactDate, 
		     [Sales Transaction Time], 
		     %Salesman, 
		     [Salesman Contribution Percent],
		     QtySold * [Salesman Contribution Percent]  as [Sales Qty Sold], 
		     (TransAmt/Conv_CUST) * [Salesman Contribution Percent] as [Sales TransAmt]
		from [$(ENV_QV_WORKING_DATA)BookingFactTemp.qvd]
		(qvd)
		Where Len(Trim(%OrderLineKey))>0 and Len(Trim(activity_seq))>0;
		
		RMA:
		Load
			'Sales' as FactType,
			SiteCd & '-RMA-' & rma_num as %OrderNumber,
			SiteCd as %Site,
			SiteCd & '-' & cust_num & '-' & cust_seq as [%Customer Seq ID],
			Date(Floor(Num(rma_date))) as OrderDate,
			stat as OrderStatus,
			exch_rate as Conv_CUST
		From
		[$(ENV_QV_RAW_STAGE)rma.qvd](qvd);
		
		Inner Join(RMA)
		LOAD 
			SiteCd & '-RMA-' & rma_num as %OrderNumber,
			//SiteCd as %Site,
		    //"rma_line" as "co_line",
		    SiteCd & '-RMA-' & "rma_num" & '--' & "rma_line" as %OrderLineKey,
		    SiteCd & '-' & item as %item,
		    "qty_to_return" as QtyReturned,
		    "cust_item" as CustomerItem
		//SQL SELECT *
		//FROM $(vDb).dbo.rmaitem;
		From
		[$(ENV_QV_RAW_STAGE)rmaitem.qvd]
		(qvd);
		
		
		Left Join(RMA)
		LOAD SiteCd & '-RMA-' & "rma_num" & '--' & "rma_line" as %OrderLineKey,
		    "activity_seq",
		     Date(Floor(Num(activity_date))) as MasterDate,
		     Date(Floor(Num(activity_date))) as FactDate,
		     Time(Floor(frac(activity_date)/$(vTimestampRoundingFactor))*$(vTimestampRoundingFactor)) as [Sales Transaction Time],
		    "qty_chg" as QtyChg,
		    "trans_amt" * -1 as TransAmt
		From
		[$(ENV_QV_RAW_STAGE)rmaitm_log.qvd]
		(qvd);
		
		Store RMA into [$(ENV_QV_WORKING_DATA)SalesRMATemp.qvd](qvd);
		Drop Table RMA;
		
		RMA:
		LOAD %OrderLineKey, 
		     %OrderNumber,
		     %Site, 
		     FactType, 
		     [%Customer Seq ID], 
		     OrderDate, 
		     OrderStatus, 
		     Conv_CUST, 
		     %item, 
		     %Site & '-Undefined' as %Salesman,
		     1 as [Salesman Contribution Percent], 
		     QtyReturned, 
		     CustomerItem, 
		     activity_seq, 
		     MasterDate, 
		     FactDate, 
		     [Sales Transaction Time], 
		     QtyChg as [Sales Qty Sold],
		     TransAmt/Conv_CUST as [Sales TransAmt]
		FROM
		[$(ENV_QV_WORKING_DATA)SalesRMATemp.qvd]
		(qvd)
		where Len(Trim(activity_seq))>0;
		
		Store RMA into [$(ENV_QV_FINAL_STAGE)SalesRMA.qvd](qvd);
		Drop Table RMA;
		
		Join(BookingFact)
		LOAD 
			 %OrderNumber,
			 'ORDER-' & %OrderNumber as [Order Invoice Link Key],
			 %OrderLineKey,
			 FactType,
			 %Site,	 
		     [%Customer Seq ID], 
			 OrderStatus,
			 %item,
			 activity_seq, 
			 MasterDate,
			 FactDate,
			 [Sales Transaction Time],
			 %Salesman,
		     [Salesman Contribution Percent], 
		     Conv_CUST, 
		  	 [Sales Qty Sold], 
		     [Sales TransAmt]
		from
		 [$(ENV_QV_FINAL_STAGE)SalesRMA.qvd](qvd);
		 
		Left Join(BookingFact)
		LOAD Date(Floor(Num(CurrencyDate))) as [MasterDate], 
		     Site as %Site, 
		     Conv_LOCAL, 
		     Conv_USD, 
		     Conv_GBP
		FROM
		[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
		(qvd); 
		
		For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaBookingFact.qvd')
		
			Concatenate(BookingFact)
			Load * 
			FROM
			[$(File)]
			(qvd);
			
		Next File
			 
		
		Store BookingFact into [$(ENV_QV_FINAL_STAGE)BookingFact.qvd](qvd);
		Drop Table BookingFact;


End sub



sub ProcessShipFact

ShipFact:
LOAD
	'Shipments' as FactType,
	SiteCd as %Site,
    SiteCd & '-' & co_num as %OrderNumber,
    SiteCd & '-' & "co_num" & '--' & "co_line" & '-' & co_release as %OrderLineKey,
    SiteCd & '-' & "co_num" & '--' & "co_line" & '-' & co_release & '-' & date_seq & '-' & date(Floor(Num(ship_date))) as ShipKey,
     
    1 as ShipCounter, 
    Date(Floor(Num("ship_date"))) as MasterDate,
    "qty_shipped" as ShipQty,
    price as ShipPrice,
    cost as [Ship Unit Cost],
	matl_cost as [Ship Unit Material Cost],
	lbr_cost as [Ship Unit Labor Cost],
	Rangesum(fovhd_cost, vovhd_cost) as [Ship Unit Overhead Cost],
	fovhd_cost as [Ship Unit Fixed Overhead Cost],
	vovhd_cost as [Ship Unit Variable Overhead Cost],
	out_cost as [Ship Unit Outside Cost];
//SQL SELECT
//	co_num,
//	co_line,
//	co_release,
//	date_seq, 
//	ship_date,
//	qty_shipped,
//	price,
//	cost,
//	matl_cost,
//	lbr_cost,
//	vovhd_cost,
//	fovhd_cost,
//	out_cost	
//FROM $(vDb).dbo."co_ship";
Load *
From
[$(ENV_QV_RAW_STAGE)co_ship.qvd]
(qvd);

Left Join(ShipFact)
LOAD SiteCd & '-' & "co_num" as %OrderNumber,
    SiteCd & '-' & "co_num" & '--' & "co_line"  & '-' & co_release as %OrderLineKey,
    //SiteCd as Site,
    SiteCd & '-' & item as %item,
    "qty_ordered" as QtyOrdered,
    Date(Floor(Num("due_date"))) as DueDate,
    Date(Floor(Num("release_date"))) as ReleaseDate,
    Date(Floor(Num("promise_date"))) as PromiseDate,
    stat as LineStatus,
    Date(Floor(Num("projected_date"))) as LineProjectedDate,
    description as OrderLineDesc,
    "Uf_EST_VP" as EstimatedGP,
    IF(isnull("Uf_HoldCode") = -1,'EST',"Uf_HoldCode") as HoldCode,
    SiteCd & '-' & IF(isnull("Uf_HoldCode") = -1,'EST',"Uf_HoldCode") as %HoldCode,
    If(Len(Trim(Uf_NewBusiness))>0,Uf_NewBusiness,'Undefined') as NewBusiness;
//SQL SELECT *
//FROM $(vDb).dbo.coitem;
Load *
From
[$(ENV_QV_RAW_STAGE)coitem.qvd]
(qvd);
//Where $(vStandardSiteCondition);

Left Join(ShipFact)
Load 
	'Shipments' as FactType,
	%Site,
	type as [OrderType],
	[%OrderNumber],
	[%Customer Seq ID],
	//SalesPerson,
	Status,
	[Order Date],
	exch_rate as Conv_CUST; 
LOAD SiteCd as %Site, 
     SiteCd & '-' & co_num as [%OrderNumber], 
     SiteCd & '-' & cust_num & '-' & cust_seq as [%Customer Seq ID], 
     Date(Floor(Num(order_date))) as [Order Date],
     Date(Floor(Num(datefld))) as [Quote Receipt Date],
     SiteCd & '-' & slsman as SalesPerson,
     exch_rate,
     stat as Status,
     Uf_WonLost  as WonLost,
     type
FROM
[$(ENV_QV_RAW_STAGE)co.qvd]
(qvd)
;

Left Join(ShipFact)
LOAD 
	%OrderNumber,
	Salesman as %Salesman,
    [Salesman Contribution Percent]     
FROM
[$(ENV_QV_FINAL_STAGE)OrderPayMatrix_Splits.qvd]
(qvd);

//6/1/2015 Changed sync of Currency based on Order date CAC 
Left Join(ShipFact)
LOAD Date(floor(Num(CurrencyDate))) as [Order Date], 
     Site as %Site, 
     Conv_LOCAL, 
     Conv_USD, 
     Conv_GBP
FROM
[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
(qvd);


Store ShipFact into [$(ENV_QV_WORKING_DATA)ShipFactTemp.qvd](QVD);

Drop Table ShipFact;


ShipFact:
LOAD FactType, 
     %Site, 
     %OrderNumber,
     'ORDER-' & %OrderNumber as [Order Invoice Link Key], 
     %OrderLineKey, 
     %item, 
     ShipKey, 
     ShipCounter,
     [%Customer Seq ID], 
     %Salesman, 
     MasterDate,
     MasterDate as [Ship Date],
     If(MasterDate > DueDate,Dual('No',0),Dual('Yes',1)) as IsShipOnTime,
     If(MasterDate > PromiseDate,Dual('No',0),Dual('Yes',1)) as [IsShipOnTime(Promise Date)],
     ShipQty * [Salesman Contribution Percent] as ShipQty, 
     ShipPrice/Conv_CUST as ShipUnitPrice,
     ((ShipPrice * ShipQty)/Conv_CUST) * [Salesman Contribution Percent] as [ShipPrice],
     ((ShipPrice * ShipQty)/Conv_CUST) * [Salesman Contribution Percent] as [Ship Extended Price],
     ([Ship Unit Cost] * ShipQty) * [Salesman Contribution Percent] as [Ship Extended Cost],
     [Ship Unit Cost], 
     [Ship Unit Material Cost], 
     [Ship Unit Labor Cost], 
     [Ship Unit Overhead Cost], 
     [Ship Unit Fixed Overhead Cost], 
     [Ship Unit Variable Overhead Cost], 
     [Ship Unit Outside Cost],
     Conv_CUST,
     Conv_LOCAL, 
     Conv_USD, 
     Conv_GBP
     //QtyOrdered, 
     //DueDate, 
     //ReleaseDate, 
     //PromiseDate, 
     //LineStatus, 
     //LineProjectedDate, 
     //OrderLineDesc, 
     //EstimatedGP, 
     //HoldCode, 
     //%HoldCode, 
     //NewBusiness, 
     //OrderType, 
FROM
[$(ENV_QV_WORKING_DATA)ShipFactTemp.qvd]
(qvd);

For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaShippingFact.qvd')

	Concatenate(ShipFact)
	Load * 
	FROM
	[$(File)]
	(qvd);
	
Next File

Store ShipFact into [$(ENV_QV_FINAL_STAGE)ShipFact.qvd](qvd);
Drop table ShipFact;
//exit script;

//Drop table ShipFact;
End Sub



sub CombinedShipFact

ShipFact:
LOAD
	'Shipments' as FactType,
	SiteCd as %SiteKey,
    SiteCd & '-' & co_num as %OrderKey,
    SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release as %OrderLineKey,
    SiteCd & '-' & "co_num" & '-' & "co_line" & '-' & co_release & '-' & date_seq & '-' & date(Floor(Num(ship_date))) as %ShipKey,
    1 as [Shipment Transaction Counter], 
    Date(Floor(Num("ship_date"))) as [Shipment Master Date],
    "qty_shipped" as [Shipment Quantity Shipped],
    price as [Shipment Unit Price],
    cost as [Shipment Unit Total Cost],
	matl_cost as [Shipment Unit Material Cost],
	lbr_cost as [Shipment Unit Labor Cost],
	Rangesum(fovhd_cost, vovhd_cost) as [Shipment Unit Overhead Cost],
	fovhd_cost as [Shipment Unit Fixed Overhead Cost],
	vovhd_cost as [Shipment Unit Variable Overhead Cost],
	out_cost as [Shipment Unit Outside Cost];
//SQL SELECT
//	co_num,
//	co_line,
//	co_release,
//	date_seq, 
//	ship_date,
//	qty_shipped,
//	price,
//	cost,
//	matl_cost,
//	lbr_cost,
//	vovhd_cost,
//	fovhd_cost,
//	out_cost	
//FROM $(vDb).dbo."co_ship";
Load *
From
[$(ENV_QV_RAW_STAGE)co_ship.qvd]
(qvd);

Left Join(ShipFact)
LOAD 
    SiteCd & '-' & "co_num" & '-' & "co_line"  & '-' & co_release as %OrderLineKey,
    //SiteCd as Site,
    'MFG-' & SiteCd & '-' & item as %itemKey,
    "qty_ordered" as [Shipment Quantity Ordered],
    Date(Floor(Num("due_date"))) as [Shipment Due Date],
    Date(Floor(Num("release_date"))) as [Shipment Release Date],
    Date(Floor(Num("promise_date"))) as [Shipment Promise Date],
    stat as [Shipment Line Status],
    Date(Floor(Num("projected_date"))) as [Shipment Projected Date],
    description as [Shipment Order Line Desc],
    "Uf_EST_VP" as [Shipment Estimated Gross Profit],
    IF(isnull("Uf_HoldCode") = -1,'EST',"Uf_HoldCode") as [Shipment Hold Code],
    SiteCd & '-' & IF(isnull("Uf_HoldCode") = -1,'EST',"Uf_HoldCode") as %HoldCodeKey,
    If(Len(Trim(Uf_NewBusiness))>0,Uf_NewBusiness,'Undefined') as [Shipment New Business]
//SQL SELECT *
//FROM $(vDb).dbo.coitem;
//Load *
From
[$(ENV_QV_RAW_STAGE)coitem.qvd]
(qvd);
//Where $(vStandardSiteCondition);

Left Join(ShipFact)
LOAD SiteCd as %SiteKey, 
     SiteCd & '-' & co_num as [%OrderKey],
     SiteCd & '-' & cust_num & '-0' as %BillToCustomerKey,
     SiteCd & '-' & cust_num & '-' & cust_seq as [%CustomerSeqKey], 
     //SiteCd & '-' & slsman as %SalesPersonKey,
     Date(Floor(Num(order_date))) as [Shipment Order Date],
     Date(Floor(Num(datefld))) as [Shipment Quote Receipt Date],
     exch_rate as Conv_CUST,
     stat as [Shipment Order Status],
     Uf_WonLost  as [Shipment Order Won Lost],
     type as [Shipment Order Type]
FROM
[$(ENV_QV_RAW_STAGE)co.qvd]
(qvd)
;

Left Join(ShipFact)
LOAD 
	%OrderNumber as %OrderKey,
	Salesman as %SalesPersonKey,
    [Salesman Contribution Percent]     
FROM
[$(ENV_QV_FINAL_STAGE)OrderPayMatrix_Splits.qvd]
(qvd);

//6/1/2015 Changed sync of Currency based on Order date CAC 
Left Join(ShipFact)
LOAD Date(floor(Num(CurrencyDate))) as [Shipment Order Date], 
     Site as %SiteKey, 
     Conv_LOCAL, 
     Conv_USD, 
     Conv_GBP
FROM
[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
(qvd);


//Store ShipFact into [$(ENV_QV_WORKING_DATA)ShipFactTemp.qvd](QVD);

//Drop Table ShipFact;


NewShipFact:
LOAD FactType, 
     %SiteKey, 
     %OrderKey,
     //'ORDER-' & %OrderNumber as [Order Invoice Link Key], 
     %OrderLineKey, 
     %itemKey, 
     [%ShipKey],
     %BillToCustomerKey,
     [%CustomerSeqKey] as %ShipToCustomerKey,
     [%SalesPersonKey],
     [Shipment Master Date],
     [Shipment Transaction Counter],
     If([Shipment Master Date] > [Shipment Due Date],Dual('No',0),Dual('Yes',1)) as [Shipment Is On Time(Due Date)],
     If([Shipment Master Date] > [Shipment Promise Date],Dual('No',0),Dual('Yes',1)) as [Shipment Is On Time(Promise Date)],
     [Shipment Quantity Shipped] * [Salesman Contribution Percent] as [Shipment Quantity Shipped], 
     [Shipment Unit Price]/Conv_CUST as [Shipment Unit Price(LOCAL)],
     [Shipment Unit Price] as [Shipment Unit Price(CUST)],
     ([Shipment Unit Price]/Conv_CUST) * Conv_USD as [Shipment Unit Price(USD)],
     ([Shipment Unit Price]/Conv_CUST) * Conv_GBP as [Shipment Unit Price(GBP)],
     (([Shipment Unit Price] * [Shipment Quantity Shipped])/Conv_CUST) * [Salesman Contribution Percent] as [Shipment Extended Amount(LOCAL)],
     [Shipment Unit Price] * [Shipment Quantity Shipped] * [Salesman Contribution Percent] as [Shipment Extended Amount(CUST)],
     ((([Shipment Unit Price] * [Shipment Quantity Shipped])/Conv_CUST) * [Salesman Contribution Percent]) * Conv_USD as [Shipment Extended Amount(USD)],
     ((([Shipment Unit Price] * [Shipment Quantity Shipped])/Conv_CUST) * [Salesman Contribution Percent]) * Conv_GBP as [Shipment Extended Amount(GBP)],
     ([Shipment Unit Total Cost] * [Shipment Quantity Shipped]) * [Salesman Contribution Percent] as [Shipment Extended Cost(LOCAL)],
     ([Shipment Unit Total Cost] * [Shipment Quantity Shipped]) * [Salesman Contribution Percent] * Conv_CUST  as [Shipment Extended Cost(CUST)],
     ([Shipment Unit Total Cost] * [Shipment Quantity Shipped]) * [Salesman Contribution Percent] * Conv_USD as [Shipment Extended Cost(USD)],
     ([Shipment Unit Total Cost] * [Shipment Quantity Shipped]) * [Salesman Contribution Percent] * Conv_GBP as [Shipment Extended Cost(GBP)],
     [Shipment Unit Total Cost] as [Shipment Unit Total Cost(LOCAL)], 
     [Shipment Unit Total Cost] * Conv_CUST as [Shipment Unit Total Cost(CUST)],
     [Shipment Unit Total Cost] * Conv_USD as [Shipment Unit Total Cost(USD)],
     [Shipment Unit Total Cost] * Conv_GBP as [Shipment Unit Total Cost(GBP)],
     
     [Shipment Unit Material Cost] as [Shipment Unit Material Cost(LOCAL)], 
     [Shipment Unit Material Cost] * Conv_CUST as [Shipment Unit Material Cost(CUST)],
     [Shipment Unit Material Cost] * Conv_USD as [Shipment Unit Material Cost(USD)],
     [Shipment Unit Material Cost] * Conv_GBP as [Shipment Unit Material Cost(GBP)],
     
     [Shipment Unit Labor Cost] as [Shipment Unit Labor Cost(LOCAL)], 
     [Shipment Unit Labor Cost] * Conv_CUST as [Shipment Unit Labor Cost(CUST)],
     [Shipment Unit Labor Cost] * Conv_USD as [Shipment Unit Labor Cost(USD)],
     [Shipment Unit Labor Cost] * Conv_GBP as [Shipment Unit Labor Cost(GBP)],
     
     [Shipment Unit Overhead Cost] as [Shipment Unit Overhead Cost(LOCAL)], 
     [Shipment Unit Overhead Cost] * Conv_CUST as [Shipment Unit Overhead Cost(CUST)],
     [Shipment Unit Overhead Cost] * Conv_USD as [Shipment Unit Overhead Cost(USD)],
     [Shipment Unit Overhead Cost] * Conv_GBP as [Shipment Unit Overhead Cost(GBP)],
     
     [Shipment Unit Fixed Overhead Cost] as [Shipment Unit Fixed Overhead Cost(LOCAL)], 
     [Shipment Unit Fixed Overhead Cost] * Conv_CUST as [Shipment Unit Fixed Overhead Cost(CUST)],
     [Shipment Unit Fixed Overhead Cost] * Conv_USD as [Shipment Unit Fixed Overhead Cost(USD)],
     [Shipment Unit Fixed Overhead Cost] * Conv_GBP as [Shipment Unit Fixed Overhead Cost(GBP)],
     
     [Shipment Unit Variable Overhead Cost] as [Shipment Unit Variable Overhead Cost(LOCAL)], 
     [Shipment Unit Variable Overhead Cost] * Conv_CUST as [Shipment Unit Variable Overhead Cost(CUST)],
     [Shipment Unit Variable Overhead Cost] * Conv_USD as [Shipment Unit Variable Overhead Cost(USD)],
     [Shipment Unit Variable Overhead Cost] * Conv_GBP as [Shipment Unit Variable Overhead Cost(GBP)],     
     
     [Shipment Unit Outside Cost] as [Shipment Unit Outside Cost(LOCAL)], 
     [Shipment Unit Outside Cost] * Conv_CUST as [Shipment Unit Outside Cost(CUST)],
     [Shipment Unit Outside Cost] * Conv_USD as [Shipment Unit Outside Cost(USD)],
     [Shipment Unit Outside Cost] * Conv_GBP as [Shipment Unit Outside Cost(GBP)]     
     
     //QtyOrdered, 
     //DueDate, 
     //ReleaseDate, 
     //PromiseDate, 
     //LineStatus, 
     //LineProjectedDate, 
     //OrderLineDesc, 
     //EstimatedGP, 
     //HoldCode, 
     //%HoldCode, 
     //NewBusiness, 
     //OrderType, 
Resident ShipFact;

Drop table ShipFact;

// For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaShippingFact.qvd')

// 	Concatenate(ShipFact)
// 	Load * 
// 	FROM
// 	[$(File)]
// 	(qvd);
	
// Next File

Store NewShipFact into [$(ENV_QV_FINAL_STAGE)NewShipFact.qvd](qvd);

Search Exclude '*(GBP)','*(USD)','*(CUST)','*(LOCAL)','%*'; 
Drop table NewShipFact;
//exit script;

//Drop table ShipFact;
End Sub



Sub ProcessOpenOrders

OpenOrderFact:
Load
	SiteCd as %Site,
	SiteCd & '-' & "co_num" as %OrderNumber,
    SiteCd & '-' & cust_num & '-' & cust_seq as [%Customer Seq ID], 
	exch_rate as Conv_CUST,
	Date(Floor(Num(order_date))) as [Order Date]
from 
[$(ENV_QV_RAW_STAGE)co.qvd](qvd)
Where type <> 'E';

Inner Join(OpenOrderFact)
Load
	'Backlog' as FactType,
    SiteCd & '-' & co_num as %OrderNumber,
    SiteCd & '-' & "co_num" & '--' & "co_line" & '-' & co_release as OrderLineKey,
	SiteCd & '-' & item as [%item],
	stat as LineStatus,
    Date(Floor(Num("due_date"))) as MasterDate,
    Date(Floor(Num("due_date"))) as FactDate,
    Date(Floor(Num("due_date"))) as DueDate,
    Date(Floor(Num("release_date"))) as ReleaseDate,
    Date(Floor(Num("promise_date"))) as PromiseDate,
    //stat as LineStatus,
    Date(Floor(Num("projected_date"))) as LineProjectedDate,
    description as OrderLineDesc,
    "Uf_EST_VP" as EstimatedGP,
    IF(isnull("Uf_HoldCode") = -1,'EST',"Uf_HoldCode") as HoldCode,
    SiteCd & '-' & IF(isnull("Uf_HoldCode") = -1,'EST',"Uf_HoldCode") as %HoldCode,
    If(Len(Trim(Uf_NewBusiness))>0,Uf_NewBusiness,'Undefined') as NewBusiness,
    qty_ordered as QtyOrdered,
    qty_shipped as QtyShipped,
    qty_ordered - qty_shipped as [Backlog Remaining Units],
    price_conv,
    cost * (qty_ordered - qty_shipped) as [Backlog Extended Total Cost],
    cost as [Backlog Unit Cost],
	matl_cost as [Backlog Unit Material Cost],
	lbr_cost as [Backlog Unit Labor Cost],
	Rangesum(fovhd_cost, vovhd_cost) as [Backlog Unit Overhead Cost],
	fovhd_cost as [Backlog Unit Fixed Overhead Cost],
	vovhd_cost as [Backlog Unit Variable Overhead Cost],
	out_cost as [Backlog Unit Outside Cost],
//   (price_conv * (QtyOrdered - QtyShipped))/Conv_CUST as RemainingValue,
//   QtyOrdered - QtyShipped as [Backlog Remaining Units],
//   (Price * QtyOrdered)/Conv_CUST as OrderValue,
   If(match(Uf_HoldCode,'P','Y') >= 1,'Scheduled','In Queue') as JobStatus,
   1 as OrderCounter,
   If((match(Uf_HoldCode,'P','Y') >= 1) Or Len(Trim(Uf_HoldCode))=0,If( Floor(Num("due_date")) < num('$(vToday)'), Dual('Yes',1),Dual('No',0)),Dual('No',0)) as IsLate,
   If( Date(Floor(Num("promise_date"))) < num('$(vToday)'), Dual('Yes',1),Dual('No',0)) as IsPromisePast
FROM
[$(ENV_QV_RAW_STAGE)coitem.qvd]
(qvd)
Where stat = 'O';

Left Join(OpenOrderFact)
LOAD 
     %OrderNumber,
     Salesman, 
     [Salesman Contribution Percent]
FROM
[$(ENV_QV_FINAL_STAGE)OrderPayMatrix_Splits.qvd]
(qvd);

Left Join(OpenOrderFact)
LOAD Date(Floor(Num(CurrencyDate))) as [Order Date], 
     Site as %Site, 
     Conv_LOCAL, 
     Conv_USD, 
     Conv_GBP
FROM
[$(ENV_QV_FINAL_STAGE)DailyCurrencyRates.qvd]
(qvd);


Store OpenOrderFact into [$(ENV_QV_WORKING_DATA)OpenOrderFactTemp.qvd](qvd);
Drop Table OpenOrderFact;

OpenOrderFact:
LOAD  
     FactType, 
     %Site, 
     [%Customer Seq ID],
     %OrderNumber,
     'ORDER-' & %OrderNumber as [Order Invoice Link Key], 
     Salesman as %Salesman, 
     OrderLineKey as %OrderLineKey, 
     %item, 
     MasterDate, 
     FactDate, 
     DueDate, 
     ReleaseDate, 
     PromiseDate, 
     LineProjectedDate, 
     IsLate, 
     IsPromisePast, 
     JobStatus, 
     NewBusiness, 
     //QtyOrdered, 
     //QtyShipped, 
     [Backlog Remaining Units] * [Salesman Contribution Percent] as [Backlog Remaining Units],
     [Backlog Unit Cost] * ([Backlog Remaining Units] * [Salesman Contribution Percent]) as [Backlog Extended Total Cost],
     [Backlog Unit Cost],
	 [Backlog Unit Material Cost],
	 [Backlog Unit Labor Cost],
	 [Backlog Unit Overhead Cost],
	 [Backlog Unit Fixed Overhead Cost],
	 [Backlog Unit Variable Overhead Cost],
	 [Backlog Unit Outside Cost], 
     //price_conv,  
     OrderCounter * [Salesman Contribution Percent] as OrderCounter,
     ((price_conv * [Backlog Remaining Units])/Conv_CUST) * [Salesman Contribution Percent] as RemainingValue,
//   QtyOrdered - QtyShipped as [Backlog Remaining Units],
     ((price_conv * QtyOrdered)/Conv_CUST) * [Salesman Contribution Percent] as OpenOrderValue,
     Conv_CUST,
     Conv_LOCAL, 
     Conv_USD, 
     Conv_GBP
FROM
[$(ENV_QV_WORKING_DATA)OpenOrderFactTemp.qvd]
(qvd);


For each File in FileList('$(ENV_QV_REMOTE_DATA)Combined\ChinaBacklogFact.qvd')

	Concatenate(OpenOrderFact)
		LOAD *
		FROM
		[$(File)]
		(qvd);
	
Next File

Store OpenOrderFact into [$(ENV_QV_FINAL_STAGE)OpenOrderFact.qvd](qvd);
Drop Table OpenOrderFact;



End Sub



Sub NewSROInvoiceFacts

				call BuildMappingTable('INVOICE_DISC_MAP')
        call BuildMappingTable('PRODUCT_CODE_MAP')
        call BuildMappingTable('CustomerCurrencyMap')
        call BuildMappingTable('SROLaborCost')
		
		FSSites:
		CrossTable('FSSites','FSInclude',1)
		LOAD *
		FROM
		[$(ENV_QV_EXTERNAL_DATA)SiteTableInfo.xlsx]
		(ooxml, embedded labels, table is SiteApps)
		Where AppName = 'Field Service Toolkit';
		
		slsman:       
		LOAD PrimaryKey as %SalesPersonId, 
		     slsman as [Salesperson Code], 
		     //If(Len(Trim([slsman Uf_Cook_Slsman_Desc]))=0,[slsman UF_Cook_Slsman_Desc],[slsman Uf_Cook_Slsman_Desc]) as [Salesperson Name],
		     [slsman Uf_Cook_Slsman_Desc] as [Salesperson Name],
		     SiteCd & '-' & If(Len(Trim(slsmangr))=0,SiteCd,slsmangr) as [%SalespersonManagerId]

		FROM
		[$(ENV_QV_RAW_STAGE)slsman.qvd]
		(qvd)
		Where exists(FSSites,SiteCd);
		
		Concatenate(slsman)
		Load
		FSSites & '-' & FSSites as %SalesPersonId,
		FSSites as [Salesperson Code],
		FSSites as [Salesperson Name],
		'Cook' as [%SalespersonManagerId]
		Resident
		   FSSites;

		Concatenate(slsman)
		Load * Inline [
		%SalesPersonId,Salesperson Code,Salesperson Name
		Cook,Cook,Cook
		];		
		
		
		//Hierarchy(Salesperson, "Sales Manager", "SalespersonName",'Supervisor',"SalespersonName",'SalespersonTreeView','/')
		FSSalesHierarchy:
		Hierarchy(%SalesPersonId,[%SalespersonManagerId],[Salesperson Name],'Supervisor',[Salesperson Name],'Path','\','Depth')
		Load
		    %SalesPersonId,[%SalespersonManagerId],[Salesperson Name]
		Resident slsman;
		
		Left Join (FSSalesHierarchy)
		Load
		   %SalesPersonId,[Salesperson Code]
		resident slsman;
		
		Store FSSalesHierarchy into [$(ENV_QV_FINAL_STAGE)FSSalesHierarchy.qvd](qvd); 
		Drop table FSSalesHierarchy;
		
		FSSalesHierarchyBelongsTo:
		HierarchyBelongsTo(%SalesPersonId,[%SalespersonManagerId],[Salesperson Name],'Supervisor','Supervisor Name','DepthDiff')
		Load
		    %SalesPersonId,[%SalespersonManagerId],[Salesperson Name]
		Resident slsman;
		
		Left Join (FSSalesHierarchyBelongsTo)
		Load
		   %SalesPersonId,[Salesperson Code]
		resident slsman;
		
		Store FSSalesHierarchyBelongsTo into [$(ENV_QV_FINAL_STAGE)FSSalesHierarchyBelongsTo.qvd](qvd); 
		Drop table FSSalesHierarchyBelongsTo;  
		
		Drop table slsman;
				
		
        
        
		SROHeaderFact:
		LOAD SiteCd as %SiteID,
		     [Invoice ID] as %InvoiceID,
		     //relationship between invoice header and fs_sro_inv_item does not include the invoice sequence number
		     SiteCd & '-' & [Invoice Header Number] as %FSSROInvoiceID,
		     SiteCd & '-' & [Invoice Header slsman] as %SlsmanId,
		     'Invoice Header' as FactType,
		     //[Invoice Header Number], 
		     //[Invoice Header inv_seq],
		     [Invoice Customer ID] as %ShipToCustomerKey,
		     SiteCd & '-' &  [Invoice Customer Number] & '-0'  as %BillToCustomerKey,
		     //[Invoice Header cust_seq], 
		     SiteCd & '-' & [Invoice Header co_num] as [%OrderID], 
		     [Invoice Header Invoice Date] as MasterDate,
		     [Invoice Header Terms ID] as %TermsID,
		     [Invoice Header exch_rate] as [Exchange Rate],
             ApplyMap('CustomerCurrencyMap',[Invoice Customer ID],Null()) as [Currency Code],
             
             [Invoice Header misc_charges] as [Misc Charges(CUST)], 
		     [Invoice Header prepaid_amt] as [Prepaid Amount(CUST)], 
		     [Invoice Header freight] as [Freight Amount(CUST)], 
		     [Invoice Header cost] as [Total Cost Amount(CUST)], 
		     [Invoice Header price] as [Total Price(CUST)],
             
             [Invoice Header misc_charges]/[Invoice Header exch_rate] as [Misc Charges(LOCAL)], 
		     [Invoice Header prepaid_amt]/[Invoice Header exch_rate] as [Prepaid Amount(LOCAL)], 
		     [Invoice Header freight]/[Invoice Header exch_rate] as [Freight Amount(LOCAL)], 
		     [Invoice Header cost]/[Invoice Header exch_rate] as [Total Cost Amount(LOCAL)], 
		     [Invoice Header price]/[Invoice Header exch_rate] as [Total Price(LOCAL)]
		FROM
		[$(ENV_QV_RAW_STAGE)inv_hdr.qvd]
		(qvd)
		Where exists(FSSites,SiteCd);
        
        Left Join(SROHeaderFact)
        LOAD
            Site as %SiteID,
            CurrencyDate AS MasterDate,
            Conv_USD,
            Conv_GBP
        FROM [lib://QV-DevelopmentData/Data\Final Stage\DailyCurrencyRates.qvd]
        (qvd);


		
		Left Join(SROHeaderFact)
		LOAD 
		      [inv_stax InvoiceId] as [%InvoiceID], 
		     Sum([inv_stax sales_tax]) as [Sales Tax Amount(CUST)]
		FROM
		[$(ENV_QV_RAW_STAGE)inv_stax.qvd]
		(qvd)
		Group by [inv_stax InvoiceId];
		
        Left Join(SROHeaderFact)
        Load
        	%InvoiceID,
            [Sales Tax Amount(CUST)] * [Exchange Rate] as [Sales Tax Amount(LOCAL)],
            [Sales Tax Amount(CUST)] * [Conv_USD] as [Sales Tax Amount(USD)],
            [Sales Tax Amount(CUST)] * [Conv_GBP] as [Sales Tax Amount(GBP)],
  
            [Misc Charges(LOCAL)] * Conv_USD as [Misc Charges(USD)], 
		    [Prepaid Amount(LOCAL)] * Conv_USD as [Prepaid Amount(USD)],  
		    [Freight Amount(LOCAL)] * Conv_USD as [Freight Amount(USD)],  
		    [Total Cost Amount(LOCAL)] * Conv_USD as [Total Cost Amount(USD)],  
		    [Total Price(LOCAL)] * Conv_USD as [Total Price(USD)],
            
            [Misc Charges(LOCAL)] * Conv_GBP as [Misc Charges(GBP)], 
		    [Prepaid Amount(LOCAL)] * Conv_GBP as [Prepaid Amount(GBP)],  
		    [Freight Amount(LOCAL)] * Conv_GBP as [Freight Amount(GBP)],  
		    [Total Cost Amount(LOCAL)] * Conv_GBP as [Total Cost Amount(GBP)],  
		    [Total Price(LOCAL)] * Conv_GBP as [Total Price(GBP)]
        Resident SROHeaderFact;
        

        
		Store SROHeaderFact into [$(ENV_QV_FINAL_STAGE)NewFSInvoiceHeaderFact.qvd](QVD);
		Drop table SROHeaderFact;
		//Left Join(SROHeaderFact)
		//LOAD PrimaryKey as [%OrderID],
		//   [fs_sro CreateDate] as sro_CreateDate
		//FROM
		//[$(ENV_QV_RAW_STAGE)fs_sro.qvd]
		//(qvd);
		
		
		InvoiceItem:
		Load
		     %SiteID,
		     %InvoiceID,
		     %FSSROInvoiceID,
		     %SlsmanId,
		     %ShipToCustomerKey,
		     %BillToCustomerKey, 
		     [%OrderID], 
		     MasterDate,
		     %TermsID,
             [Exchange Rate] as Conv_LOCAL,
             Conv_USD,
             Conv_GBP,
             [Currency Code],
		     'Invoice Line' as FactType
		from [$(ENV_QV_FINAL_STAGE)NewFSInvoiceHeaderFact.qvd](QVD);
		
		
		inner Join(InvoiceItem)
		load
		    [Invoice ID] as %FSSROInvoiceID,
		    [%FSSROInvoiceLineID],
            SROOperId as %SROOperID,
            
		    "inv_num",
		    //inv_seq,
		    "inv_line",
		    sro_num,
		    "sro_line",
		    "sro_oper",
		    
            [Oper Product Description],
		    line_disc/100 as [Line Discount],
		    hdr_disc/100 as [Header Discount],
		    ItemId,
		    [Item No],
		    qty as [Quantity],
            
            line_dtl_price as [Standard Price(CUST)],
            line_dtl_price * (1 - If(isnull(hdr_disc),0,hdr_disc/100)) as [Net Price(CUST)],
            (line_dtl_price * qty_to_bill) * (1 - If(isnull(hdr_disc),0,hdr_disc/100)) as [Extended Amount(CUST)],
		    //((line_dtl_price *(1-(line_disc/100))) *(1-(hdr_disc/100))) as [Net Price(CUST)],
		    //((line_dtl_price *(1-(line_disc/100))) *(1-(hdr_disc/100))) * line_qty_to_bill as [Extended Amount(CUST)],
            subfield(ApplyMap('SROLaborCost',SROLineOperInvID,'0|0|0|0'),'|',2) as [Extended Labor Amount(CUST)],
            subfield(ApplyMap('SROLaborCost',SROLineOperInvID,'0|0|0|0'),'|',1) as [Extended Labor Cost(CUST)],
		    qty * line_cost as [Item Cost(CUST)]
            ;
		LOAD 
		    SiteCd & '-' & [fs_sro_inv_item sro_line]  & '-' & [fs_sro_inv_item sro_num] & '-' &  [fs_sro_inv_item sro_oper] as SROOperId,
		    SiteCd & '-' & [fs_sro_inv_item sro_num] & '-' & [fs_sro_inv_item sro_line]  & '-' & [fs_sro_inv_item sro_oper] & '-' & [fs_sro_inv_item inv_num] as SROLineOperInvID, 
            PrimaryKey as [%FSSROInvoiceLineID],
            [fs_sro_inv_item Site-InvoiceNum] as [Invoice ID],
		    [fs_sro_inv_item inv_line] as inv_line, 
		    [fs_sro_inv_item inv_num] as inv_num,
		    [fs_sro_inv_item sro_num] as sro_num,
		    [fs_sro_inv_item sro_line] as sro_line,
		    [fs_sro_inv_item sro_oper] as sro_oper,
		    [fs_sro_inv_item cost] as line_cost,
		    [fs_sro_inv_item description] as [Oper Product Description],
		    [fs_sro_inv_item disc] as line_disc,
		    applymap('INVOICE_DISC_MAP',[fs_sro_inv_item Site-InvoiceNum],0) as hdr_disc,
		    If(isnull([fs_sro_inv_item item]),'Project Fixed or Misc',SiteCd & '-' & [fs_sro_inv_item item]) as ItemId,
		    If(isnull([fs_sro_inv_item item]),'Project Fixed or Misc',[fs_sro_inv_item item]) as [Item No],
		    [fs_sro_inv_item price] as line_price,
		    [fs_sro_inv_item proj_price] as line_proj_price,
		    If([fs_sro_inv_item price] = 0,If([fs_sro_inv_item proj_price] = 0,0,[fs_sro_inv_item proj_price]),[fs_sro_inv_item price]) as line_dtl_price,
		    [fs_sro_inv_item qty] as qty,
            [fs_sro_inv_item qty_to_bill] as qty_to_bill
		FROM
		[$(ENV_QV_RAW_STAGE)fs_sro_inv_item.qvd]
		(qvd)
		Where exists(FSSites,SiteCd);
        
        Left Join(InvoiceItem)
        Load 
        	[%FSSROInvoiceLineID],
            [Standard Price(CUST)] * Conv_LOCAL as [Standard Price(LOCAL)],
		    [Net Price(CUST)] * Conv_LOCAL as [Net Price(LOCAL)],
		    [Extended Amount(CUST)] * Conv_LOCAL as [Extended Amount(LOCAL)],
            [Extended Labor Amount(CUST)] * Conv_LOCAL as [Extended Labor Amount(LOCAL)],
            [Extended Labor Cost(CUST)] * Conv_LOCAL as [Extended Labor Cost(LOCAL)],
		    [Item Cost(CUST)] * Conv_LOCAL as [Item Cost(LOCAL)],
            
            [Standard Price(CUST)] * Conv_USD as [Standard Price(USD)],
		    [Net Price(CUST)] * Conv_USD as [Net Price(USD)],
		    [Extended Amount(CUST)] * Conv_USD as [Extended Amount(USD)],
            [Extended Labor Amount(CUST)] * Conv_USD as [Extended Labor Amount(USD)],
            [Extended Labor Cost(CUST)] * Conv_USD as [Extended Labor Cost(USD)],
		    [Item Cost(CUST)] * Conv_USD as [Item Cost(USD)],
            
            [Standard Price(CUST)] * Conv_GBP as [Standard Price(GBP)],
		    [Net Price(CUST)] * Conv_GBP as [Net Price(GBP)],
		    [Extended Amount(CUST)] * Conv_GBP as [Extended Amount(GBP)],
            [Extended Labor Amount(CUST)] * Conv_GBP as [Extended Labor Amount(GBP)],
            [Extended Labor Cost(CUST)] * Conv_GBP as [Extended Labor Cost(GBP)],
		    [Item Cost(CUST)] * Conv_GBP as [Item Cost(GBP)]
            
        Resident InvoiceItem; 
		
		Left Join(InvoiceItem)
		LOAD PrimaryKey as %SROOperID,
		     [fs_sro_oper description] as [Oper Description],
             [fs_sro_oper product_code] as [Oper Product Code]
		FROM
		[$(ENV_QV_RAW_STAGE)fs_sro_oper.qvd]
		(qvd);
		
		
		
		
		Left Join(InvoiceItem)
		LOAD PrimaryKey as ItemId, 
		     [Item description] as item_description, 
		     [Item product_code] as item_product_code,
             [Item lot_size] as item_lot_size
		FROM
		[$(ENV_QV_RAW_STAGE)item.qvd]
		(qvd);
		

		
		Left Join(InvoiceItem)
		Load
		   %InvoiceID,
		    "inv_line",
		    If(isnull(item_product_code),[Oper Product Code] ,item_product_code) as [Product Code],
		    If(isnull(item_product_code),[Oper Description] ,item_description) as [Product Description],
            Subfield(ApplyMap('PRODUCT_CODE_MAP',%SiteID & '-' & If(isnull(item_product_code),[Oper Product Code] ,item_product_code),'Unknown|Unknown|Unknown'),'|',1) as [Product Code Description],
            Subfield(ApplyMap('PRODUCT_CODE_MAP',%SiteID & '-' & If(isnull(item_product_code),[Oper Product Code] ,item_product_code),'Unknown|Unknown|Unknown'),'|',2) as [Product Code Category],
            Subfield(ApplyMap('PRODUCT_CODE_MAP',%SiteID & '-' & If(isnull(item_product_code),[Oper Product Code] ,item_product_code),'Unknown|Unknown|Unknown'),'|',3) as [Product Code Sub Category]
		Resident
		   InvoiceItem;
           
        Left Join(InvoiceItem)
        Load
           [%InvoiceID],
           inv_line,
           'NA' as [Item Focus Group],
           Dual('No',0) as [Item Is In Focus Group],
           'SRO-' & AutoNumberHash128([%InvoiceID],inv_line,[Item No],[Product Description],[Product Code],[Product Code Description],'NA',Dual('No',0),item_lot_size) as %SROItemKey
        Resident InvoiceItem;
		
		Drop Fields item_description, item_product_code, [Oper Description], [Oper Product Code];
		



		
		Store InvoiceItem into [$(ENV_QV_FINAL_STAGE)NewFSInvoiceLineFact.qvd](QVD);
		Drop table InvoiceItem;

End Sub



sub SalesPersonHierarchy
	call BuildMappingTable('EmployeeNameMap')
       
		//EmployeeNameMap:
		//Mapping
		//LOAD SiteCd & '-' & emp_num, 
		//     name
		//FROM
		//[$(ENV_QV_FINAL_STAGE)employee Combined.qvd]
		//(qvd);
		
		//;
		
		//Using the paymatrix, Cusotmer slsman and Customer KAM data as the basis for all the "occurring" salesman, many of these are not found in the salesperson/commission tables
		//This process uses the fact tables to get all existing salespersons. This can only be run after the facts are processed
		SalesPersonTemp:
		LOAD Distinct
		     SiteCd,
		     Salesman
		FROM
		[$(ENV_QV_FINAL_STAGE)OrderPayMatrix_Splits.qvd]
		(qvd);
		
		Concatenate(SalesPersonTemp)
		LOAD Distinct
		     SiteCd,
		     [Salesperson ID] as Salesman
		FROM
		[$(ENV_QV_RAW_STAGE)customer.qvd]
		(qvd)
		Where Len(Trim(slsman))>0 and not exists(Salesman,[Salesperson ID]);
		
		Concatenate(SalesPersonTemp)
		LOAD Distinct 
		     SiteCd,
		     [Key Account Manager ID] as Salesman
		FROM
		[$(ENV_QV_RAW_STAGE)customer.qvd]
		(qvd)
		Where Len(Trim(Uf_KeyAcctMngr))>0 and  not exists(Salesman,[Key Account Manager ID]);
		
		Concatenate(SalesPersonTemp)
		LOAD  
		     [SiteCd] & '-Undefined' as Salesman, 
			 [SiteCd] as SiteCd
		FROM
		[$(ENV_QV_RAW_STAGE)Site.qvd]
		(qvd);

//brazil and china have to figure this out		
		For Each File in filelist('$(ENV_QV_REMOTE_DATA)Combined\ChinaFact.qvd')
			Concatenate(SalesPersonTemp)
			LOAD  
			     %Salesman as Salesman,
			     SubField(%Salesman,'-',1) as SiteCd
			FROM
			[$(File)]
			(qvd)
			Where Not exists(Salesman,%Salesman);
		Next File
		
		
		Store SalesPersonTemp into [$(ENV_QV_WORKING_DATA)OccurringSalesman.qvd](qvd);
		Drop Table SalesPersonTemp;
		
		Salesperson:
		LOAD
		SiteCd,
		SiteCd & '-' & slsman as "Salesperson",
		If(Len(Trim(slsmangr))>0,SiteCd & '-' & slsmangr,SiteCd & '-Undefined') as "Sales Manager",
		Capitalize(Subfield(ApplyMap('EmployeeNameMap', SiteCd &'-'& ref_num,SiteCd & '-Unknown'),',',1)) as "SalespersonName"
		FROM
		[$(ENV_QV_RAW_STAGE)slsman.qvd]
		(qvd);
		//Where Match(SiteCd,'INPROUS','INPROUK')=0 ;
		
//		Concatenate(Salesperson)
//		LOAD SiteCd, Salesperson,
//			 RegionalManager as [Sales Manager], 
//		     [Sales Person Name] as SalespersonName
//		FROM
//		[$(ENV_QV_RAW_STAGE)InproSalesPeople.qvd]
//		(qvd);
		
		
		
		
		CONCATENATE(Salesperson)
		LOAD * INLINE [
		    SiteCd, "Salesperson", "Sales Manager", "SalespersonName"
		    WB,WB,, WB
		    US,US-Undefined,WB,US-Null
		    UK,UK-Undefined,WB,UK-Null
		    MX,MX-Undefined,WB,MX-Null
		    RI,RI-Undefined,WB,RI-Null
		    TX,TX-Undefined,WB,TX-Null
		    CHN,CHN-Undefined,WB,CHN-Null
		    BRA,BRA-Undefined,WB,BRA-Null
		    INPROUS,INPROUS-Undefined,INPRO,INPROUS-Null
		    INPROUK,INPROUK-Undefined,INPRO,INPROUK-Null
		    INPRO,INPRO,WB,INPRO-Null
		    COOK,COOK-Undefined,WB,COOK-Null
            Cook_DPOPearland,Cook_DPOPearland-Undefined,COOK,Cook_DPOPearland-Null
            Cook_Jeffersonville,Cook_Jeffersonville-Undefined,COOK,Cook_Jeffersonville-Null
            Cook_Services,Cook_Services-Undefined,COOK,Cook_Services-Null            
		    Cook_ConsHou,Cook_ConsHou-Undefined,COOK,Cook_ConsHou-Null
			Cook_CCI,Cook_CCI-Undefined,COOK,Cook_CCI-Null
			Cook_CUK,Cook_CUK-Undefined,COOK,Cook_CUK-Null
            Cook_UK,Cook_UK-Undefined,COOK,Cook_UK-Null
			Cook_CCP,Cook_CCP-Undefined,COOK,Cook_CCP-Null
			Cook_Corp,Cook_Corp-Undefined,COOK,Cook_Corp-Null
			Cook_UAE,Cook_UAE-Undefined,COOK,Cook_UAE-Null
			Cook_WR,Cook_WR-Undefined,COOK,Cook_WR-Null
            UKMAG,UKMAG-Undefined,WB,UKMAG-Null
            MFS,MFS-Undefined,COOK,MFS-Null
		];
		
		Join(Salesperson)
		Load
			SiteCd,
			Salesman as Salesperson
		From [$(ENV_QV_WORKING_DATA)OccurringSalesman.qvd](qvd);
		
		
		Store Salesperson into [$(ENV_QV_WORKING_DATA)KnownSalespersonTemp.qvd](qvd);
		Drop Table Salesperson;
		
		Salesperson:
		Load
			Salesperson,
			If(Len(Trim([Sales Manager]))=0,If(Salesperson <> 'WB', SiteCd & '-Undefined'),[Sales Manager]) as [Sales Manager],
			If(Len(Trim(SalespersonName))=0,'Unknown',SalespersonName) as SalespersonName
		From [$(ENV_QV_WORKING_DATA)KnownSalespersonTemp.qvd](qvd);
		
		SalesHierarchy:
		Hierarchy(Salesperson, "Sales Manager", "SalespersonName",'Supervisor',"SalespersonName",'SalespersonTreeView','/')
		LOAD 
		*
		Resident Salesperson;
		
		Store SalesHierarchy into [$(ENV_QV_FINAL_STAGE)SalesHierarchyDim.qvd](qvd);
		Drop Table SalesHierarchy;
		SalesAncestors:
		HierarchyBelongsTo(Salesperson, "Sales Manager", "AncestorSalespersonName", 'ParentID', 'SalespersonSelector')
		LOAD
		"Salesperson",
		"Sales Manager",
		"SalespersonName" as "AncestorSalespersonName"
		Resident Salesperson;
		
		Store SalesAncestors into [$(ENV_QV_FINAL_STAGE)SalesAncestorsDim.qvd](qvd);
		
		Drop Tables Salesperson, SalesAncestors;
		
End sub



Sub ProcessCustomerComplaints

[Customer Complaints]:
LOAD 
	 [SiteCd] as %Site,
	 [SiteCd] & '-' & [RS_QCCCR ccr_num] as %CustomerComplaintID,
	 'Complaint' & '-' & [SiteCd] & '-' & [RS_QCCCR ccr_num] as %ComplaintOrderLinkKey, 
     [SiteCd] & '-' & [RS_QCCCR cust_num] &'-'& [RS_QCCCR cust_seq] as [%Customer Seq ID],
     [SiteCd] & '-' & [RS_QCCCR Item] as %item,
     If(Len(Trim([RS_QCCCR co_num]))>0,[SiteCd] & '-' & [RS_QCCCR co_num]) as %OrderNumber,
     If(Len(Trim([RS_QCCCR rma_num]))>0,[SiteCd] & '-RMA-' & [RS_QCCCR rma_num]) as %RMANumber,  
     [RS_QCCCR ccr_num] as [Cusotmer Complaint Num], 
     //[product_line], 
     [RS_QCCCR ccr_reason_code] as [Customer Complaint Reason],
     [RS_QCCCR rma_num] as [Customer Complaint RMA Number], 
     [RS_QCCCR co_num] as [Customer Complaint Order Number],
      [RS_QCCCR Item] as [Customer Complaint Item],
     [RS_QCCCR complaint_desc] as [Customer Complaint Desc],
     [RS_QCCCR cause_description] as [Customer Complaint Cause], 
     [RS_QCCCR ccr_action_type] as [Customer Complaint Action Type], 
     [RS_QCCCR corrective_action] as [Customer Complaint Action Desc],
     Date(Floor(Num([RS_QCCCR CreateDate]))) as [Customer Complaint Create Date],
     Date(Floor(Num([RS_QCCCR close_date]))) as [Customer Complaint Close Date],
     If(Len(Trim(Date(Floor(Num([RS_QCCCR close_date])))))=0,'Open','Closed') as [Customer Complaint Status],
     If(Len(Trim(Date(Floor(Num([RS_QCCCR close_date])))))>0,Floor(Num([RS_QCCCR close_date]))-Floor(Num([RS_QCCCR CreateDate])),Null()) as [Customer Complaint Days To Close],
     1 as [Customer Complaint Counter]
FROM
[$(ENV_QV_RAW_STAGE)RS_QCCCR.qvd]
(qvd);

Store [Customer Complaints] into [$(ENV_QV_FINAL_STAGE)Customer Complaints.qvd](qvd);

Drop table [Customer Complaints];

ComplaintOrderLink:
Load Distinct
	 %ComplaintOrderLinkKey, 
     %OrderNumber//,
     //%RMANumber
From [$(ENV_QV_FINAL_STAGE)Customer Complaints.qvd](qvd)
Where len(Trim(%OrderNumber))>0;  


Concatenate(ComplaintOrderLink)
Load Distinct
	 %ComplaintOrderLinkKey, 
     //%OrderNumber,
     %RMANumber as %OrderNumber
From [$(ENV_QV_FINAL_STAGE)Customer Complaints.qvd](qvd)
Where len(Trim(%RMANumber))>0;

Concatenate(ComplaintOrderLink)
LOAD Distinct
	 %OrderNumber as %ComplaintOrderLinkKey, 
	 %OrderNumber
FROM
[$(ENV_QV_FINAL_STAGE)OrderDim.qvd]
(qvd);

Store ComplaintOrderLink into [$(ENV_QV_FINAL_STAGE)ComplaintOrderLink.qvd](qvd);
Drop Table ComplaintOrderLink;


End sub



sub ProcessHoldCodeDim
   	HoldCodeDim:
	LOAD 
	     SiteCd & '-' & Value as %HoldCode,
	     Value as HoldCode,
	     Description as HoldCodeDesc
	FROM
	[$(ENV_QV_RAW_STAGE)UserDefinedTypeValues.qvd]
	(qvd)
	Where TypeName = 'HoldCode';


Store HoldCodeDim into [$(ENV_QV_FINAL_STAGE)HoldCodeDim.qvd](qvd);
Drop Table HoldCodeDim;


end sub



sub ProcessJobTransactions
    Call BuildMappingTable('OperationCompleteDate')
    Call BuildMappingTable('IndMap')
    Call BuildMappingTable('MapYesNo')

   JobTransactions:
   LOAD
      SiteCd, 
      SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) as %JobId,
      UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) as JobNumber,
      type as JobType,
      suffix as JobSuffix,
      SiteCd & '-' & item as %Item,
      "qty_complete" as JobQtyComplete,
      "qty_scrapped" as JobQtyScrapped,
      "qty_released" as JobQtyReleased,
      stat as JobStatus,
      Date(Floor(Num("lst_trx_date"))) as JobLastTransDate,
      Date(Floor(Num(RecordDate))) as JobUpdateDate,
      SiteCd & '-' & "ord_num" & '--' & "ord_line" &  '-' & ord_release as [%OrderLinReleaseId],
      SiteCd & '-' & "ord_num" & '--' & "ord_line" as %OrderLineId,
      SiteCd & '-' & "ord_num" as %OrderId
	FROM
	[$(ENV_QV_RAW_STAGE)job.qvd]
	(qvd);
	
	Store JobTransactions into [$(ENV_QV_WORKING_DATA)JobTemp.qvd](qvd);

   Join (JobTransactions)
   LOAD
      SiteCd,
      SiteCd & '-' & 
       UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' &
       If(isnull(suffix) = -1,-1,suffix) as %JobId, 
       SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) & '-' & If(Isnull("oper_num") = -1,-1,oper_num)  as %OperationID,
      "oper_num" as OperationNumber,
      SiteCd & '-' & wc as %wc,
      complete,
      Date(Floor(Num(RecordDate))) as OpUpdateDate,
      qty_scrapped as OpQtyScrap,
      qty_received as OpQtyRecvd,
      qty_moved as OpQtyMoved,
      qty_complete as OpQtyComplete,
      ApplyMap('OperationCompleteDate',SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) & '-' & If(Isnull("oper_num") = -1,-1,oper_num),Date(Floor(Num(RecordDate)))) as [Operation Close Date],
      If(complete = 1,'Yes','No')  as [Operation Complete]
   from [$(ENV_QV_RAW_STAGE)jobroute.qvd](qvd)
   Where complete = 1;
   

	StandardHoursTemp:
	crosstable ( TransactionType , StandardHours, 3 )
    Load
      SiteCd,
       SiteCd & '-' & UPPER(If(isnull([jrt_sch job]) = -1 or [jrt_sch job] = '','---BLANK JOB---',[jrt_sch job])) & '-' & If(isnull([jrt_sch suffix]) = -1,-1,[jrt_sch suffix]) as %JobId, 
       SiteCd & '-' & UPPER(If(isnull([jrt_sch job]) = -1 or [jrt_sch job] = '','---BLANK JOB---',[jrt_sch job])) & '-' & If(isnull([jrt_sch suffix]) = -1,-1,[jrt_sch suffix]) & '-' & If(Isnull([jrt_sch oper_num]) = -1,-1,[jrt_sch oper_num])  as %OperationID,
      [jrt_sch setup_hrs] as S,
      [jrt_sch run_lbr_hrs] as R
   from [$(ENV_QV_RAW_STAGE)jrt_sch.qvd](qvd);
   //Where Exists(%JobId, '$(vSite)' & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix))
   //And Exists(%OperationID, '$(vSite)' & '-' &  UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) & '-' & If(Isnull("oper_num") = -1,-1,oper_num));
   
   	Join(JobTransactions)
	Load *
	Resident StandardHoursTemp;
	
	drop table StandardHoursTemp;

   Join(JobTransactions)
   LOAD
      SiteCd,
       SiteCd & '-' & Floor("trans_num") as TransactionNumber,
       SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) as %JobId,
       SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) & '-' & If(Isnull("oper_num") = -1,-1,oper_num)  as %OperationID,
      Floor("trans_num") as [Transaction Number],
      "trans_type" as TransactionType,
      Date(Floor(Num("trans_date"))) as TransDate,
      If(trans_type = 'I', 0,"a_hrs") as ActualHours,
      ApplyMap('IndMap',  SiteCd & '-' & Upper("ind_code"), 1) *  If(trans_type = 'I', "a_hrs", 0) as IndirectHours,
      If(ApplyMap('IndMap',  SiteCd & '-' & Upper("ind_code"), 1) = 0, If(trans_type = 'I', "a_hrs", 0), 0)  as ExcludedIndirectHours,
      If(trans_type = 'S', "a_hrs", 0) as SetupHours,
      If(trans_type = 'R', "a_hrs", 0) as RunHours,
      SiteCd & '-' & UPPER("emp_num") as %emp_num,
      Date(Floor(Num(RecordDate))) as TransUpdateDate,
       SiteCd & '-' & Upper("ind_code") as %ind_code,
      applymap('MapYesNo', complete_op, 'No') as [Transaction Completes Operation],
      If(applymap('MapYesNo', complete_op, 'No') = 'Yes', Date(Floor(num(trans_date))),Date(Num('01/01/1880'))) as [Operation Complete Date]
   FROM
      [$(ENV_QV_RAW_STAGE)jobtran.qvd](qvd)
   Where (Exists(%JobId,  SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix))
   And Exists(%OperationID,  SiteCd & '-' & UPPER(If(isnull(job) = -1 or job = '','---BLANK JOB---',job)) & '-' & If(isnull(suffix) = -1,-1,suffix) & '-' & If(Isnull("oper_num") = -1,-1,oper_num)))
   OR trans_type = 'I';
   /*SQL SELECT "trans_num",
      job,
      suffix,
      "trans_type",
      "trans_date",
      "oper_num",
      "a_hrs",
      "emp_num",
      RecordDate,
      "ind_code",
      complete_op
   FROM $(vSiteDb).dbo.jobtran
   Where trans_type in ('I','R','S','M');
*/

	JobTransactionsTemp:
	Load RecNo() as RowNumber,
		'Operation Productivity' as FactType,
		If(Isnull(TransactionType) <> -1 AND TransactionType = 'I', 'C', JobStatus) as NewJobStatus,
		*
	Resident JobTransactions
	Where TransactionType = 'I' or JobType = 'J';
	
	Drop Table JobTransactions;

	Drop Field JobStatus from JobTransactionsTemp;

	Rename Table JobTransactionsTemp to JobTransactions;
	
	Join(JobTransactions)
	Load
		SiteCd,
		%OperationID,
		TransactionType,
		Sum(ActualHours) as TotalOperationHours
	resident JobTransactions
	Group by
		SiteCd,
		%OperationID,
		TransactionType;
	
	Join(JobTransactions)
	Load
	   RowNumber,
	   If(Isnull(ActualHours) = -1,1,ActualHours/TotalOperationHours) as WorkContributionPercent,
	   StandardHours * If(TransactionType = 'R',JobQtyReleased, 1) as TotalStandardHours,
	   (StandardHours * If(TransactionType = 'R',JobQtyReleased, 1)) * If(Isnull(ActualHours) = -1,1,ActualHours/TotalOperationHours) as ProportionalStandardHours
	   //If(not Isnull(JobLastTransDate),JobLastTransDate, If(not isnull(TransDate), TransDate,If(not isnull(TransUpdateDate), TransUpdateDate,If(not isnull(OpUpdateDate),OpUpdateDate, JobUpdateDate)))) as MasterDate
	Resident JobTransactions;
	
	Join (JobTransactions)
	Load
		RowNumber,
		If(TransactionType = 'R', ProportionalStandardHours, 0 ) as StandardRunHours,
		If(TransactionType = 'S', ProportionalStandardHours, 0 ) as StandardSetupHours,
		Date(Floor(Num(If(TransactionType = 'I', TransDate, If([Operation Complete] = 'Yes', [Operation Close Date], date(Today())))))) AS MasterDate
	resident JobTransactions;
	

	
	OperationTotals:
	Load
		%OperationID,
		Sum(ActualHours) as TotOpHours,
		Sum(SetupHours) as TotOpSetupHours,
		Sum(RunHours) as TotOpRunHours
	Resident JobTransactions
	Group by 
		%OperationID; 
	
	Store OperationTotals into [$(ENV_QV_FINAL_STAGE)OperationTotalsFact.qvd](qvd);
	Drop table OperationTotals;
	
	Job:
	Load * from
	[$(ENV_QV_WORKING_DATA)JobTemp.qvd](qvd);
	
	Left Join (Job)
	Load
		%JobId,
		JobCount,
		If(CompletedJobCount > 0 and LaborTransactionCount > 0 , 1, Null()) as CompletedLaborJobCount,
		TotJobHours,
		TotJobSetupHours,
		TotJobRunHours,
		JobUpdateDate,
		EarliestWorkTransactionDate as [Job Earliest Work Trans Date],
		//Date(Floor(Num(EarliestWorkTransactionDate))) as [Job Earliest Work Transaction Date],
		//Time(Frac(Num(EarliestWorkTransactionDate))) as [Job Earliest Work Transaction Time],
		//LatestWorkTransactionDate,
		//Date(Floor(Num(LatestWorkTransactionDate))) as [Job Latest Work Transaction Date],
		//Date(Frac(Num(LatestWorkTransactionDate))) as [Job Latest Work Transaction],
		If(CompletedJobCount > 0 and LaborTransactionCount > 0 , JobUpdateDate - EarliestWorkTransactionDate, Null()) as [JobCompleteCycleTime];
	Load
		%JobId,
		JobUpdateDate,
		1 as JobCount,
		Sum(If(NewJobStatus = 'C',1,null())) as CompletedJobCount,
		Sum(If(Match(TransactionType,'R','S')>0,1,Null())) as LaborTransactionCount,
		Sum(ActualHours) as TotJobHours,
		Sum(SetupHours) as TotJobSetupHours,
		Sum(RunHours) as TotJobRunHours, 
		Date(Min(If( Match(TransactionType,'R','S')>0,TransDate,Null()))) as EarliestWorkTransactionDate
		//date(Max(If( Match(TransactionType,'R','S')>0,TransDate,Null()))) as LatestWorkTransactionDate
	Resident JobTransactions
	Group by 
		%JobId,
		JobUpdateDate;
	
	Drop Fields JobNumber, JobSuffix, JobType, JobQtyComplete, JobQtyScrapped, JobQtyReleased, JobStatus, JobLastTransDate, JobUpdateDate  from JobTransactions;

	Store JobTransactions into [$(ENV_QV_FINAL_STAGE)JobTransactionsFact.qvd](qvd);
	Drop table JobTransactions;
	
	Store Job into [$(ENV_QV_FINAL_STAGE)JobDim.qvd](qvd);
	Drop table Job;



end sub



Sub ProcessHourSummaries
For Each SummariesFile in filelist('lib://QlikDataFiles Corporate Share/HR/HourSummaries/*_HourSummary_????????.xls')

	
	Let vFileName = SubField('$(SummariesFile)','/',6);
    Let vFileSite = SubField('$(vFileName)','_',1);
    Let vFileDateString = Subfield(Subfield('$(vFileName)','_',3),'.',1);
    Let vFileDate = Date(Floor(WeekEnd(Date(Date#('$(vFileDateString)','YYYYMMDD')))));
    
    Trace $(SummariesFile) $(vFileDateString) $(vFileDate) $(vFileSite);
    
    If IsNull(TableNumber('HourSummary')) Then
    	Let vTableStatement = 'HourSummary:';
    Else
    	Let vTableStatement = 'Concatenate(HourSummary)';
    EndIf;
//Ignore the error. Using vTabelStatement as the table name makes the script think there is an error
$(vTableStatement)
LOAD
	'$(vFileSite)' as SiteCd,
    '$(vFileSite)' &'-' &"Employee ID" as %emp_num,
    //"Employee ID",
    //"Employee Name",
    "Manager ID",
    "Manager Name",
    Date(Floor(Num("Effective Date"))) as "MasterDate",
    "Historical Date",
    "Home GV Co Code",
    "Home GV Cost Center",
    "Home Job Code",
    "Home Location",
    "Home LL5",
    "Home LL6",
    "Home Reports To",
    "Pay Code",
    "Hours" as PaidHours,
    "Money",
    "Days",
    "Comment(s)"
From [$(SummariesFile)]
(biff, embedded labels, header is 8 lines, table is Sheet1$);
    
Next SummariesFile;

Store HourSummary INTO [$(ENV_QV_FINAL_STAGE)PaidHourSummary.qvd](qvd);
Drop Table HourSummary;

End Sub;



Sub ProcessOrderLineCycleTimes

Call BuildMappingTable('MapJobType');

	OrderLine:
	LOAD 
	    SiteCd,
	    PrimaryKey as %OrderId, 
	    order_date as [Order Line Order Date]
	FROM
	[$(ENV_QV_RAW_STAGE)co.qvd] (qvd)
	Where type = 'R';
	
	Inner Join(OrderLine)
	LOAD PrimaryKey as [%OrderLinReleaseId],
	     SiteCd & '-' & co_num as %OrderId, 
	      SiteCd & '-' & co_num & '-' & co_line as %OrderLineId,
	      co_line as [Order Line Number], 
	     SiteCd & '-' & item as %Item, 
	     1 as [Order Line Count],
	     stat as [Order Line Status],
	     SiteCd & '-' & Uf_HoldCode as [Order Line Current Hold Code],
	     applymap('MapJobType',Upper(Uf_JobType)) as [Job Type]
	FROM
	[$(ENV_QV_RAW_STAGE)coitem.qvd] (qvd)
	Where stat = 'C';


	[Order Line Hold Code Temp]:
    Load
   		//RowNo() as RecordNumber,
   	  	SiteCd & '-' & "co_num" & '-' & co_line as %OrderLineId,
   		SiteCd & '-' & hold_code as [%HoldCode],
   		changedate as [Order Line Hold Code Begin Datetime],
   		Date(Floor(Num(changedate))) as [Order Line Hold Code Begin Date],
   		Time(frac(Num(changedate))) as [Order Line Hold Code Begin Time]
	FROM [$(ENV_QV_RAW_STAGE)wb_coitem_hold.qvd](qvd);

	[Order Line Hold Code]:
    Load
   		RowNo() as RecordNumber,
   	  	%OrderLineId,
   		[%HoldCode],
   		[Order Line Hold Code Begin Datetime],
   		[Order Line Hold Code Begin Date],
   		[Order Line Hold Code Begin Time]
	Resident [Order Line Hold Code Temp]
	Order by %OrderLineId, [Order Line Hold Code Begin Datetime];
	
	Drop table [Order Line Hold Code Temp];
	
	Left join(OrderLine)
	Load %OrderLineId,
	     'Order Line Cycle Times' as FactType,
	     Date(Min([Order Line Hold Code Begin Datetime])) as EarliestPCodeDate
	Resident [Order Line Hold Code]
	Where WildMatch(%HoldCode,'*-P')>0
	Group by %OrderLineId;
	
	Left Join ([OrderLine])
    Load 
		SiteCd & '-' & "co_num" & '-' & co_line as %OrderLineId,
		Date(Max(ship_date)) as [Order Line Latest Ship Date],
		Date(Min(ship_date)) as [Order Line Earliest Ship Date],
		sum(qty_shipped) as [Order Line Quantity Shipped]
	from [$(ENV_QV_RAW_STAGE)co_ship.qvd](qvd)
	Group by
		SiteCd, "co_num", co_line; 
	
	Left Join ([OrderLine])
	Load
		%OrderLineId,
		//Interval([Order Line Latest Work Transaction Date] - [Order Line Earliest Work Transaction Date],'D hh:mm') as [Order Line Cycle Time(Earliest Work - Latest Work)],
		//Interval([Order Line Latest Ship Date] - [Order Line Earliest Work Transaction Date],'D hh:mm') as [Order Line Cycle Time (Earliest Work - Latest Ship)],
		Interval([Order Line Latest Ship Date] - [EarliestPCodeDate],'D hh:mm') as [Order Line Production Lead Time],
		Interval([Order Line Latest Ship Date] - [Order Line Order Date],'D hh:mm') as [Order Line Total Lead Time]
	Resident OrderLine;	

    Store OrderLine into [$(ENV_QV_FINAL_STAGE)OrderLineCycleTimeFact.qvd](qvd);
    //Drop Table OrderLine;

	//BeginHold Code Cycle Times
	Left join([Order Line Hold Code])
	Load
		%OrderLineId,
		RecordNumber - 1 as RecordNumber,
		[Order Line Hold Code Begin Datetime] as [Order Line Hold Code End Datetime],
		[Order Line Hold Code Begin Date] as [Order Line Hold Code End Date],
	   	[Order Line Hold Code Begin Time] as [Order Line Hold Code End Time],
	   	%HoldCode as %NextHoldCode
	Resident [Order Line Hold Code];
	
	Left Join([Order Line Hold Code])
    Load
		%OrderLineId,
		[Order Line Latest Ship Date] as [Order Line Hold Code Last Ship Datetime]
    Resident [OrderLine];
    
    Rename Table [Order Line Hold Code] to [Order Line Hold Code Temp];



	
	[Order Line Hold Code]:
	Load
		SiteCd,
		%OrderId,
		%OrderLineId,
		%Item,
		[Order Line Latest Ship Date] as OrderLineCloseDate
	Resident OrderLine;
		
	Left Join([Order Line Hold Code])
	Load
		[%OrderLineId],
		//[RecordNumber],
		[%HoldCode],
		[%NextHoldCode],
		[Order Line Hold Code Begin Date],
		[Order Line Hold Code Begin Time],
		If(Len(Trim([Order Line Hold Code End Datetime]))>0,[Order Line Hold Code End Date],Date(Floor(Num([Order Line Hold Code Last Ship Datetime])))) as [Order Line Hold Code End Date],
		If(Len(Trim([Order Line Hold Code End Datetime]))>0,[Order Line Hold Code End Time],Time(frac(Num([Order Line Hold Code Last Ship Datetime])))) as [Order Line Hold Code End Time],
		Interval(If(Len(Trim([Order Line Hold Code End Date]))>0,[Order Line Hold Code End Datetime] - [Order Line Hold Code Begin Datetime],[Order Line Hold Code Last Ship Datetime] - [Order Line Hold Code Begin Datetime] ),'D hh:mm') as [Order Line Hold Code Interval]
	Resident [Order Line Hold Code Temp];
	
	HoldCodeIntervals:
	Load 
		SiteCd,
		%OrderId,
		[%OrderLineId],
		%Item,
		'Hold Code Intervals' as FactType,
		OrderLineCloseDate as MasterDate,
		1 as [Order Line Hold Code Count],
		//[RecordNumber] as [Order Line Hold Code Record Number],
		[%HoldCode],
		[%NextHoldCode],
		[Order Line Hold Code Begin Date],
		[Order Line Hold Code Begin Time],
		[Order Line Hold Code End Date],
		[Order Line Hold Code End Time],
		[Order Line Hold Code Interval]
	resident [Order Line Hold Code];
	
	Store HoldCodeIntervals into [$(ENV_QV_FINAL_STAGE)HoldCodeIntervalFact.qvd](qvd);
	
	Drop Tables [Order Line Hold Code], [Order Line Hold Code Temp], OrderLine, HoldCodeIntervals;


End sub



sub ProcessEmployeeDim

	EmployeeDim:
	LOAD SiteCd & '-' & upper(emp_num)  as %EmployeeId, 
	     emp_num as [Employee Number], 
	     name as [Employee Name]
	FROM
	[$(ENV_QV_RAW_STAGE)employee.qvd]
	(qvd);
    
	Store EmployeeDim into [$(ENV_QV_FINAL_STAGE)EmployeeDim.qvd](qvd);
	Drop Table EmployeeDim;

End Sub



sub ProcessWorkCenter
	
	WorkCenterDim:
	LOAD PrimaryKey as %WorkCenterId, 
		wc as [Work Center Code], 
		description as [Work Center Description]
	FROM
	[$(ENV_QV_RAW_STAGE)wc.qvd](qvd);

	Store WorkCenterDim into [$(ENV_QV_FINAL_STAGE)WorkCenterDim.qvd](qvd);
	drop table WorkCenterDim;
	
	ResourceGroupBridge:
	LOAD
		SiteCd & '-' & wc as %WorkCenterId,
		SiteCd & '-' & rgid as %ResourceGroupId
	FROM
	[$(ENV_QV_RAW_STAGE)wcresourcegroup.qvd](qvd);
	
	Store ResourceGroupBridge into [$(ENV_QV_FINAL_STAGE)ResourceGroupBridge.qvd](qvd);
	drop table ResourceGroupBridge;

	ResourceGroup:
	LOAD 
		SiteCd & '-' & RGID as %ResourceGroupId,
		RGID as ResourceGroupID,
		DESCR as ResourceGroup
	FROM
	[$(ENV_QV_RAW_STAGE)RGRP000.qvd](qvd);
	
	Store ResourceGroup into [$(ENV_QV_FINAL_STAGE)ResourceGroup.qvd](qvd);
	drop table ResourceGroup;
	
    IndCodes:
    LOAD
      SiteCd & '-' & "ind_code" as %ind_code,
      "ind_code" as IndirectCode,
      description as IndirectDesc
	From [$(ENV_QV_RAW_STAGE)indcode.qvd](qvd);
	
	Store IndCodes into [$(ENV_QV_FINAL_STAGE)IndCodes.qvd](qvd);
	drop table IndCodes;
End Sub


SUB ProcessOrderInvoiceLookup

OrderInvoiceLookup:
LOAD
    'Order-' & SiteCd & '-' & "invoice Line co_num" & '-' & "invoice Line co_line" & '-' & "invoice Line co_release" AS %OrderItem,
    CONCAT(SUBFIELD("Invoice Line Invoice ID", '-',2),', ') AS "Order Invoice List"
FROM [$(ENV_QV_RAW_STAGE)inv_item.qvd]
(qvd)
GROUP BY SiteCd, "invoice Line co_num", "invoice Line co_line", "invoice Line co_release"
;

Store OrderInvoiceLookup into [$(ENV_QV_FINAL_STAGE)OrderInvoiceLookup.qvd](qvd);

END SUB

